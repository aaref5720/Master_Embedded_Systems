
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001700  08001700  00011708  2**0
                  CONTENTS
  4 .ARM          00000000  08001700  08001700  00011708  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001700  08001708  00011708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001704  08001704  00011704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08001708  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001708  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011708  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e154  00000000  00000000  00011731  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001068  00000000  00000000  0001f885  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000df0  00000000  00000000  000208ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000260  00000000  00000000  000216e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  00021940  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000286a  00000000  00000000  00021b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002e64  00000000  00000000  00024392  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a97b  00000000  00000000  000271f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031b71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000760  00000000  00000000  00031bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080016d8 	.word	0x080016d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080016d8 	.word	0x080016d8

08000170 <USART1_CallBack>:

/*******************************************************************************
                                  APP Function
*******************************************************************************/
void USART1_CallBack(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART1, &data, Interrupt_Mechanism);
 8000174:	2200      	movs	r2, #0
 8000176:	490f      	ldr	r1, [pc, #60]	; (80001b4 <USART1_CallBack+0x44>)
 8000178:	480f      	ldr	r0, [pc, #60]	; (80001b8 <USART1_CallBack+0x48>)
 800017a:	f001 fa03 	bl	8001584 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData   (USART1, &data, Polling_Mechanism);
 800017e:	2201      	movs	r2, #1
 8000180:	490c      	ldr	r1, [pc, #48]	; (80001b4 <USART1_CallBack+0x44>)
 8000182:	480d      	ldr	r0, [pc, #52]	; (80001b8 <USART1_CallBack+0x48>)
 8000184:	f001 f9ac 	bl	80014e0 <MCAL_UART_SendData>

	//Send to SPI1
	MCAL_GPIO_WritePin(GPIOA, SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index], FALSE);
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <USART1_CallBack+0x4c>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	2200      	movs	r2, #0
 800018e:	4619      	mov	r1, r3
 8000190:	480b      	ldr	r0, [pc, #44]	; (80001c0 <USART1_CallBack+0x50>)
 8000192:	f000 fbcb 	bl	800092c <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &data, Polling_Mechanism);
 8000196:	2201      	movs	r2, #1
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <USART1_CallBack+0x44>)
 800019a:	480a      	ldr	r0, [pc, #40]	; (80001c4 <USART1_CallBack+0x54>)
 800019c:	f000 fe52 	bl	8000e44 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index], TRUE );
 80001a0:	4b06      	ldr	r3, [pc, #24]	; (80001bc <USART1_CallBack+0x4c>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	2201      	movs	r2, #1
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <USART1_CallBack+0x50>)
 80001aa:	f000 fbbf 	bl	800092c <MCAL_GPIO_WritePin>
#endif
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000030 	.word	0x20000030
 80001b8:	40013800 	.word	0x40013800
 80001bc:	080016f0 	.word	0x080016f0
 80001c0:	40010800 	.word	0x40010800
 80001c4:	40013000 	.word	0x40013000

080001c8 <SPI_Transmitter_between_2MCU>:
	}
#endif
}

void SPI_Transmitter_between_2MCU(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
	/************************************************************/
	// Configuration of USART1
	USART_Config_t UART1_Config;
	UART1_Config.BaudRate       = UART_BaudRate_115200;
 80001ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001d2:	61bb      	str	r3, [r7, #24]
	UART1_Config.HW_FlowControl = UART_HW_FlowControl_NONE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	77fb      	strb	r3, [r7, #31]
	UART1_Config.IRQ_Enable     = UART_IRQ_Enable_RXNEIE;
 80001d8:	2303      	movs	r3, #3
 80001da:	f887 3020 	strb.w	r3, [r7, #32]
	UART1_Config.P_IRQ_CallBack = USART1_CallBack;
 80001de:	4b21      	ldr	r3, [pc, #132]	; (8000264 <SPI_Transmitter_between_2MCU+0x9c>)
 80001e0:	627b      	str	r3, [r7, #36]	; 0x24
	UART1_Config.Parity         = UART_Parity_Disable;
 80001e2:	2300      	movs	r3, #0
 80001e4:	777b      	strb	r3, [r7, #29]
	UART1_Config.Payload_Length = UART_Payload_Length_8B;
 80001e6:	2300      	movs	r3, #0
 80001e8:	773b      	strb	r3, [r7, #28]
	UART1_Config.StopBits       = UART_StopBits_1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	77bb      	strb	r3, [r7, #30]
	UART1_Config.USART_Mode     = UART_Mode_TX_RX;
 80001ee:	2302      	movs	r3, #2
 80001f0:	753b      	strb	r3, [r7, #20]

	MCAL_UART_Init(USART1, &UART1_Config);
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	4619      	mov	r1, r3
 80001f8:	481b      	ldr	r0, [pc, #108]	; (8000268 <SPI_Transmitter_between_2MCU+0xa0>)
 80001fa:	f000 ff29 	bl	8001050 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <SPI_Transmitter_between_2MCU+0xa0>)
 8000200:	f001 f868 	bl	80012d4 <MCAL_UART_GPIO_Set_Pins>

    /************************************************************/
	// Configuration of SPI1
	SPI_Config_t SPI1_Config;
	SPI1_Config.CLK_Phase          = SPI_CLK_PHASE_SECOND;
 8000204:	2301      	movs	r3, #1
 8000206:	727b      	strb	r3, [r7, #9]
	SPI1_Config.CLK_Polarity       = SPI_CLK_POLARITY_IDLE_HIGH;
 8000208:	2301      	movs	r3, #1
 800020a:	723b      	strb	r3, [r7, #8]
	SPI1_Config.Frame_Size         = SPI_FRAME_SIZE_8BIT;
 800020c:	2300      	movs	r3, #0
 800020e:	71fb      	strb	r3, [r7, #7]
	SPI1_Config.Frame_Format       = SPI_FRAME_FORMAT_MSB_FIRST;
 8000210:	2300      	movs	r3, #0
 8000212:	71bb      	strb	r3, [r7, #6]
	SPI1_Config.BaudRate_Prescaler = SPI_BAUDERATE_PRESCALER_8;    //Assume by default PCLK2 is 8MHZ
 8000214:	2302      	movs	r3, #2
 8000216:	72fb      	strb	r3, [r7, #11]
	SPI1_Config.Communication_Mode = SPI_COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
 8000218:	2300      	movs	r3, #0
 800021a:	717b      	strb	r3, [r7, #5]

#ifdef MCU_Act_As_Master
	SPI1_Config.SPI_Mode       = SPI_MODE_MASTER;
 800021c:	2301      	movs	r3, #1
 800021e:	713b      	strb	r3, [r7, #4]
	SPI1_Config.NSS            = SPI_NSS_SW_SSI_SET;
 8000220:	2303      	movs	r3, #3
 8000222:	72bb      	strb	r3, [r7, #10]
	SPI1_Config.IRQ_Enable     = SPI_IRQ_ENABLE_NONE;
 8000224:	2300      	movs	r3, #0
 8000226:	733b      	strb	r3, [r7, #12]
	SPI1_Config.P_IRQ_CallBack = NULL;
 8000228:	2300      	movs	r3, #0
 800022a:	613b      	str	r3, [r7, #16]

	//Configure SS on PA4 by GPIO
	GPIO_PinConfig_t Pin_Config;
	Pin_Config.GPIO_PinNumber    = SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index];
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SPI_Transmitter_between_2MCU+0xa4>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	803b      	strh	r3, [r7, #0]
	Pin_Config.GPIO_MODE         = GPIO_MODE_Output_pp;
 8000232:	2304      	movs	r3, #4
 8000234:	70bb      	strb	r3, [r7, #2]
	Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000236:	2301      	movs	r3, #1
 8000238:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800023a:	463b      	mov	r3, r7
 800023c:	4619      	mov	r1, r3
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <SPI_Transmitter_between_2MCU+0xa8>)
 8000240:	f000 fafa 	bl	8000838 <MCAL_GPIO_Init>

	//Force the slave select (High) Idle Mode
	MCAL_GPIO_WritePin(GPIOA, SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index], TRUE);
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <SPI_Transmitter_between_2MCU+0xa4>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2201      	movs	r2, #1
 800024a:	4619      	mov	r1, r3
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <SPI_Transmitter_between_2MCU+0xa8>)
 800024e:	f000 fb6d 	bl	800092c <MCAL_GPIO_WritePin>
	SPI1_Config.IRQ_Enable     = SPI_IRQ_ENABLE_RXNEIE;
	SPI1_Config.NSS            = SPI_NSS_HW_SLAVE;
	SPI1_Config.P_IRQ_CallBack = SPI1_CallBack;
#endif

	MCAL_SPI_Init(SPI1, &SPI1_Config);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4619      	mov	r1, r3
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <SPI_Transmitter_between_2MCU+0xac>)
 8000258:	f000 fce8 	bl	8000c2c <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <SPI_Transmitter_between_2MCU+0xac>)
 800025e:	f000 fe1f 	bl	8000ea0 <MCAL_SPI_GPIO_Set_Pins>

	while(1);
 8000262:	e7fe      	b.n	8000262 <SPI_Transmitter_between_2MCU+0x9a>
 8000264:	08000171 	.word	0x08000171
 8000268:	40013800 	.word	0x40013800
 800026c:	080016f0 	.word	0x080016f0
 8000270:	40010800 	.word	0x40010800
 8000274:	40013000 	.word	0x40013000

08000278 <main>:
                                     Includes
*******************************************************************************/
#include "SPI_Transmitter_between_2MCU.h"

int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	SPI_Transmitter_between_2MCU();
 800027c:	f7ff ffa4 	bl	80001c8 <SPI_Transmitter_between_2MCU>
 8000280:	2300      	movs	r3, #0
}
 8000282:	4618      	mov	r0, r3
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f001 f9eb 	bl	8001690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ffdd 	bl	8000278 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08001708 	.word	0x08001708
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	20000070 	.word	0x20000070

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <EXTI0_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void EXTI0_IRQHandler()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI0);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI0]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI0_IRQHandler+0x20>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4798      	blx	r3
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000034 	.word	0x20000034

08000300 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI1);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI1_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI1_IRQHandler+0x1c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x20>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	20000034 	.word	0x20000034

08000324 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI2);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI2_IRQHandler+0x20>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	20000034 	.word	0x20000034

08000348 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI3);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI3]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI3_IRQHandler+0x20>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	20000034 	.word	0x20000034

0800036c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI4);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI4]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI4_IRQHandler+0x20>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000034 	.word	0x20000034

08000390 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR.PR & (1 << EXTI5)) {EXTI->PR.PR |= (1<<EXTI5);  GP_IRQCallBack[EXTI5]();}
 8000394:	4b28      	ldr	r3, [pc, #160]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d009      	beq.n	80003b4 <EXTI9_5_IRQHandler+0x24>
 80003a0:	4b25      	ldr	r3, [pc, #148]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a24      	ldr	r2, [pc, #144]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b23      	ldr	r3, [pc, #140]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4798      	blx	r3
	else if (EXTI->PR.PR & (1 << EXTI7)) {EXTI->PR.PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
	else if (EXTI->PR.PR & (1 << EXTI8)) {EXTI->PR.PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
	else if (EXTI->PR.PR & (1 << EXTI9)) {EXTI->PR.PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
	else{ /* Misra */ }

}
 80003b2:	e03e      	b.n	8000432 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI6)) {EXTI->PR.PR |= (1<<EXTI6);  GP_IRQCallBack[EXTI6]();}
 80003b4:	4b20      	ldr	r3, [pc, #128]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d009      	beq.n	80003d4 <EXTI9_5_IRQHandler+0x44>
 80003c0:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4798      	blx	r3
}
 80003d2:	e02e      	b.n	8000432 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI7)) {EXTI->PR.PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d009      	beq.n	80003f4 <EXTI9_5_IRQHandler+0x64>
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 80003ee:	69db      	ldr	r3, [r3, #28]
 80003f0:	4798      	blx	r3
}
 80003f2:	e01e      	b.n	8000432 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI8)) {EXTI->PR.PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d009      	beq.n	8000414 <EXTI9_5_IRQHandler+0x84>
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 800040e:	6a1b      	ldr	r3, [r3, #32]
 8000410:	4798      	blx	r3
}
 8000412:	e00e      	b.n	8000432 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI9)) {EXTI->PR.PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041c:	2b00      	cmp	r3, #0
 800041e:	d008      	beq.n	8000432 <EXTI9_5_IRQHandler+0xa2>
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI9_5_IRQHandler+0xa8>)
 8000426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042a:	6153      	str	r3, [r2, #20]
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI9_5_IRQHandler+0xac>)
 800042e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	20000034 	.word	0x20000034

08000440 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR.PR & (1 << EXTI10)) {EXTI->PR.PR |= (1<<EXTI10);  GP_IRQCallBack[EXTI10]();}
 8000444:	4b30      	ldr	r3, [pc, #192]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800044c:	2b00      	cmp	r3, #0
 800044e:	d009      	beq.n	8000464 <EXTI15_10_IRQHandler+0x24>
 8000450:	4b2d      	ldr	r3, [pc, #180]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a2c      	ldr	r2, [pc, #176]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b2b      	ldr	r3, [pc, #172]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 800045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000460:	4798      	blx	r3
	else if (EXTI->PR.PR & (1 << EXTI12)) {EXTI->PR.PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
	else if (EXTI->PR.PR & (1 << EXTI13)) {EXTI->PR.PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
	else if (EXTI->PR.PR & (1 << EXTI14)) {EXTI->PR.PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
	else if (EXTI->PR.PR & (1 << EXTI15)) {EXTI->PR.PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
	else{ /* Misra */ }
}
 8000462:	e04e      	b.n	8000502 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI11)) {EXTI->PR.PR |= (1<<EXTI11);  GP_IRQCallBack[EXTI11]();}
 8000464:	4b28      	ldr	r3, [pc, #160]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046c:	2b00      	cmp	r3, #0
 800046e:	d009      	beq.n	8000484 <EXTI15_10_IRQHandler+0x44>
 8000470:	4b25      	ldr	r3, [pc, #148]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a24      	ldr	r2, [pc, #144]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000476:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800047a:	6153      	str	r3, [r2, #20]
 800047c:	4b23      	ldr	r3, [pc, #140]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 800047e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000480:	4798      	blx	r3
}
 8000482:	e03e      	b.n	8000502 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI12)) {EXTI->PR.PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
 8000484:	4b20      	ldr	r3, [pc, #128]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d009      	beq.n	80004a4 <EXTI15_10_IRQHandler+0x64>
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 8000496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4798      	blx	r3
}
 80004a2:	e02e      	b.n	8000502 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI13)) {EXTI->PR.PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d009      	beq.n	80004c4 <EXTI15_10_IRQHandler+0x84>
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 80004be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004c0:	4798      	blx	r3
}
 80004c2:	e01e      	b.n	8000502 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI14)) {EXTI->PR.PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d009      	beq.n	80004e4 <EXTI15_10_IRQHandler+0xa4>
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004da:	6153      	str	r3, [r2, #20]
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 80004de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004e0:	4798      	blx	r3
}
 80004e2:	e00e      	b.n	8000502 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI15)) {EXTI->PR.PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d008      	beq.n	8000502 <EXTI15_10_IRQHandler+0xc2>
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <EXTI15_10_IRQHandler+0xc8>)
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004fa:	6153      	str	r3, [r2, #20]
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <EXTI15_10_IRQHandler+0xcc>)
 80004fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000500:	4798      	blx	r3
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010400 	.word	0x40010400
 800050c:	20000034 	.word	0x20000034

08000510 <ConfigurationPin>:

/*******************************************************************************
                      APIs Supported by "MCAL GPIO DRIVER"
 *******************************************************************************/
void ConfigurationPin(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig , uint8_t Configuration , uint8_t PinModeMask)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	4611      	mov	r1, r2
 800051c:	461a      	mov	r2, r3
 800051e:	460b      	mov	r3, r1
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	4613      	mov	r3, r2
 8000524:	71bb      	strb	r3, [r7, #6]
	if(Configuration == LOW)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	f040 80bb 	bne.w	80006a4 <ConfigurationPin+0x194>
	{
		switch(PinConfig->GPIO_PinNumber)
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2b08      	cmp	r3, #8
 8000534:	d051      	beq.n	80005da <ConfigurationPin+0xca>
 8000536:	2b08      	cmp	r3, #8
 8000538:	dc06      	bgt.n	8000548 <ConfigurationPin+0x38>
 800053a:	2b02      	cmp	r3, #2
 800053c:	d025      	beq.n	800058a <ConfigurationPin+0x7a>
 800053e:	2b04      	cmp	r3, #4
 8000540:	d037      	beq.n	80005b2 <ConfigurationPin+0xa2>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d00d      	beq.n	8000562 <ConfigurationPin+0x52>
			GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
			break;
		}
	}

}
 8000546:	e171      	b.n	800082c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000548:	2b20      	cmp	r3, #32
 800054a:	d06e      	beq.n	800062a <ConfigurationPin+0x11a>
 800054c:	2b20      	cmp	r3, #32
 800054e:	dc02      	bgt.n	8000556 <ConfigurationPin+0x46>
 8000550:	2b10      	cmp	r3, #16
 8000552:	d056      	beq.n	8000602 <ConfigurationPin+0xf2>
}
 8000554:	e16a      	b.n	800082c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000556:	2b40      	cmp	r3, #64	; 0x40
 8000558:	d07b      	beq.n	8000652 <ConfigurationPin+0x142>
 800055a:	2b80      	cmp	r3, #128	; 0x80
 800055c:	f000 808d 	beq.w	800067a <ConfigurationPin+0x16a>
}
 8000560:	e164      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF0 = PinModeMask;
 8000562:	79bb      	ldrb	r3, [r7, #6]
 8000564:	f003 0303 	and.w	r3, r3, #3
 8000568:	b2d9      	uxtb	r1, r3
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	6813      	ldr	r3, [r2, #0]
 800056e:	f361 0383 	bfi	r3, r1, #2, #2
 8000572:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE0 = PinConfig->GPIO_OUTPUT_SPEED;
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	78db      	ldrb	r3, [r3, #3]
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	b2d9      	uxtb	r1, r3
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	6813      	ldr	r3, [r2, #0]
 8000582:	f361 0301 	bfi	r3, r1, #0, #2
 8000586:	6013      	str	r3, [r2, #0]
			break;
 8000588:	e150      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF1 = PinModeMask;
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	f003 0303 	and.w	r3, r3, #3
 8000590:	b2d9      	uxtb	r1, r3
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	6813      	ldr	r3, [r2, #0]
 8000596:	f361 1387 	bfi	r3, r1, #6, #2
 800059a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE1 = PinConfig->GPIO_OUTPUT_SPEED;
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	78db      	ldrb	r3, [r3, #3]
 80005a0:	f003 0303 	and.w	r3, r3, #3
 80005a4:	b2d9      	uxtb	r1, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	6813      	ldr	r3, [r2, #0]
 80005aa:	f361 1305 	bfi	r3, r1, #4, #2
 80005ae:	6013      	str	r3, [r2, #0]
			break;
 80005b0:	e13c      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF2 = PinModeMask;
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	f003 0303 	and.w	r3, r3, #3
 80005b8:	b2d9      	uxtb	r1, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	6813      	ldr	r3, [r2, #0]
 80005be:	f361 238b 	bfi	r3, r1, #10, #2
 80005c2:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE2 = PinConfig->GPIO_OUTPUT_SPEED;
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	b2d9      	uxtb	r1, r3
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	6813      	ldr	r3, [r2, #0]
 80005d2:	f361 2309 	bfi	r3, r1, #8, #2
 80005d6:	6013      	str	r3, [r2, #0]
			break;
 80005d8:	e128      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF3 = PinModeMask;
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	f003 0303 	and.w	r3, r3, #3
 80005e0:	b2d9      	uxtb	r1, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	6813      	ldr	r3, [r2, #0]
 80005e6:	f361 338f 	bfi	r3, r1, #14, #2
 80005ea:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE3 = PinConfig->GPIO_OUTPUT_SPEED;
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	78db      	ldrb	r3, [r3, #3]
 80005f0:	f003 0303 	and.w	r3, r3, #3
 80005f4:	b2d9      	uxtb	r1, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	6813      	ldr	r3, [r2, #0]
 80005fa:	f361 330d 	bfi	r3, r1, #12, #2
 80005fe:	6013      	str	r3, [r2, #0]
			break;
 8000600:	e114      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF4 = PinModeMask;
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	b2d9      	uxtb	r1, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	6813      	ldr	r3, [r2, #0]
 800060e:	f361 4393 	bfi	r3, r1, #18, #2
 8000612:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE4 = PinConfig->GPIO_OUTPUT_SPEED;
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	b2d9      	uxtb	r1, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	6813      	ldr	r3, [r2, #0]
 8000622:	f361 4311 	bfi	r3, r1, #16, #2
 8000626:	6013      	str	r3, [r2, #0]
			break;
 8000628:	e100      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF5 = PinModeMask;
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	f003 0303 	and.w	r3, r3, #3
 8000630:	b2d9      	uxtb	r1, r3
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	6813      	ldr	r3, [r2, #0]
 8000636:	f361 5397 	bfi	r3, r1, #22, #2
 800063a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE5 = PinConfig->GPIO_OUTPUT_SPEED;
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	78db      	ldrb	r3, [r3, #3]
 8000640:	f003 0303 	and.w	r3, r3, #3
 8000644:	b2d9      	uxtb	r1, r3
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	6813      	ldr	r3, [r2, #0]
 800064a:	f361 5315 	bfi	r3, r1, #20, #2
 800064e:	6013      	str	r3, [r2, #0]
			break;
 8000650:	e0ec      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF6 = PinModeMask;
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	f003 0303 	and.w	r3, r3, #3
 8000658:	b2d9      	uxtb	r1, r3
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	6813      	ldr	r3, [r2, #0]
 800065e:	f361 639b 	bfi	r3, r1, #26, #2
 8000662:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE6 = PinConfig->GPIO_OUTPUT_SPEED;
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	b2d9      	uxtb	r1, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	6813      	ldr	r3, [r2, #0]
 8000672:	f361 6319 	bfi	r3, r1, #24, #2
 8000676:	6013      	str	r3, [r2, #0]
			break;
 8000678:	e0d8      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF7 = PinModeMask;
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	f003 0303 	and.w	r3, r3, #3
 8000680:	b2d9      	uxtb	r1, r3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	6813      	ldr	r3, [r2, #0]
 8000686:	f361 739f 	bfi	r3, r1, #30, #2
 800068a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE7 = PinConfig->GPIO_OUTPUT_SPEED;
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	f003 0303 	and.w	r3, r3, #3
 8000694:	b2d9      	uxtb	r1, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	6813      	ldr	r3, [r2, #0]
 800069a:	f361 731d 	bfi	r3, r1, #28, #2
 800069e:	6013      	str	r3, [r2, #0]
			break;
 80006a0:	bf00      	nop
 80006a2:	e0c3      	b.n	800082c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ac:	d05a      	beq.n	8000764 <ConfigurationPin+0x254>
 80006ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006b2:	dc09      	bgt.n	80006c8 <ConfigurationPin+0x1b8>
 80006b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006b8:	d02c      	beq.n	8000714 <ConfigurationPin+0x204>
 80006ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006be:	d03d      	beq.n	800073c <ConfigurationPin+0x22c>
 80006c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c4:	d012      	beq.n	80006ec <ConfigurationPin+0x1dc>
}
 80006c6:	e0b1      	b.n	800082c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 80006c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006cc:	d072      	beq.n	80007b4 <ConfigurationPin+0x2a4>
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d2:	dc03      	bgt.n	80006dc <ConfigurationPin+0x1cc>
 80006d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006d8:	d058      	beq.n	800078c <ConfigurationPin+0x27c>
}
 80006da:	e0a7      	b.n	800082c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 80006dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006e0:	d07c      	beq.n	80007dc <ConfigurationPin+0x2cc>
 80006e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006e6:	f000 808d 	beq.w	8000804 <ConfigurationPin+0x2f4>
}
 80006ea:	e09f      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF8 = PinModeMask;
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	b2d9      	uxtb	r1, r3
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	6853      	ldr	r3, [r2, #4]
 80006f8:	f361 0383 	bfi	r3, r1, #2, #2
 80006fc:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE8 = PinConfig->GPIO_OUTPUT_SPEED;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	78db      	ldrb	r3, [r3, #3]
 8000702:	f003 0303 	and.w	r3, r3, #3
 8000706:	b2d9      	uxtb	r1, r3
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	6853      	ldr	r3, [r2, #4]
 800070c:	f361 0301 	bfi	r3, r1, #0, #2
 8000710:	6053      	str	r3, [r2, #4]
			break;
 8000712:	e08b      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF9 = PinModeMask;
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	f003 0303 	and.w	r3, r3, #3
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	6853      	ldr	r3, [r2, #4]
 8000720:	f361 1387 	bfi	r3, r1, #6, #2
 8000724:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE9 = PinConfig->GPIO_OUTPUT_SPEED;
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	f003 0303 	and.w	r3, r3, #3
 800072e:	b2d9      	uxtb	r1, r3
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	6853      	ldr	r3, [r2, #4]
 8000734:	f361 1305 	bfi	r3, r1, #4, #2
 8000738:	6053      	str	r3, [r2, #4]
			break;
 800073a:	e077      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF10 = PinModeMask;
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	f003 0303 	and.w	r3, r3, #3
 8000742:	b2d9      	uxtb	r1, r3
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	6853      	ldr	r3, [r2, #4]
 8000748:	f361 238b 	bfi	r3, r1, #10, #2
 800074c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE10 = PinConfig->GPIO_OUTPUT_SPEED;
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	f003 0303 	and.w	r3, r3, #3
 8000756:	b2d9      	uxtb	r1, r3
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	6853      	ldr	r3, [r2, #4]
 800075c:	f361 2309 	bfi	r3, r1, #8, #2
 8000760:	6053      	str	r3, [r2, #4]
			break;
 8000762:	e063      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF11 = PinModeMask;
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	b2d9      	uxtb	r1, r3
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	6853      	ldr	r3, [r2, #4]
 8000770:	f361 338f 	bfi	r3, r1, #14, #2
 8000774:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE11 = PinConfig->GPIO_OUTPUT_SPEED;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	78db      	ldrb	r3, [r3, #3]
 800077a:	f003 0303 	and.w	r3, r3, #3
 800077e:	b2d9      	uxtb	r1, r3
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	6853      	ldr	r3, [r2, #4]
 8000784:	f361 330d 	bfi	r3, r1, #12, #2
 8000788:	6053      	str	r3, [r2, #4]
			break;
 800078a:	e04f      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF12 = PinModeMask;
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	b2d9      	uxtb	r1, r3
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	6853      	ldr	r3, [r2, #4]
 8000798:	f361 4393 	bfi	r3, r1, #18, #2
 800079c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE12 = PinConfig->GPIO_OUTPUT_SPEED;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	78db      	ldrb	r3, [r3, #3]
 80007a2:	f003 0303 	and.w	r3, r3, #3
 80007a6:	b2d9      	uxtb	r1, r3
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	6853      	ldr	r3, [r2, #4]
 80007ac:	f361 4311 	bfi	r3, r1, #16, #2
 80007b0:	6053      	str	r3, [r2, #4]
			break;
 80007b2:	e03b      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF13 = PinModeMask;
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	f003 0303 	and.w	r3, r3, #3
 80007ba:	b2d9      	uxtb	r1, r3
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	6853      	ldr	r3, [r2, #4]
 80007c0:	f361 5397 	bfi	r3, r1, #22, #2
 80007c4:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE13 = PinConfig->GPIO_OUTPUT_SPEED;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	78db      	ldrb	r3, [r3, #3]
 80007ca:	f003 0303 	and.w	r3, r3, #3
 80007ce:	b2d9      	uxtb	r1, r3
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	6853      	ldr	r3, [r2, #4]
 80007d4:	f361 5315 	bfi	r3, r1, #20, #2
 80007d8:	6053      	str	r3, [r2, #4]
			break;
 80007da:	e027      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF14 = PinModeMask;
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	b2d9      	uxtb	r1, r3
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	6853      	ldr	r3, [r2, #4]
 80007e8:	f361 639b 	bfi	r3, r1, #26, #2
 80007ec:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE14 = PinConfig->GPIO_OUTPUT_SPEED;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	78db      	ldrb	r3, [r3, #3]
 80007f2:	f003 0303 	and.w	r3, r3, #3
 80007f6:	b2d9      	uxtb	r1, r3
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	6853      	ldr	r3, [r2, #4]
 80007fc:	f361 6319 	bfi	r3, r1, #24, #2
 8000800:	6053      	str	r3, [r2, #4]
			break;
 8000802:	e013      	b.n	800082c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF15 = PinModeMask;
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	b2d9      	uxtb	r1, r3
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	6853      	ldr	r3, [r2, #4]
 8000810:	f361 739f 	bfi	r3, r1, #30, #2
 8000814:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	78db      	ldrb	r3, [r3, #3]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	b2d9      	uxtb	r1, r3
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	6853      	ldr	r3, [r2, #4]
 8000824:	f361 731d 	bfi	r3, r1, #28, #2
 8000828:	6053      	str	r3, [r2, #4]
			break;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	3714      	adds	r7, #20
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
	...

08000838 <MCAL_GPIO_Init>:
 * Note              -STM32F103C6 MCU has GPIO A,B,C,D and E Modules but LQFP4
 *                    package has only GPIO A,B and part of C AND D exported as
 *                    external PINs from the MCU.
 */
void MCAL_GPIO_Init(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) (x=A..G) configure pin 0..7
	// Port configuration register high (GPIOx_CRH) (x=A..G) configure pin 8..15
	volatile uint8_t Configuration = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? LOW : HIGH;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	2bff      	cmp	r3, #255	; 0xff
 8000848:	bf8c      	ite	hi
 800084a:	2301      	movhi	r3, #1
 800084c:	2300      	movls	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	73fb      	strb	r3, [r7, #15]

	switch(PinConfig->GPIO_MODE)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	2b08      	cmp	r3, #8
 8000858:	d863      	bhi.n	8000922 <MCAL_GPIO_Init+0xea>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <MCAL_GPIO_Init+0x28>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	08000885 	.word	0x08000885
 8000864:	08000895 	.word	0x08000895
 8000868:	080008a5 	.word	0x080008a5
 800086c:	080008c3 	.word	0x080008c3
 8000870:	080008d3 	.word	0x080008d3
 8000874:	080008e3 	.word	0x080008e3
 8000878:	080008f3 	.word	0x080008f3
 800087c:	08000903 	.word	0x08000903
 8000880:	08000913 	.word	0x08000913
	{
	case GPIO_MODE_ANALOG :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_ANALOG_MASK );
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	2300      	movs	r3, #0
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe3f 	bl	8000510 <ConfigurationPin>
		break;
 8000892:	e046      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_FLO :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_FLO_MASK );
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	2301      	movs	r3, #1
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe37 	bl	8000510 <ConfigurationPin>
		break;
 80008a2:	e03e      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_PU :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_PU_MASK );
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	2302      	movs	r3, #2
 80008aa:	6839      	ldr	r1, [r7, #0]
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff fe2f 	bl	8000510 <ConfigurationPin>
		//Input pull-up Table 20. Port bit configuration table
		GPIOx->ODR.ODR |= PinConfig->GPIO_PinNumber;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	8812      	ldrh	r2, [r2, #0]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	60da      	str	r2, [r3, #12]
		break;
 80008c0:	e02f      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_PD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_PD_MASK );
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	2302      	movs	r3, #2
 80008c8:	6839      	ldr	r1, [r7, #0]
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fe20 	bl	8000510 <ConfigurationPin>
		break;
 80008d0:	e027      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_pp :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_pp_MASK );
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	2300      	movs	r3, #0
 80008d8:	6839      	ldr	r1, [r7, #0]
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fe18 	bl	8000510 <ConfigurationPin>
		break;
 80008e0:	e01f      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_OD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_OD_MASK );
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	2301      	movs	r3, #1
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fe10 	bl	8000510 <ConfigurationPin>
		break;
 80008f0:	e017      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_AF_PP :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_AF_PP_MASK );
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	2302      	movs	r3, #2
 80008f8:	6839      	ldr	r1, [r7, #0]
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff fe08 	bl	8000510 <ConfigurationPin>
		break;
 8000900:	e00f      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_AF_OD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_AF_OD_MASK );
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	2303      	movs	r3, #3
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe00 	bl	8000510 <ConfigurationPin>
		break;
 8000910:	e007      	b.n	8000922 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Iuput_AF :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Iuput_AF_MASK );
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	b2da      	uxtb	r2, r3
 8000916:	2301      	movs	r3, #1
 8000918:	6839      	ldr	r1, [r7, #0]
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fdf8 	bl	8000510 <ConfigurationPin>
		break;
 8000920:	bf00      	nop
	}

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop

0800092c <MCAL_GPIO_WritePin>:
 * Retval            -None.
 *
 * Note              -None.
 */
void MCAL_GPIO_WritePin (GPIO_t* GPIOx , uint16_t PinNumber , uint8_t Value)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
 8000938:	4613      	mov	r3, r2
 800093a:	707b      	strb	r3, [r7, #1]
	/******** 1 - Using GPIOx->ODR to write on it ********/
	// 1st method : writing on PIN directly
	switch(PinNumber)
 800093c:	887b      	ldrh	r3, [r7, #2]
 800093e:	2b80      	cmp	r3, #128	; 0x80
 8000940:	d07f      	beq.n	8000a42 <MCAL_GPIO_WritePin+0x116>
 8000942:	2b80      	cmp	r3, #128	; 0x80
 8000944:	dc11      	bgt.n	800096a <MCAL_GPIO_WritePin+0x3e>
 8000946:	2b08      	cmp	r3, #8
 8000948:	d053      	beq.n	80009f2 <MCAL_GPIO_WritePin+0xc6>
 800094a:	2b08      	cmp	r3, #8
 800094c:	dc06      	bgt.n	800095c <MCAL_GPIO_WritePin+0x30>
 800094e:	2b02      	cmp	r3, #2
 8000950:	d03b      	beq.n	80009ca <MCAL_GPIO_WritePin+0x9e>
 8000952:	2b04      	cmp	r3, #4
 8000954:	d043      	beq.n	80009de <MCAL_GPIO_WritePin+0xb2>
 8000956:	2b01      	cmp	r3, #1
 8000958:	d02d      	beq.n	80009b6 <MCAL_GPIO_WritePin+0x8a>
	/******** 2 - Using GPIOx->BSRR to write on it ********/
	/*if (Value == HIGH)
		GPIOx->BSRR.BS = (uint16_t)PinNumber;
	else
		GPIOx->BSRR.BR = (uint16_t)PinNumber;*/
}
 800095a:	e0cc      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
	switch(PinNumber)
 800095c:	2b20      	cmp	r3, #32
 800095e:	d05c      	beq.n	8000a1a <MCAL_GPIO_WritePin+0xee>
 8000960:	2b40      	cmp	r3, #64	; 0x40
 8000962:	d064      	beq.n	8000a2e <MCAL_GPIO_WritePin+0x102>
 8000964:	2b10      	cmp	r3, #16
 8000966:	d04e      	beq.n	8000a06 <MCAL_GPIO_WritePin+0xda>
}
 8000968:	e0c5      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
	switch(PinNumber)
 800096a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800096e:	f000 8090 	beq.w	8000a92 <MCAL_GPIO_WritePin+0x166>
 8000972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000976:	dc09      	bgt.n	800098c <MCAL_GPIO_WritePin+0x60>
 8000978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800097c:	d075      	beq.n	8000a6a <MCAL_GPIO_WritePin+0x13e>
 800097e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000982:	d07c      	beq.n	8000a7e <MCAL_GPIO_WritePin+0x152>
 8000984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000988:	d065      	beq.n	8000a56 <MCAL_GPIO_WritePin+0x12a>
}
 800098a:	e0b4      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
	switch(PinNumber)
 800098c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000990:	f000 8093 	beq.w	8000aba <MCAL_GPIO_WritePin+0x18e>
 8000994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000998:	dc04      	bgt.n	80009a4 <MCAL_GPIO_WritePin+0x78>
 800099a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800099e:	f000 8082 	beq.w	8000aa6 <MCAL_GPIO_WritePin+0x17a>
}
 80009a2:	e0a8      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
	switch(PinNumber)
 80009a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009a8:	f000 8091 	beq.w	8000ace <MCAL_GPIO_WritePin+0x1a2>
 80009ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009b0:	f000 8097 	beq.w	8000ae2 <MCAL_GPIO_WritePin+0x1b6>
}
 80009b4:	e09f      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_0) = Value;
 80009b6:	787b      	ldrb	r3, [r7, #1]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2d9      	uxtb	r1, r3
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68d3      	ldr	r3, [r2, #12]
 80009c2:	f361 0300 	bfi	r3, r1, #0, #1
 80009c6:	60d3      	str	r3, [r2, #12]
		break;
 80009c8:	e095      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_1) = Value;
 80009ca:	787b      	ldrb	r3, [r7, #1]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	b2d9      	uxtb	r1, r3
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68d3      	ldr	r3, [r2, #12]
 80009d6:	f361 0341 	bfi	r3, r1, #1, #1
 80009da:	60d3      	str	r3, [r2, #12]
		break;
 80009dc:	e08b      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_2) = Value;
 80009de:	787b      	ldrb	r3, [r7, #1]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	b2d9      	uxtb	r1, r3
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68d3      	ldr	r3, [r2, #12]
 80009ea:	f361 0382 	bfi	r3, r1, #2, #1
 80009ee:	60d3      	str	r3, [r2, #12]
		break;
 80009f0:	e081      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_3) = Value;
 80009f2:	787b      	ldrb	r3, [r7, #1]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	b2d9      	uxtb	r1, r3
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68d3      	ldr	r3, [r2, #12]
 80009fe:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a02:	60d3      	str	r3, [r2, #12]
		break;
 8000a04:	e077      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_4) = Value;
 8000a06:	787b      	ldrb	r3, [r7, #1]
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	b2d9      	uxtb	r1, r3
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68d3      	ldr	r3, [r2, #12]
 8000a12:	f361 1304 	bfi	r3, r1, #4, #1
 8000a16:	60d3      	str	r3, [r2, #12]
		break;
 8000a18:	e06d      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_5) = Value;
 8000a1a:	787b      	ldrb	r3, [r7, #1]
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	b2d9      	uxtb	r1, r3
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	68d3      	ldr	r3, [r2, #12]
 8000a26:	f361 1345 	bfi	r3, r1, #5, #1
 8000a2a:	60d3      	str	r3, [r2, #12]
		break;
 8000a2c:	e063      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_6) = Value;
 8000a2e:	787b      	ldrb	r3, [r7, #1]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	b2d9      	uxtb	r1, r3
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68d3      	ldr	r3, [r2, #12]
 8000a3a:	f361 1386 	bfi	r3, r1, #6, #1
 8000a3e:	60d3      	str	r3, [r2, #12]
		break;
 8000a40:	e059      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_7) = Value;
 8000a42:	787b      	ldrb	r3, [r7, #1]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	b2d9      	uxtb	r1, r3
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	68d3      	ldr	r3, [r2, #12]
 8000a4e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a52:	60d3      	str	r3, [r2, #12]
		break;
 8000a54:	e04f      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_8) = Value;
 8000a56:	787b      	ldrb	r3, [r7, #1]
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	b2d9      	uxtb	r1, r3
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68d3      	ldr	r3, [r2, #12]
 8000a62:	f361 2308 	bfi	r3, r1, #8, #1
 8000a66:	60d3      	str	r3, [r2, #12]
		break;
 8000a68:	e045      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_9) = Value;
 8000a6a:	787b      	ldrb	r3, [r7, #1]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	b2d9      	uxtb	r1, r3
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	68d3      	ldr	r3, [r2, #12]
 8000a76:	f361 2349 	bfi	r3, r1, #9, #1
 8000a7a:	60d3      	str	r3, [r2, #12]
		break;
 8000a7c:	e03b      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_10) = Value;
 8000a7e:	787b      	ldrb	r3, [r7, #1]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	b2d9      	uxtb	r1, r3
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68d3      	ldr	r3, [r2, #12]
 8000a8a:	f361 238a 	bfi	r3, r1, #10, #1
 8000a8e:	60d3      	str	r3, [r2, #12]
		break;
 8000a90:	e031      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_11) = Value;
 8000a92:	787b      	ldrb	r3, [r7, #1]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	b2d9      	uxtb	r1, r3
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68d3      	ldr	r3, [r2, #12]
 8000a9e:	f361 23cb 	bfi	r3, r1, #11, #1
 8000aa2:	60d3      	str	r3, [r2, #12]
		break;
 8000aa4:	e027      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_12) = Value;
 8000aa6:	787b      	ldrb	r3, [r7, #1]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	b2d9      	uxtb	r1, r3
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	68d3      	ldr	r3, [r2, #12]
 8000ab2:	f361 330c 	bfi	r3, r1, #12, #1
 8000ab6:	60d3      	str	r3, [r2, #12]
		break;
 8000ab8:	e01d      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_13) = Value;
 8000aba:	787b      	ldrb	r3, [r7, #1]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	b2d9      	uxtb	r1, r3
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	68d3      	ldr	r3, [r2, #12]
 8000ac6:	f361 334d 	bfi	r3, r1, #13, #1
 8000aca:	60d3      	str	r3, [r2, #12]
		break;
 8000acc:	e013      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_14) = Value;
 8000ace:	787b      	ldrb	r3, [r7, #1]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	b2d9      	uxtb	r1, r3
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68d3      	ldr	r3, [r2, #12]
 8000ada:	f361 338e 	bfi	r3, r1, #14, #1
 8000ade:	60d3      	str	r3, [r2, #12]
		break;
 8000ae0:	e009      	b.n	8000af6 <MCAL_GPIO_WritePin+0x1ca>
		(GPIOx->ODR.PIN_15) = Value;
 8000ae2:	787b      	ldrb	r3, [r7, #1]
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b2d9      	uxtb	r1, r3
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68d3      	ldr	r3, [r2, #12]
 8000aee:	f361 33cf 	bfi	r3, r1, #15, #1
 8000af2:	60d3      	str	r3, [r2, #12]
		break;
 8000af4:	bf00      	nop
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <MCAL_RCC_GPIO_EN>:

/*******************************************************************************
                     APIs Supported by "MCAL RCC DRIVER"
*******************************************************************************/
void MCAL_RCC_GPIO_EN(GPIO_t* GPIOx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	if (GPIOx == GPIOA)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MCAL_RCC_GPIO_EN+0x60>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d105      	bne.n	8000b1c <MCAL_RCC_GPIO_EN+0x1c>
		RCC->APB2ENR.IOPAEN = TRUE;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <MCAL_RCC_GPIO_EN+0x64>)
 8000b12:	6993      	ldr	r3, [r2, #24]
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6193      	str	r3, [r2, #24]
	else if (GPIOx == GPIOC)
		RCC->APB2ENR.IOPCEN = TRUE;
	else if (GPIOx == GPIOD)
		RCC->APB2ENR.IOPDEN = TRUE;
	else  { /* Misra */ }
}
 8000b1a:	e01c      	b.n	8000b56 <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOB)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MCAL_RCC_GPIO_EN+0x68>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d105      	bne.n	8000b30 <MCAL_RCC_GPIO_EN+0x30>
		RCC->APB2ENR.IOPBEN = TRUE;
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <MCAL_RCC_GPIO_EN+0x64>)
 8000b26:	6993      	ldr	r3, [r2, #24]
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6193      	str	r3, [r2, #24]
}
 8000b2e:	e012      	b.n	8000b56 <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOC)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <MCAL_RCC_GPIO_EN+0x6c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d105      	bne.n	8000b44 <MCAL_RCC_GPIO_EN+0x44>
		RCC->APB2ENR.IOPCEN = TRUE;
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <MCAL_RCC_GPIO_EN+0x64>)
 8000b3a:	6993      	ldr	r3, [r2, #24]
 8000b3c:	f043 0310 	orr.w	r3, r3, #16
 8000b40:	6193      	str	r3, [r2, #24]
}
 8000b42:	e008      	b.n	8000b56 <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOD)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <MCAL_RCC_GPIO_EN+0x70>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d104      	bne.n	8000b56 <MCAL_RCC_GPIO_EN+0x56>
		RCC->APB2ENR.IOPDEN = TRUE;
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <MCAL_RCC_GPIO_EN+0x64>)
 8000b4e:	6993      	ldr	r3, [r2, #24]
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6193      	str	r3, [r2, #24]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40010800 	.word	0x40010800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40011400 	.word	0x40011400

08000b74 <MCAL_RCC_AFIO_EN>:

void MCAL_RCC_AFIO_EN()
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	RCC->APB2ENR.AFIOEN = TRUE;
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <MCAL_RCC_AFIO_EN+0x18>)
 8000b7a:	6993      	ldr	r3, [r2, #24]
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MCAL_RCC_GetSYS_CLKFreq>:

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	// Get System clock switch status (SWS)
	switch(RCC->CFGR.SWS){
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d005      	beq.n	8000bae <MCAL_RCC_GetSYS_CLKFreq+0x1e>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d005      	beq.n	8000bb2 <MCAL_RCC_GetSYS_CLKFreq+0x22>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d105      	bne.n	8000bb6 <MCAL_RCC_GetSYS_CLKFreq+0x26>
		case 0:return HSI_RC_CLK;   //HSI oscillator used as system clock
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000bac:	e004      	b.n	8000bb8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		case 1:return HSE_CLK;      //HSE oscillator used as system clock
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000bb0:	e002      	b.n	8000bb8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //HSE user should specify it
		case 2:return 16000000;     //PLL used as system clock
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000bb4:	e000      	b.n	8000bb8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //PLLCLK and PLLMULL and PLL Source MUX
	}
	return ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	007a1200 	.word	0x007a1200
 8000bc8:	00f42400 	.word	0x00f42400

08000bcc <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	// Get AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> RCC->CFGR.HPRE);
 8000bd0:	f7ff ffde 	bl	8000b90 <MCAL_RCC_GetSYS_CLKFreq>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <MCAL_RCC_GetHCLKFreq+0x1c>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000

08000bec <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	// Get APB1 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE1);
 8000bf0:	f7ff ffec 	bl	8000bcc <MCAL_RCC_GetHCLKFreq>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <MCAL_RCC_GetPCLK1Freq+0x1c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000

08000c0c <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	// Get APB2 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE2);
 8000c10:	f7ff ffdc 	bl	8000bcc <MCAL_RCC_GetHCLKFreq>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <MCAL_RCC_GetPCLK2Freq+0x1c>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000

08000c2c <MCAL_SPI_Init>:
* 					 NSS Hardware/Software.
* 					-You have to configure RCC to select clock for the
* 					 selected SPI Module.
*/
void MCAL_SPI_Init(SPI_t *SPIx, SPI_Config_t *SPI_Config)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	// 1. Enable the clock for given USART peripheral
	if      (SPIx == SPI1){ RCC->APB2ENR.SPI1EN = TRUE; Global_SPI_Config[SPI1_Index] = SPI_Config; }
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a7d      	ldr	r2, [pc, #500]	; (8000e30 <MCAL_SPI_Init+0x204>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d108      	bne.n	8000c50 <MCAL_SPI_Init+0x24>
 8000c3e:	4a7d      	ldr	r2, [pc, #500]	; (8000e34 <MCAL_SPI_Init+0x208>)
 8000c40:	6993      	ldr	r3, [r2, #24]
 8000c42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4a7b      	ldr	r2, [pc, #492]	; (8000e38 <MCAL_SPI_Init+0x20c>)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00b      	b.n	8000c68 <MCAL_SPI_Init+0x3c>
	else if (SPIx == SPI2){ RCC->APB1ENR.SPI2EN = TRUE; Global_SPI_Config[SPI2_Index] = SPI_Config; }
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a7a      	ldr	r2, [pc, #488]	; (8000e3c <MCAL_SPI_Init+0x210>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d107      	bne.n	8000c68 <MCAL_SPI_Init+0x3c>
 8000c58:	4a76      	ldr	r2, [pc, #472]	; (8000e34 <MCAL_SPI_Init+0x208>)
 8000c5a:	69d3      	ldr	r3, [r2, #28]
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c60:	61d3      	str	r3, [r2, #28]
 8000c62:	4a75      	ldr	r2, [pc, #468]	; (8000e38 <MCAL_SPI_Init+0x20c>)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	6053      	str	r3, [r2, #4]
	else                  { /*  Misra  */ }

	// 2. Enable SPI
	SPIx->CR1.SPE = TRUE;
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	6813      	ldr	r3, [r2, #0]
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	6013      	str	r3, [r2, #0]

	// 3. Set Master or Slave
	SPIx->CR1.MSTR = SPI_Config->SPI_Mode;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	b2d9      	uxtb	r1, r3
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f361 0382 	bfi	r3, r1, #2, #1
 8000c84:	6013      	str	r3, [r2, #0]

	// 4. Set Communication Mode
	switch (SPI_Config->Communication_Mode){
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d82c      	bhi.n	8000ce8 <MCAL_SPI_Init+0xbc>
 8000c8e:	a201      	add	r2, pc, #4	; (adr r2, 8000c94 <MCAL_SPI_Init+0x68>)
 8000c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c94:	08000ca5 	.word	0x08000ca5
 8000c98:	08000cbd 	.word	0x08000cbd
 8000c9c:	08000cd3 	.word	0x08000cd3
 8000ca0:	08000cb1 	.word	0x08000cb1
	case SPI_COMMUNICATION_MODE_2LINE_FULL_DUPLEX: SPIx->CR1.BIDIMODE = FALSE; break;
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	6813      	ldr	r3, [r2, #0]
 8000ca8:	f36f 33cf 	bfc	r3, #15, #1
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e01b      	b.n	8000ce8 <MCAL_SPI_Init+0xbc>
	case SPI_COMMUNICATION_MODE_2LINE_RXE_ONLY:    SPIx->CR1.RXONLY   = FALSE; break;
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6813      	ldr	r3, [r2, #0]
 8000cb4:	f36f 238a 	bfc	r3, #10, #1
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e015      	b.n	8000ce8 <MCAL_SPI_Init+0xbc>
	case SPI_COMMUNICATION_MODE_1LINE_RX_ONLY:
		SPIx->CR1.BIDIMODE = TRUE ;
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc4:	6013      	str	r3, [r2, #0]
		SPIx->CR1.BIDIOE   = FALSE;
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	6813      	ldr	r3, [r2, #0]
 8000cca:	f36f 338e 	bfc	r3, #14, #1
 8000cce:	6013      	str	r3, [r2, #0]
		break;
 8000cd0:	e00a      	b.n	8000ce8 <MCAL_SPI_Init+0xbc>
	case SPI_COMMUNICATION_MODE_1LINE_TX_ONLY:
		SPIx->CR1.BIDIMODE = TRUE;
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cda:	6013      	str	r3, [r2, #0]
		SPIx->CR1.BIDIOE   = TRUE;
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6813      	ldr	r3, [r2, #0]
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6013      	str	r3, [r2, #0]
		break;
 8000ce6:	bf00      	nop
	}

	// 5. Set Frame Format
	SPIx->CR1.LSBFIRST = SPI_Config->Frame_Format;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	789b      	ldrb	r3, [r3, #2]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	f361 13c7 	bfi	r3, r1, #7, #1
 8000cfa:	6013      	str	r3, [r2, #0]

	// 6. Set Data size
	SPIx->CR1.DFF = SPI_Config->Frame_Size;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	78db      	ldrb	r3, [r3, #3]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	b2d9      	uxtb	r1, r3
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6813      	ldr	r3, [r2, #0]
 8000d0a:	f361 23cb 	bfi	r3, r1, #11, #1
 8000d0e:	6013      	str	r3, [r2, #0]

	// 7. Set Clock Polarity
	SPIx->CR1.CPOL = SPI_Config->CLK_Polarity;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	791b      	ldrb	r3, [r3, #4]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2d9      	uxtb	r1, r3
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	f361 0341 	bfi	r3, r1, #1, #1
 8000d22:	6013      	str	r3, [r2, #0]

	// 8. Set Clock Phase
	SPIx->CR1.CPHA = SPI_Config->CLK_Phase;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	795b      	ldrb	r3, [r3, #5]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	b2d9      	uxtb	r1, r3
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	f361 0300 	bfi	r3, r1, #0, #1
 8000d36:	6013      	str	r3, [r2, #0]

	// 9. Set Slave Select Management
	if      (SPI_Config->NSS == SPI_NSS_HW_SLAVE)                       {SPIx->CR2.SSOE = FALSE;}
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	799b      	ldrb	r3, [r3, #6]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d105      	bne.n	8000d4c <MCAL_SPI_Init+0x120>
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	6853      	ldr	r3, [r2, #4]
 8000d44:	f36f 0382 	bfc	r3, #2, #1
 8000d48:	6053      	str	r3, [r2, #4]
 8000d4a:	e02b      	b.n	8000da4 <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLED)    {SPIx->CR2.SSOE = TRUE; }
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	799b      	ldrb	r3, [r3, #6]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d105      	bne.n	8000d60 <MCAL_SPI_Init+0x134>
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	6853      	ldr	r3, [r2, #4]
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6053      	str	r3, [r2, #4]
 8000d5e:	e021      	b.n	8000da4 <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLED)   {SPIx->CR2.SSOE = FALSE;}
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	799b      	ldrb	r3, [r3, #6]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d105      	bne.n	8000d74 <MCAL_SPI_Init+0x148>
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6853      	ldr	r3, [r2, #4]
 8000d6c:	f36f 0382 	bfc	r3, #2, #1
 8000d70:	6053      	str	r3, [r2, #4]
 8000d72:	e017      	b.n	8000da4 <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_SW_SSI_RESET)                   {SPIx->CR1.SSM  = TRUE; }
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	799b      	ldrb	r3, [r3, #6]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d105      	bne.n	8000d88 <MCAL_SPI_Init+0x15c>
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6813      	ldr	r3, [r2, #0]
 8000d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e00d      	b.n	8000da4 <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_SW_SSI_SET){SPIx->CR1.SSM  = TRUE; SPIx->CR1.SSI = TRUE;}
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d109      	bne.n	8000da4 <MCAL_SPI_Init+0x178>
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
	else                                                                        { /*  Misra  */ }

	// 10. Set BoudRate Pre-scaler
	SPIx->CR1.BR = SPI_Config->BaudRate_Prescaler;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	79db      	ldrb	r3, [r3, #7]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	b2d9      	uxtb	r1, r3
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f361 03c5 	bfi	r3, r1, #3, #3
 8000db6:	6013      	str	r3, [r2, #0]

	// 11. Set Interrupt
	if (SPI_Config->IRQ_Enable != SPI_IRQ_ENABLE_NONE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	7a1b      	ldrb	r3, [r3, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d031      	beq.n	8000e24 <MCAL_SPI_Init+0x1f8>
	{
		if      (SPI_Config->IRQ_Enable == SPI_IRQ_ENABLE_TXEIE)  { SPIx->CR2.TXEIE  = TRUE; }
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	7a1b      	ldrb	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <MCAL_SPI_Init+0x1a8>
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6853      	ldr	r3, [r2, #4]
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	6053      	str	r3, [r2, #4]
 8000dd2:	e012      	b.n	8000dfa <MCAL_SPI_Init+0x1ce>
		else if (SPI_Config->IRQ_Enable == SPI_IRQ_ENABLE_ERRIE)  { SPIx->CR2.ERRIE  = TRUE; }
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	7a1b      	ldrb	r3, [r3, #8]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d105      	bne.n	8000de8 <MCAL_SPI_Init+0x1bc>
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6853      	ldr	r3, [r2, #4]
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6053      	str	r3, [r2, #4]
 8000de6:	e008      	b.n	8000dfa <MCAL_SPI_Init+0x1ce>
		else if (SPI_Config->IRQ_Enable == SPI_IRQ_ENABLE_RXNEIE) { SPIx->CR2.RXNEIE = TRUE; }
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	7a1b      	ldrb	r3, [r3, #8]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d104      	bne.n	8000dfa <MCAL_SPI_Init+0x1ce>
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6853      	ldr	r3, [r2, #4]
 8000df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000df8:	6053      	str	r3, [r2, #4]
		else                                                      { /*  Misra  */ }

		// 12. Open the global Interrupt for each peripheral
		if      (SPIx == SPI1){ NVIC_ISER->NVIC_ISER1 |= (1 << (SPI1_IRQ - 32)); }
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <MCAL_SPI_Init+0x204>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d106      	bne.n	8000e10 <MCAL_SPI_Init+0x1e4>
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MCAL_SPI_Init+0x214>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <MCAL_SPI_Init+0x214>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6053      	str	r3, [r2, #4]
		else if (SPIx == SPI2){ NVIC_ISER->NVIC_ISER1 |= (1 << (SPI2_IRQ - 32)); }
		else                  { /*  Misra  */ }

	}
	else { /*  Misra  */ }
}
 8000e0e:	e009      	b.n	8000e24 <MCAL_SPI_Init+0x1f8>
		else if (SPIx == SPI2){ NVIC_ISER->NVIC_ISER1 |= (1 << (SPI2_IRQ - 32)); }
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <MCAL_SPI_Init+0x210>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d105      	bne.n	8000e24 <MCAL_SPI_Init+0x1f8>
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MCAL_SPI_Init+0x214>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <MCAL_SPI_Init+0x214>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6053      	str	r3, [r2, #4]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	2000001c 	.word	0x2000001c
 8000e3c:	40003800 	.word	0x40003800
 8000e40:	e000e100 	.word	0xe000e100

08000e44 <MCAL_SPI_TX_RX>:
* Retval            -None.
*
* Note              -None.
*/
void MCAL_SPI_TX_RX(SPI_t *SPIx, uint16_t *P_TxBuffer, uint8_t Mechanism)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until TXE (Transmit data register empty)
	if (Mechanism == Polling_Mechanism) { while(!(SPIx->SR.TXE)); }
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d107      	bne.n	8000e68 <MCAL_SPI_TX_RX+0x24>
 8000e58:	bf00      	nop
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0f8      	beq.n	8000e5a <MCAL_SPI_TX_RX+0x16>
	else                                { /*  Misra  */ }

	// 2. Start transmission, Write data to SPI data register
	SPIx->DR.DR = *(P_TxBuffer);
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	8819      	ldrh	r1, [r3, #0]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	68d3      	ldr	r3, [r2, #12]
 8000e70:	f361 030f 	bfi	r3, r1, #0, #16
 8000e74:	60d3      	str	r3, [r2, #12]

	// 3. Wait until RXNE (Read data register not empty)
	if (Mechanism == Polling_Mechanism) { while(!(SPIx->SR.RXNE)); }
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d107      	bne.n	8000e8c <MCAL_SPI_TX_RX+0x48>
 8000e7c:	bf00      	nop
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f8      	beq.n	8000e7e <MCAL_SPI_TX_RX+0x3a>
	else                                { /*  Misra  */ }

	// 4. Start reception, Write data to SPI data register
	*(P_TxBuffer) = (uint16_t)SPIx->DR.DR;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	801a      	strh	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <MCAL_SPI_GPIO_Set_Pins>:
*
* Note              -Must open clock for AFIO & GPIO After GPIO Initialization.
*                   -Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software.
*/
void MCAL_SPI_GPIO_Set_Pins(SPI_t *SPIx)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_GPIO_Config;
	GPIO_t* GPIOx = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
	uint16_t* GPIOPins = NULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
	SPI_Config_t* SPIxConfig = NULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]

	SPIxConfig = (SPI_Config_t*)((SPIx == SPI1)? Global_SPI_Config[SPI1_Index] : Global_SPI_Config[SPI2_Index]);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a56      	ldr	r2, [pc, #344]	; (8001010 <MCAL_SPI_GPIO_Set_Pins+0x170>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <MCAL_SPI_GPIO_Set_Pins+0x22>
 8000ebc:	4b55      	ldr	r3, [pc, #340]	; (8001014 <MCAL_SPI_GPIO_Set_Pins+0x174>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	e001      	b.n	8000ec6 <MCAL_SPI_GPIO_Set_Pins+0x26>
 8000ec2:	4b54      	ldr	r3, [pc, #336]	; (8001014 <MCAL_SPI_GPIO_Set_Pins+0x174>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
	GPIOPins   =     (uint16_t*)((SPIx == SPI1)? (SPI_GPIO_Pins) : (SPI_GPIO_Pins + 1));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a51      	ldr	r2, [pc, #324]	; (8001010 <MCAL_SPI_GPIO_Set_Pins+0x170>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d101      	bne.n	8000ed4 <MCAL_SPI_GPIO_Set_Pins+0x34>
 8000ed0:	4b51      	ldr	r3, [pc, #324]	; (8001018 <MCAL_SPI_GPIO_Set_Pins+0x178>)
 8000ed2:	e000      	b.n	8000ed6 <MCAL_SPI_GPIO_Set_Pins+0x36>
 8000ed4:	4b51      	ldr	r3, [pc, #324]	; (800101c <MCAL_SPI_GPIO_Set_Pins+0x17c>)
 8000ed6:	613b      	str	r3, [r7, #16]
	GPIOx      =       (GPIO_t*)((SPIx == SPI1)? GPIOA : GPIOB);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <MCAL_SPI_GPIO_Set_Pins+0x170>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d101      	bne.n	8000ee4 <MCAL_SPI_GPIO_Set_Pins+0x44>
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	; (8001020 <MCAL_SPI_GPIO_Set_Pins+0x180>)
 8000ee2:	e000      	b.n	8000ee6 <MCAL_SPI_GPIO_Set_Pins+0x46>
 8000ee4:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <MCAL_SPI_GPIO_Set_Pins+0x184>)
 8000ee6:	617b      	str	r3, [r7, #20]

	//Enable GPIOA and AFIO
	MCAL_RCC_AFIO_EN();
 8000ee8:	f7ff fe44 	bl	8000b74 <MCAL_RCC_AFIO_EN>
	MCAL_RCC_GPIO_EN(GPIOx);
 8000eec:	6978      	ldr	r0, [r7, #20]
 8000eee:	f7ff fe07 	bl	8000b00 <MCAL_RCC_GPIO_EN>

	if (SPIxConfig->SPI_Mode == SPI_MODE_MASTER)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d14a      	bne.n	8000f90 <MCAL_SPI_GPIO_Set_Pins+0xf0>
	{
		// SPI_GPIO_Pins[x][0] >> SPIx_NSS
		if (SPIxConfig->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLED)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	799b      	ldrb	r3, [r3, #6]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d10d      	bne.n	8000f1e <MCAL_SPI_GPIO_Set_Pins+0x7e>
		{
			SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_NSS_Index];
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	72bb      	strb	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4619      	mov	r1, r3
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff fc8e 	bl	8000838 <MCAL_GPIO_Init>
 8000f1c:	e010      	b.n	8000f40 <MCAL_SPI_GPIO_Set_Pins+0xa0>
		}
		else if (SPIxConfig->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLED)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	799b      	ldrb	r3, [r3, #6]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d10c      	bne.n	8000f40 <MCAL_SPI_GPIO_Set_Pins+0xa0>
		{
			SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_NSS_Index];
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	72bb      	strb	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000f30:	2301      	movs	r3, #1
 8000f32:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f7ff fc7c 	bl	8000838 <MCAL_GPIO_Init>
		}
		else { /* Misra */ }

		// SPI_GPIO_Pins[x][1] >> SPIx_SCK
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_SCK_Index];
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	885b      	ldrh	r3, [r3, #2]
 8000f44:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000f46:	2306      	movs	r3, #6
 8000f48:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	6978      	ldr	r0, [r7, #20]
 8000f56:	f7ff fc6f 	bl	8000838 <MCAL_GPIO_Init>

		// SPI_GPIO_Pins[x][2] >> SPIx_MISO
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MISO_Index];
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	889b      	ldrh	r3, [r3, #4]
 8000f5e:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Input_FLO;
 8000f60:	2301      	movs	r3, #1
 8000f62:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000f64:	2300      	movs	r3, #0
 8000f66:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff fc62 	bl	8000838 <MCAL_GPIO_Init>

		// SPI_GPIO_Pins[x][3] >> SPIx_MOSI
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MOSI_Index];
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	88db      	ldrh	r3, [r3, #6]
 8000f78:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4619      	mov	r1, r3
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f7ff fc55 	bl	8000838 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
	}
	else { /* Misra */ }
}
 8000f8e:	e03b      	b.n	8001008 <MCAL_SPI_GPIO_Set_Pins+0x168>
	else if (SPIxConfig->SPI_Mode == SPI_MODE_SLAVE)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d137      	bne.n	8001008 <MCAL_SPI_GPIO_Set_Pins+0x168>
		if (SPIxConfig->NSS == SPI_NSS_HW_SLAVE)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10c      	bne.n	8000fba <MCAL_SPI_GPIO_Set_Pins+0x11a>
			SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_NSS_Index];
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	72bb      	strb	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000faa:	2300      	movs	r3, #0
 8000fac:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff fc3f 	bl	8000838 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_SCK_Index];
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	885b      	ldrh	r3, [r3, #2]
 8000fbe:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff fc32 	bl	8000838 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MISO_Index];
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	889b      	ldrh	r3, [r3, #4]
 8000fd8:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6978      	ldr	r0, [r7, #20]
 8000fea:	f7ff fc25 	bl	8000838 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MOSI_Index];
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	88db      	ldrh	r3, [r3, #6]
 8000ff2:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	4619      	mov	r1, r3
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff fc18 	bl	8000838 <MCAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40013000 	.word	0x40013000
 8001014:	2000001c 	.word	0x2000001c
 8001018:	080016f0 	.word	0x080016f0
 800101c:	080016f8 	.word	0x080016f8
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00

08001028 <SPI1_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack();
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <SPI1_IRQHandler+0x10>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	4798      	blx	r3
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000001c 	.word	0x2000001c

0800103c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack();
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <SPI2_IRQHandler+0x10>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	4798      	blx	r3
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000001c 	.word	0x2000001c

08001050 <MCAL_UART_Init>:
* Retval            -None.
*
* Note              -support for now Asynchronous mode & clock 8 MHz.
*/
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	// 1. Enable the clock for given USART peripheral
	if      (USARTx == USART1){ RCC->APB2ENR.USART1EN = TRUE; Global_USART_Config[0] = UART_Config; }
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a96      	ldr	r2, [pc, #600]	; (80012b8 <MCAL_UART_Init+0x268>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d108      	bne.n	8001074 <MCAL_UART_Init+0x24>
 8001062:	4a96      	ldr	r2, [pc, #600]	; (80012bc <MCAL_UART_Init+0x26c>)
 8001064:	6993      	ldr	r3, [r2, #24]
 8001066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4a94      	ldr	r2, [pc, #592]	; (80012c0 <MCAL_UART_Init+0x270>)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e018      	b.n	80010a6 <MCAL_UART_Init+0x56>
	else if (USARTx == USART2){ RCC->APB1ENR.USART2EN = TRUE; Global_USART_Config[1] = UART_Config; }
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a93      	ldr	r2, [pc, #588]	; (80012c4 <MCAL_UART_Init+0x274>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d108      	bne.n	800108e <MCAL_UART_Init+0x3e>
 800107c:	4a8f      	ldr	r2, [pc, #572]	; (80012bc <MCAL_UART_Init+0x26c>)
 800107e:	69d3      	ldr	r3, [r2, #28]
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4a8e      	ldr	r2, [pc, #568]	; (80012c0 <MCAL_UART_Init+0x270>)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6053      	str	r3, [r2, #4]
 800108c:	e00b      	b.n	80010a6 <MCAL_UART_Init+0x56>
	else if (USARTx == USART3){ RCC->APB1ENR.USART3EN = TRUE; Global_USART_Config[2] = UART_Config; }
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a8d      	ldr	r2, [pc, #564]	; (80012c8 <MCAL_UART_Init+0x278>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d107      	bne.n	80010a6 <MCAL_UART_Init+0x56>
 8001096:	4a89      	ldr	r2, [pc, #548]	; (80012bc <MCAL_UART_Init+0x26c>)
 8001098:	69d3      	ldr	r3, [r2, #28]
 800109a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109e:	61d3      	str	r3, [r2, #28]
 80010a0:	4a87      	ldr	r2, [pc, #540]	; (80012c0 <MCAL_UART_Init+0x270>)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	6093      	str	r3, [r2, #8]
	else                      { /*  Misra  */ }

	// 2. Enable USART Module
	USARTx->CR1.UE = TRUE;
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68d3      	ldr	r3, [r2, #12]
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ae:	60d3      	str	r3, [r2, #12]

	// 3. Enable USART TX/RX engines according to the USART_Mode configuration item
	switch(UART_Config->USART_Mode){
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d009      	beq.n	80010cc <MCAL_UART_Init+0x7c>
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d00d      	beq.n	80010d8 <MCAL_UART_Init+0x88>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d116      	bne.n	80010ee <MCAL_UART_Init+0x9e>
		case UART_Mode_RX:USARTx->CR1.RE = TRUE;break;
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68d3      	ldr	r3, [r2, #12]
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	60d3      	str	r3, [r2, #12]
 80010ca:	e010      	b.n	80010ee <MCAL_UART_Init+0x9e>
		case UART_Mode_TX:USARTx->CR1.TE = TRUE;break;
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68d3      	ldr	r3, [r2, #12]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	60d3      	str	r3, [r2, #12]
 80010d6:	e00a      	b.n	80010ee <MCAL_UART_Init+0x9e>
		case UART_Mode_TX_RX:
			USARTx->CR1.RE = TRUE;
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	68d3      	ldr	r3, [r2, #12]
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	60d3      	str	r3, [r2, #12]
			USARTx->CR1.TE = TRUE;
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68d3      	ldr	r3, [r2, #12]
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	60d3      	str	r3, [r2, #12]
			break;
 80010ec:	bf00      	nop
		}

	//  4. Pay-load width
	USARTx->CR1.M = UART_Config->Payload_Length;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	7a1b      	ldrb	r3, [r3, #8]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	b2d9      	uxtb	r1, r3
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68d3      	ldr	r3, [r2, #12]
 80010fc:	f361 330c 	bfi	r3, r1, #12, #1
 8001100:	60d3      	str	r3, [r2, #12]

	// 5. configuration of parity control bit field
	if (!UART_Config->Parity)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	7a5b      	ldrb	r3, [r3, #9]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d11c      	bne.n	8001144 <MCAL_UART_Init+0xf4>
	{
		switch(UART_Config->Parity){
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	7a5b      	ldrb	r3, [r3, #9]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d00c      	beq.n	800112c <MCAL_UART_Init+0xdc>
 8001112:	2b03      	cmp	r3, #3
 8001114:	d11b      	bne.n	800114e <MCAL_UART_Init+0xfe>
			case UART_Parity_ODD : USARTx->CR1.PCE = TRUE; USARTx->CR1.PS = TRUE; break;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68d3      	ldr	r3, [r2, #12]
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	60d3      	str	r3, [r2, #12]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	68d3      	ldr	r3, [r2, #12]
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	60d3      	str	r3, [r2, #12]
 800112a:	e010      	b.n	800114e <MCAL_UART_Init+0xfe>
			case UART_Parity_EVEN: USARTx->CR1.PCE = TRUE; USARTx->CR1.PS = FALSE;break;
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68d3      	ldr	r3, [r2, #12]
 8001130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001134:	60d3      	str	r3, [r2, #12]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68d3      	ldr	r3, [r2, #12]
 800113a:	f36f 2349 	bfc	r3, #9, #1
 800113e:	60d3      	str	r3, [r2, #12]
 8001140:	bf00      	nop
 8001142:	e004      	b.n	800114e <MCAL_UART_Init+0xfe>
			}
	}else
	{
		USARTx->CR1.PCE = FALSE;
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68d3      	ldr	r3, [r2, #12]
 8001148:	f36f 238a 	bfc	r3, #10, #1
 800114c:	60d3      	str	r3, [r2, #12]
	}

	// 6. configuration the no. of stop bits
	USARTx->CR2.STOP = UART_Config->StopBits;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	7a9b      	ldrb	r3, [r3, #10]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	b2d9      	uxtb	r1, r3
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6913      	ldr	r3, [r2, #16]
 800115c:	f361 330d 	bfi	r3, r1, #12, #2
 8001160:	6113      	str	r3, [r2, #16]

	// 7. USART HW Flow Control
	switch(UART_Config->HW_FlowControl){
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	7adb      	ldrb	r3, [r3, #11]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d004      	beq.n	8001174 <MCAL_UART_Init+0x124>
 800116a:	2b03      	cmp	r3, #3
 800116c:	d00e      	beq.n	800118c <MCAL_UART_Init+0x13c>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d006      	beq.n	8001180 <MCAL_UART_Init+0x130>
 8001172:	e016      	b.n	80011a2 <MCAL_UART_Init+0x152>
		case UART_HW_FlowControl_CTS: USARTx->CR3.CTSE = TRUE;break;
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6953      	ldr	r3, [r2, #20]
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6153      	str	r3, [r2, #20]
 800117e:	e010      	b.n	80011a2 <MCAL_UART_Init+0x152>
		case UART_HW_FlowControl_RTS: USARTx->CR3.RTSE = TRUE;break;
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6953      	ldr	r3, [r2, #20]
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	e00a      	b.n	80011a2 <MCAL_UART_Init+0x152>
		case UART_HW_FlowControl_RTS_CTS:
			USARTx->CR3.CTSE = TRUE;
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6953      	ldr	r3, [r2, #20]
 8001190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001194:	6153      	str	r3, [r2, #20]
			USARTx->CR3.RTSE = TRUE;break;
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6953      	ldr	r3, [r2, #20]
 800119a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119e:	6153      	str	r3, [r2, #20]
 80011a0:	bf00      	nop
		}

	// 8. configuration baud-rate
	uint32_t pclk = (USARTx == USART1)? MCAL_RCC_GetPCLK2Freq() : MCAL_RCC_GetPCLK1Freq();
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <MCAL_UART_Init+0x268>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d103      	bne.n	80011b2 <MCAL_UART_Init+0x162>
 80011aa:	f7ff fd2f 	bl	8000c0c <MCAL_RCC_GetPCLK2Freq>
 80011ae:	4603      	mov	r3, r0
 80011b0:	e002      	b.n	80011b8 <MCAL_UART_Init+0x168>
 80011b2:	f7ff fd1b 	bl	8000bec <MCAL_RCC_GetPCLK1Freq>
 80011b6:	4603      	mov	r3, r0
 80011b8:	60fb      	str	r3, [r7, #12]
	USARTx->BRR.DIV_Fraction = DIV_Fraction(pclk, UART_Config->BaudRate);
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	009a      	lsls	r2, r3, #2
 80011c4:	441a      	add	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011dc:	2164      	movs	r1, #100	; 0x64
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4a39      	ldr	r2, [pc, #228]	; (80012cc <MCAL_UART_Init+0x27c>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	095b      	lsrs	r3, r3, #5
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	b2d9      	uxtb	r1, r3
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6893      	ldr	r3, [r2, #8]
 80011f8:	f361 0303 	bfi	r3, r1, #0, #4
 80011fc:	6093      	str	r3, [r2, #8]
	USARTx->BRR.DIV_Mantissa = DIV_Mantissa(pclk, UART_Config->BaudRate);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	011b      	lsls	r3, r3, #4
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120e:	b299      	uxth	r1, r3
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6893      	ldr	r3, [r2, #8]
 8001214:	f361 130f 	bfi	r3, r1, #4, #12
 8001218:	6093      	str	r3, [r2, #8]

	// 9. Enable or Disable Interrupt
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	7b1b      	ldrb	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d046      	beq.n	80012b0 <MCAL_UART_Init+0x260>
	{
		if      (USARTx == USART1){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART1_IRQ - 32)); }
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <MCAL_UART_Init+0x268>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d106      	bne.n	8001238 <MCAL_UART_Init+0x1e8>
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MCAL_UART_Init+0x280>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <MCAL_UART_Init+0x280>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6053      	str	r3, [r2, #4]
 8001236:	e014      	b.n	8001262 <MCAL_UART_Init+0x212>
	    else if (USARTx == USART2){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART2_IRQ - 32)); }
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <MCAL_UART_Init+0x274>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d106      	bne.n	800124e <MCAL_UART_Init+0x1fe>
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MCAL_UART_Init+0x280>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <MCAL_UART_Init+0x280>)
 8001246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124a:	6053      	str	r3, [r2, #4]
 800124c:	e009      	b.n	8001262 <MCAL_UART_Init+0x212>
	    else if (USARTx == USART3){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART3_IRQ - 32)); }
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <MCAL_UART_Init+0x278>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d105      	bne.n	8001262 <MCAL_UART_Init+0x212>
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MCAL_UART_Init+0x280>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <MCAL_UART_Init+0x280>)
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	6053      	str	r3, [r2, #4]
	    else                      { /*  Misra  */ }

		if      (UART_Config->IRQ_Enable == UART_IRQ_Enable_TXE)    { USARTx->CR1.TXEIE  = TRUE; }
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	7b1b      	ldrb	r3, [r3, #12]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <MCAL_UART_Init+0x226>
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68d3      	ldr	r3, [r2, #12]
 800126e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001272:	60d3      	str	r3, [r2, #12]
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_TC)     { USARTx->CR1.TCIE   = TRUE; }
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_RXNEIE) { USARTx->CR1.RXNEIE = TRUE; }
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_PE)     { USARTx->CR1.PEIE   = TRUE; }
		else                                                        { /*  Misra  */ }
	}
}
 8001274:	e01c      	b.n	80012b0 <MCAL_UART_Init+0x260>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_TC)     { USARTx->CR1.TCIE   = TRUE; }
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	7b1b      	ldrb	r3, [r3, #12]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d105      	bne.n	800128a <MCAL_UART_Init+0x23a>
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68d3      	ldr	r3, [r2, #12]
 8001282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	e012      	b.n	80012b0 <MCAL_UART_Init+0x260>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_RXNEIE) { USARTx->CR1.RXNEIE = TRUE; }
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	7b1b      	ldrb	r3, [r3, #12]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d105      	bne.n	800129e <MCAL_UART_Init+0x24e>
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68d3      	ldr	r3, [r2, #12]
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	e008      	b.n	80012b0 <MCAL_UART_Init+0x260>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_PE)     { USARTx->CR1.PEIE   = TRUE; }
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	7b1b      	ldrb	r3, [r3, #12]
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d104      	bne.n	80012b0 <MCAL_UART_Init+0x260>
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68d3      	ldr	r3, [r2, #12]
 80012aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40021000 	.word	0x40021000
 80012c0:	20000024 	.word	0x20000024
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40004800 	.word	0x40004800
 80012cc:	51eb851f 	.word	0x51eb851f
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <MCAL_UART_GPIO_Set_Pins>:
*
* Note              -Should enable the corresponding ALT & GPIO in RCC clock.
* 					-Also called after MCAL_UART_Init().
*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;

    if (USARTx == USART1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <MCAL_UART_GPIO_Set_Pins+0x1f4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d14e      	bne.n	8001382 <MCAL_UART_GPIO_Set_Pins+0xae>
	{
    	//Enable GPIOA and AFIO
    	MCAL_RCC_AFIO_EN();
 80012e4:	f7ff fc46 	bl	8000b74 <MCAL_RCC_AFIO_EN>
    	MCAL_RCC_GPIO_EN(GPIOA);
 80012e8:	4878      	ldr	r0, [pc, #480]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 80012ea:	f7ff fc09 	bl	8000b00 <MCAL_RCC_GPIO_EN>

    	// PA9 TX and PA10 RX
    	if (Global_USART_Config[0]->USART_Mode != UART_Mode_TX)
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d00c      	beq.n	8001312 <MCAL_UART_GPIO_Set_Pins+0x3e>
    	{
			// Initialize GPIOA Pin 10 as a AFIO UART RX
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 80012fe:	2308      	movs	r3, #8
 8001300:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4619      	mov	r1, r3
 800130c:	486f      	ldr	r0, [pc, #444]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 800130e:	f7ff fa93 	bl	8000838 <MCAL_GPIO_Init>
    	}
    	if (Global_USART_Config[0]->USART_Mode != UART_Mode_RX)
 8001312:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00c      	beq.n	8001336 <MCAL_UART_GPIO_Set_Pins+0x62>
    	{
			// Initialize GPIOA Pin 9 as a AFIO UART TX
			PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 800131c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001320:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8001322:	2306      	movs	r3, #6
 8001324:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001326:	2301      	movs	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	4866      	ldr	r0, [pc, #408]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8001332:	f7ff fa81 	bl	8000838 <MCAL_GPIO_Init>
    	}
    	else { /*  Misra  */ }

    	// PA11 CTS and PA12 RTS
		if (Global_USART_Config[0]->HW_FlowControl != UART_HW_FlowControl_RTS)
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	7adb      	ldrb	r3, [r3, #11]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d00c      	beq.n	800135a <MCAL_UART_GPIO_Set_Pins+0x86>
		{
			// Initialize GPIOA Pin 10 as a AFIO UART CTS
			PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8001340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001344:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8001346:	2308      	movs	r3, #8
 8001348:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	485d      	ldr	r0, [pc, #372]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8001356:	f7ff fa6f 	bl	8000838 <MCAL_GPIO_Init>
		}
		if (Global_USART_Config[0]->HW_FlowControl != UART_HW_FlowControl_CTS)
 800135a:	4b5d      	ldr	r3, [pc, #372]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	7adb      	ldrb	r3, [r3, #11]
 8001360:	2b02      	cmp	r3, #2
 8001362:	f000 80ad 	beq.w	80014c0 <MCAL_UART_GPIO_Set_Pins+0x1ec>
		{
			// Initialize GPIOA Pin 9 as a AFIO UART RTS
			PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 800136c:	2306      	movs	r3, #6
 800136e:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4854      	ldr	r0, [pc, #336]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 800137c:	f7ff fa5c 	bl	8000838 <MCAL_GPIO_Init>
		}
		else { /*  Misra  */ }
	}
    else { /*  Misra  */ }

}
 8001380:	e09e      	b.n	80014c0 <MCAL_UART_GPIO_Set_Pins+0x1ec>
    else if (USARTx == USART2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <MCAL_UART_GPIO_Set_Pins+0x200>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d149      	bne.n	800141e <MCAL_UART_GPIO_Set_Pins+0x14a>
		MCAL_RCC_AFIO_EN();
 800138a:	f7ff fbf3 	bl	8000b74 <MCAL_RCC_AFIO_EN>
		MCAL_RCC_GPIO_EN(GPIOA);
 800138e:	484f      	ldr	r0, [pc, #316]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8001390:	f7ff fbb6 	bl	8000b00 <MCAL_RCC_GPIO_EN>
		if (Global_USART_Config[1]->USART_Mode != UART_Mode_TX)
 8001394:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d00b      	beq.n	80013b6 <MCAL_UART_GPIO_Set_Pins+0xe2>
			PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800139e:	2308      	movs	r3, #8
 80013a0:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 80013a2:	2308      	movs	r3, #8
 80013a4:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4846      	ldr	r0, [pc, #280]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 80013b2:	f7ff fa41 	bl	8000838 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->USART_Mode != UART_Mode_RX)
 80013b6:	4b46      	ldr	r3, [pc, #280]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <MCAL_UART_GPIO_Set_Pins+0x104>
			PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80013c0:	2304      	movs	r3, #4
 80013c2:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 80013c4:	2306      	movs	r3, #6
 80013c6:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	483e      	ldr	r0, [pc, #248]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 80013d4:	f7ff fa30 	bl	8000838 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HW_FlowControl != UART_HW_FlowControl_RTS)
 80013d8:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	7adb      	ldrb	r3, [r3, #11]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d00b      	beq.n	80013fa <MCAL_UART_GPIO_Set_Pins+0x126>
			PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80013e2:	2301      	movs	r3, #1
 80013e4:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 80013e6:	2308      	movs	r3, #8
 80013e8:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	4835      	ldr	r0, [pc, #212]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 80013f6:	f7ff fa1f 	bl	8000838 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HW_FlowControl != UART_HW_FlowControl_CTS)
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	7adb      	ldrb	r3, [r3, #11]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d05d      	beq.n	80014c0 <MCAL_UART_GPIO_Set_Pins+0x1ec>
			PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8001404:	2302      	movs	r3, #2
 8001406:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8001408:	2306      	movs	r3, #6
 800140a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800140c:	2301      	movs	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	482d      	ldr	r0, [pc, #180]	; (80014cc <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8001418:	f7ff fa0e 	bl	8000838 <MCAL_GPIO_Init>
}
 800141c:	e050      	b.n	80014c0 <MCAL_UART_GPIO_Set_Pins+0x1ec>
    else if (USARTx == USART3)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <MCAL_UART_GPIO_Set_Pins+0x204>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d14c      	bne.n	80014c0 <MCAL_UART_GPIO_Set_Pins+0x1ec>
		MCAL_RCC_AFIO_EN();
 8001426:	f7ff fba5 	bl	8000b74 <MCAL_RCC_AFIO_EN>
		MCAL_RCC_GPIO_EN(GPIOB);
 800142a:	482c      	ldr	r0, [pc, #176]	; (80014dc <MCAL_UART_GPIO_Set_Pins+0x208>)
 800142c:	f7ff fb68 	bl	8000b00 <MCAL_RCC_GPIO_EN>
		if (Global_USART_Config[2]->USART_Mode != UART_Mode_TX)
 8001430:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d00c      	beq.n	8001454 <MCAL_UART_GPIO_Set_Pins+0x180>
			PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 800143a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800143e:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8001440:	2308      	movs	r3, #8
 8001442:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4619      	mov	r1, r3
 800144e:	4823      	ldr	r0, [pc, #140]	; (80014dc <MCAL_UART_GPIO_Set_Pins+0x208>)
 8001450:	f7ff f9f2 	bl	8000838 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->USART_Mode != UART_Mode_RX)
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00c      	beq.n	8001478 <MCAL_UART_GPIO_Set_Pins+0x1a4>
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 800145e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001462:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8001464:	2306      	movs	r3, #6
 8001466:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	481a      	ldr	r0, [pc, #104]	; (80014dc <MCAL_UART_GPIO_Set_Pins+0x208>)
 8001474:	f7ff f9e0 	bl	8000838 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HW_FlowControl != UART_HW_FlowControl_RTS)
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	7adb      	ldrb	r3, [r3, #11]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d00c      	beq.n	800149c <MCAL_UART_GPIO_Set_Pins+0x1c8>
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8001482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001486:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8001488:	2308      	movs	r3, #8
 800148a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	4811      	ldr	r0, [pc, #68]	; (80014dc <MCAL_UART_GPIO_Set_Pins+0x208>)
 8001498:	f7ff f9ce 	bl	8000838 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HW_FlowControl != UART_HW_FlowControl_CTS)
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	7adb      	ldrb	r3, [r3, #11]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d00c      	beq.n	80014c0 <MCAL_UART_GPIO_Set_Pins+0x1ec>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 80014a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014aa:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 80014ac:	2306      	movs	r3, #6
 80014ae:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <MCAL_UART_GPIO_Set_Pins+0x208>)
 80014bc:	f7ff f9bc 	bl	8000838 <MCAL_GPIO_Init>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40013800 	.word	0x40013800
 80014cc:	40010800 	.word	0x40010800
 80014d0:	20000024 	.word	0x20000024
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40004800 	.word	0x40004800
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <MCAL_UART_SendData>:
*                   -Because it is replaced by the parity.
*                   -When receiving with the parity enabled the value read in
*                    the MSB bit is the received parity bit.
*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* P_TxBuffer, uint8_t Mechanism)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	4613      	mov	r3, r2
 80014ec:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until TXE (Transmit data register empty)
	if (Mechanism == Polling_Mechanism) { while(!(USARTx->SR.TXE)); }
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d107      	bne.n	8001504 <MCAL_UART_SendData+0x24>
 80014f4:	bf00      	nop
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f8      	beq.n	80014f6 <MCAL_UART_SendData+0x16>
	else                                { /*  Misra  */ }

	// 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame
	USART_Config_t* USARTxConfig = NULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
	USARTxConfig = (USART_Config_t*)((USARTx == USART1)?  Global_USART_Config       :
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <MCAL_UART_SendData+0x90>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <MCAL_UART_SendData+0x40>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <MCAL_UART_SendData+0x94>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d101      	bne.n	800151c <MCAL_UART_SendData+0x3c>
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MCAL_UART_SendData+0x98>)
 800151a:	e002      	b.n	8001522 <MCAL_UART_SendData+0x42>
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MCAL_UART_SendData+0x9c>)
 800151e:	e000      	b.n	8001522 <MCAL_UART_SendData+0x42>
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MCAL_UART_SendData+0xa0>)
 8001522:	617b      	str	r3, [r7, #20]
			                            ((USARTx == USART2)? (Global_USART_Config + 1)  :
			                		                             (Global_USART_Config + 2)));

	switch(USARTxConfig->Payload_Length){
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <MCAL_UART_SendData+0x52>
 800152c:	2b01      	cmp	r3, #1
 800152e:	d00d      	beq.n	800154c <MCAL_UART_SendData+0x6c>
	case UART_Payload_Length_8B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0xFF); break;
	case UART_Payload_Length_9B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0x1FF);break;
	}
}
 8001530:	e019      	b.n	8001566 <MCAL_UART_SendData+0x86>
	case UART_Payload_Length_8B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0xFF); break;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153a:	b29b      	uxth	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b299      	uxth	r1, r3
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6853      	ldr	r3, [r2, #4]
 8001544:	f361 0308 	bfi	r3, r1, #0, #9
 8001548:	6053      	str	r3, [r2, #4]
 800154a:	e00c      	b.n	8001566 <MCAL_UART_SendData+0x86>
	case UART_Payload_Length_9B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0x1FF);break;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001554:	b29b      	uxth	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	b299      	uxth	r1, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	6853      	ldr	r3, [r2, #4]
 800155e:	f361 0308 	bfi	r3, r1, #0, #9
 8001562:	6053      	str	r3, [r2, #4]
 8001564:	bf00      	nop
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40013800 	.word	0x40013800
 8001574:	40004400 	.word	0x40004400
 8001578:	20000028 	.word	0x20000028
 800157c:	2000002c 	.word	0x2000002c
 8001580:	20000024 	.word	0x20000024

08001584 <MCAL_UART_ReceiveData>:
*                   -Because it is replaced by the parity.
*                   -When receiving with the parity enabled the value read in
*                    the MSB bit is the received parity bit.
*/
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* P_RxBuffer, uint8_t Mechanism)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until RXNE (Read data register not empty)
	if (Mechanism == Polling_Mechanism) { while(!(USARTx->SR.RXNE)); }
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d107      	bne.n	80015a8 <MCAL_UART_ReceiveData+0x24>
 8001598:	bf00      	nop
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f8      	beq.n	800159a <MCAL_UART_ReceiveData+0x16>
	else                                { /*  Misra  */ }

	// 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame
	USART_Config_t* USARTxConfig = NULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
	USARTxConfig = (USART_Config_t*)((USARTx == USART1)?  Global_USART_Config       :
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <MCAL_UART_ReceiveData+0xbc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d007      	beq.n	80015c4 <MCAL_UART_ReceiveData+0x40>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4a23      	ldr	r2, [pc, #140]	; (8001644 <MCAL_UART_ReceiveData+0xc0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d101      	bne.n	80015c0 <MCAL_UART_ReceiveData+0x3c>
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MCAL_UART_ReceiveData+0xc4>)
 80015be:	e002      	b.n	80015c6 <MCAL_UART_ReceiveData+0x42>
 80015c0:	4b22      	ldr	r3, [pc, #136]	; (800164c <MCAL_UART_ReceiveData+0xc8>)
 80015c2:	e000      	b.n	80015c6 <MCAL_UART_ReceiveData+0x42>
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MCAL_UART_ReceiveData+0xcc>)
 80015c6:	617b      	str	r3, [r7, #20]
			                        ((USARTx == USART2)? (Global_USART_Config + 1)  :
			                		                     (Global_USART_Config + 2)));

	switch(USARTxConfig->Payload_Length){
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	7a1b      	ldrb	r3, [r3, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <MCAL_UART_ReceiveData+0x52>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d019      	beq.n	8001608 <MCAL_UART_ReceiveData+0x84>
			*P_RxBuffer =  USARTx->DR.DR;
		else
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
		break;
	}
}
 80015d4:	e02f      	b.n	8001636 <MCAL_UART_ReceiveData+0xb2>
		if (USARTxConfig->Parity == UART_Parity_Disable)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	7a5b      	ldrb	r3, [r3, #9]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <MCAL_UART_ReceiveData+0x6e>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	801a      	strh	r2, [r3, #0]
		break;
 80015f0:	e021      	b.n	8001636 <MCAL_UART_ReceiveData+0xb2>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0x7F);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001600:	b29a      	uxth	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	801a      	strh	r2, [r3, #0]
		break;
 8001606:	e016      	b.n	8001636 <MCAL_UART_ReceiveData+0xb2>
		if (USARTxConfig->Parity == UART_Parity_Disable)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	7a5b      	ldrb	r3, [r3, #9]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d108      	bne.n	8001622 <MCAL_UART_ReceiveData+0x9e>
			*P_RxBuffer =  USARTx->DR.DR;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001618:	b29b      	uxth	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	801a      	strh	r2, [r3, #0]
		break;
 8001620:	e008      	b.n	8001634 <MCAL_UART_ReceiveData+0xb0>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162a:	b29b      	uxth	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b29a      	uxth	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	801a      	strh	r2, [r3, #0]
		break;
 8001634:	bf00      	nop
}
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40013800 	.word	0x40013800
 8001644:	40004400 	.word	0x40004400
 8001648:	20000028 	.word	0x20000028
 800164c:	2000002c 	.word	0x2000002c
 8001650:	20000024 	.word	0x20000024

08001654 <USART2_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8001658:	4b02      	ldr	r3, [pc, #8]	; (8001664 <USART2_IRQHandler+0x10>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	4798      	blx	r3
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000024 	.word	0x20000024

08001668 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <USART1_IRQHandler+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	4798      	blx	r3
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000024 	.word	0x20000024

0800167c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <USART3_IRQHandler+0x10>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	4798      	blx	r3
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000024 	.word	0x20000024

08001690 <__libc_init_array>:
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	2500      	movs	r5, #0
 8001694:	4e0c      	ldr	r6, [pc, #48]	; (80016c8 <__libc_init_array+0x38>)
 8001696:	4c0d      	ldr	r4, [pc, #52]	; (80016cc <__libc_init_array+0x3c>)
 8001698:	1ba4      	subs	r4, r4, r6
 800169a:	10a4      	asrs	r4, r4, #2
 800169c:	42a5      	cmp	r5, r4
 800169e:	d109      	bne.n	80016b4 <__libc_init_array+0x24>
 80016a0:	f000 f81a 	bl	80016d8 <_init>
 80016a4:	2500      	movs	r5, #0
 80016a6:	4e0a      	ldr	r6, [pc, #40]	; (80016d0 <__libc_init_array+0x40>)
 80016a8:	4c0a      	ldr	r4, [pc, #40]	; (80016d4 <__libc_init_array+0x44>)
 80016aa:	1ba4      	subs	r4, r4, r6
 80016ac:	10a4      	asrs	r4, r4, #2
 80016ae:	42a5      	cmp	r5, r4
 80016b0:	d105      	bne.n	80016be <__libc_init_array+0x2e>
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
 80016b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016b8:	4798      	blx	r3
 80016ba:	3501      	adds	r5, #1
 80016bc:	e7ee      	b.n	800169c <__libc_init_array+0xc>
 80016be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c2:	4798      	blx	r3
 80016c4:	3501      	adds	r5, #1
 80016c6:	e7f2      	b.n	80016ae <__libc_init_array+0x1e>
 80016c8:	08001700 	.word	0x08001700
 80016cc:	08001700 	.word	0x08001700
 80016d0:	08001700 	.word	0x08001700
 80016d4:	08001704 	.word	0x08001704

080016d8 <_init>:
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016da:	bf00      	nop
 80016dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016de:	bc08      	pop	{r3}
 80016e0:	469e      	mov	lr, r3
 80016e2:	4770      	bx	lr

080016e4 <_fini>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr
