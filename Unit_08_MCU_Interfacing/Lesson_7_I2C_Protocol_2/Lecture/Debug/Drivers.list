
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001454  08001454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001464  08001464  0001146c  2**0
                  CONTENTS
  4 .ARM          00000000  08001464  08001464  0001146c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001464  0800146c  0001146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001468  08001468  00011468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001146c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000000  0800146c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800146c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001146c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011080  00000000  00000000  00011495  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001546  00000000  00000000  00022515  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013a8  00000000  00000000  00023a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000318  00000000  00000000  00024e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000280  00000000  00000000  00025120  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002b15  00000000  00000000  000253a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003c78  00000000  00000000  00027eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b1f1  00000000  00000000  0002bb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00036d1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a18  00000000  00000000  00036d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800143c 	.word	0x0800143c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800143c 	.word	0x0800143c

08000170 <HAL_EEPROM_Init>:

/*******************************************************************************
                     APIs Supported by "HAL EEPROM DRIVER"
*******************************************************************************/
void HAL_EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08c      	sub	sp, #48	; 0x30
 8000174:	af00      	add	r7, sp, #0
	I2C_Config_t I2C_Config;

	/* I2C Controller as Master */
	I2C_Config.General_Call     = I2C_GENERAL_CALL_ENABLE;
 8000176:	2301      	movs	r3, #1
 8000178:	60fb      	str	r3, [r7, #12]
	I2C_Config.Mode             = I2C_MODE_I2C_MODE;
 800017a:	2300      	movs	r3, #0
 800017c:	617b      	str	r3, [r7, #20]
	I2C_Config.Stretch_Mode     = I2C_STRETCH_MODE_ENABLE;
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
	I2C_Config.Master_Mode      = I2C_MASTER_MODE_SM;
 8000182:	2300      	movs	r3, #0
 8000184:	613b      	str	r3, [r7, #16]
	I2C_Config.Clock_Speed      = I2C_CLOCK_SPEED_100KHZ;
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 8000188:	607b      	str	r3, [r7, #4]
	I2C_Config.ACK_Control      = I2C_ACK_CONTROL_ENABLE;
 800018a:	2301      	movs	r3, #1
 800018c:	61bb      	str	r3, [r7, #24]
	I2C_Config.P_Slave_CallBack = NULL;
 800018e:	2300      	movs	r3, #0
 8000190:	62fb      	str	r3, [r7, #44]	; 0x2c

	MCAL_I2C_Init(I2C1, &I2C_Config);
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	4619      	mov	r1, r3
 8000196:	4806      	ldr	r0, [pc, #24]	; (80001b0 <HAL_EEPROM_Init+0x40>)
 8000198:	f000 fd7c 	bl	8000c94 <MCAL_I2C_Init>
	MCAL_I2C_GPIO_Set_Pins(I2C1);
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <HAL_EEPROM_Init+0x40>)
 800019e:	f000 fe93 	bl	8000ec8 <MCAL_I2C_GPIO_Set_Pins>
}
 80001a2:	bf00      	nop
 80001a4:	3730      	adds	r7, #48	; 0x30
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	000186a0 	.word	0x000186a0
 80001b0:	40005400 	.word	0x40005400

080001b4 <HAL_EEPROM_Write_NBytes>:

void HAL_EEPROM_Write_NBytes(uint32_t Memory_Address, uint8_t *Byte, uint32_t Data_Length)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b0c8      	sub	sp, #288	; 0x120
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	f107 030c 	add.w	r3, r7, #12
 80001be:	6018      	str	r0, [r3, #0]
 80001c0:	f107 0308 	add.w	r3, r7, #8
 80001c4:	6019      	str	r1, [r3, #0]
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	601a      	str	r2, [r3, #0]
	int i = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	uint8_t Buffer[256];

	Buffer[0] = (uint8_t)(Memory_Address >> 8);		/* High Address */
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	0a1b      	lsrs	r3, r3, #8
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (uint8_t)(Memory_Address);			/* Low Address  */
 80001e0:	f107 030c 	add.w	r3, r7, #12
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	705a      	strb	r2, [r3, #1]

	for(i = 2; i < (Data_Length+2); i++)
 80001ee:	2302      	movs	r3, #2
 80001f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80001f4:	e013      	b.n	800021e <HAL_EEPROM_Write_NBytes+0x6a>
	{
		Buffer[i]= Byte[i-2];
 80001f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80001fa:	3b02      	subs	r3, #2
 80001fc:	f107 0208 	add.w	r2, r7, #8
 8000200:	6812      	ldr	r2, [r2, #0]
 8000202:	4413      	add	r3, r2
 8000204:	7819      	ldrb	r1, [r3, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800020e:	4413      	add	r3, r2
 8000210:	460a      	mov	r2, r1
 8000212:	701a      	strb	r2, [r3, #0]
	for(i = 2; i < (Data_Length+2); i++)
 8000214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000218:	3301      	adds	r3, #1
 800021a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	1c9a      	adds	r2, r3, #2
 8000224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000228:	429a      	cmp	r2, r3
 800022a:	d8e4      	bhi.n	80001f6 <HAL_EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_Address, Buffer, (Data_Length+2), STOP_ENABLE, START_ENABLE);
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	3302      	adds	r3, #2
 8000234:	b2d9      	uxtb	r1, r3
 8000236:	f107 0214 	add.w	r2, r7, #20
 800023a:	2301      	movs	r3, #1
 800023c:	9301      	str	r3, [sp, #4]
 800023e:	2301      	movs	r3, #1
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	460b      	mov	r3, r1
 8000244:	212a      	movs	r1, #42	; 0x2a
 8000246:	4804      	ldr	r0, [pc, #16]	; (8000258 <HAL_EEPROM_Write_NBytes+0xa4>)
 8000248:	f000 fea6 	bl	8000f98 <MCAL_I2C_MASTER_TX>
}
 800024c:	bf00      	nop
 800024e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40005400 	.word	0x40005400

0800025c <HAL_EEPROM_Read_NBytes>:

void HAL_EEPROM_Read_NBytes(uint32_t Memory_Address, uint8_t *Byte, uint32_t Data_Length)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af02      	add	r7, sp, #8
 8000262:	60f8      	str	r0, [r7, #12]
 8000264:	60b9      	str	r1, [r7, #8]
 8000266:	607a      	str	r2, [r7, #4]
	uint8_t Buffer[2];

	Buffer[0] = (uint8_t)(Memory_Address >> 8);		/* High Address */
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	0a1b      	lsrs	r3, r3, #8
 800026c:	b2db      	uxtb	r3, r3
 800026e:	753b      	strb	r3, [r7, #20]
	Buffer[1] = (uint8_t)(Memory_Address);			/* Low Address  */
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_Address, Buffer, 2, STOP_DISABLE, START_ENABLE);
 8000276:	f107 0214 	add.w	r2, r7, #20
 800027a:	2301      	movs	r3, #1
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	2300      	movs	r3, #0
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2302      	movs	r3, #2
 8000284:	212a      	movs	r1, #42	; 0x2a
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <HAL_EEPROM_Read_NBytes+0x50>)
 8000288:	f000 fe86 	bl	8000f98 <MCAL_I2C_MASTER_TX>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_Address, Byte, Data_Length, STOP_ENABLE, START_Repeated);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	b2da      	uxtb	r2, r3
 8000290:	2302      	movs	r3, #2
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	2301      	movs	r3, #1
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	4613      	mov	r3, r2
 800029a:	68ba      	ldr	r2, [r7, #8]
 800029c:	212a      	movs	r1, #42	; 0x2a
 800029e:	4803      	ldr	r0, [pc, #12]	; (80002ac <HAL_EEPROM_Read_NBytes+0x50>)
 80002a0:	f000 fece 	bl	8001040 <MCAL_I2C_MASTER_RX>
}
 80002a4:	bf00      	nop
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	40005400 	.word	0x40005400

080002b0 <I2C_EEPROM>:
                                     Includes
*******************************************************************************/
#include "I2C_EEPROM.h"

void I2C_EEPROM(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	/* Initialization of EEPROM */
	HAL_EEPROM_Init();
 80002b6:	f7ff ff5b 	bl	8000170 <HAL_EEPROM_Init>

	/************************ Test Case 1 ************************/
	uint8_t Ch1[7] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 80002ba:	4a1a      	ldr	r2, [pc, #104]	; (8000324 <I2C_EEPROM+0x74>)
 80002bc:	f107 0308 	add.w	r3, r7, #8
 80002c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c4:	6018      	str	r0, [r3, #0]
 80002c6:	3304      	adds	r3, #4
 80002c8:	8019      	strh	r1, [r3, #0]
 80002ca:	3302      	adds	r3, #2
 80002cc:	0c0a      	lsrs	r2, r1, #16
 80002ce:	701a      	strb	r2, [r3, #0]
	uint8_t Ch2[7] = {0};
 80002d0:	463b      	mov	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	f8c3 2003 	str.w	r2, [r3, #3]

	HAL_EEPROM_Write_NBytes(0xAF, Ch1, 7);
 80002da:	f107 0308 	add.w	r3, r7, #8
 80002de:	2207      	movs	r2, #7
 80002e0:	4619      	mov	r1, r3
 80002e2:	20af      	movs	r0, #175	; 0xaf
 80002e4:	f7ff ff66 	bl	80001b4 <HAL_EEPROM_Write_NBytes>
	HAL_EEPROM_Read_NBytes (0xAF, Ch2, 7);
 80002e8:	463b      	mov	r3, r7
 80002ea:	2207      	movs	r2, #7
 80002ec:	4619      	mov	r1, r3
 80002ee:	20af      	movs	r0, #175	; 0xaf
 80002f0:	f7ff ffb4 	bl	800025c <HAL_EEPROM_Read_NBytes>

	/************************ Test Case 2 ************************/
	Ch1[0] = 0xA;
 80002f4:	230a      	movs	r3, #10
 80002f6:	723b      	strb	r3, [r7, #8]
	Ch1[1] = 0xB;
 80002f8:	230b      	movs	r3, #11
 80002fa:	727b      	strb	r3, [r7, #9]
	Ch1[2] = 0xC;
 80002fc:	230c      	movs	r3, #12
 80002fe:	72bb      	strb	r3, [r7, #10]
	Ch1[3] = 0xD;
 8000300:	230d      	movs	r3, #13
 8000302:	72fb      	strb	r3, [r7, #11]

	HAL_EEPROM_Write_NBytes(0xFFF, Ch1, 4);
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	2204      	movs	r2, #4
 800030a:	4619      	mov	r1, r3
 800030c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000310:	f7ff ff50 	bl	80001b4 <HAL_EEPROM_Write_NBytes>
	HAL_EEPROM_Read_NBytes (0xFFF, Ch2, 4);
 8000314:	463b      	mov	r3, r7
 8000316:	2204      	movs	r2, #4
 8000318:	4619      	mov	r1, r3
 800031a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800031e:	f7ff ff9d 	bl	800025c <HAL_EEPROM_Read_NBytes>

	/* Loop For Ever */
	while(1);
 8000322:	e7fe      	b.n	8000322 <I2C_EEPROM+0x72>
 8000324:	08001454 	.word	0x08001454

08000328 <main>:
                                     Includes
*******************************************************************************/
#include "I2C_EEPROM.h"

int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	I2C_EEPROM();
 800032c:	f7ff ffc0 	bl	80002b0 <I2C_EEPROM>
 8000330:	2300      	movs	r3, #0
}
 8000332:	4618      	mov	r0, r3
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f001 f845 	bl	80013f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ffdd 	bl	8000328 <main>

0800036e <LoopForever>:

LoopForever:
    b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	0800146c 	.word	0x0800146c
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	200000c4 	.word	0x200000c4

08000388 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <EXTI0_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void EXTI0_IRQHandler()
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI0);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI0_IRQHandler+0x1c>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI0_IRQHandler+0x1c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI0]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI0_IRQHandler+0x20>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	20000088 	.word	0x20000088

080003b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI1);
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI1_IRQHandler+0x1c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI1_IRQHandler+0x1c>)
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI1_IRQHandler+0x20>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	4798      	blx	r3
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000088 	.word	0x20000088

080003d4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI2);
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI2_IRQHandler+0x1c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <EXTI2_IRQHandler+0x1c>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <EXTI2_IRQHandler+0x20>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400
 80003f4:	20000088 	.word	0x20000088

080003f8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI3);
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI3_IRQHandler+0x1c>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <EXTI3_IRQHandler+0x1c>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI3]();
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <EXTI3_IRQHandler+0x20>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4798      	blx	r3
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010400 	.word	0x40010400
 8000418:	20000088 	.word	0x20000088

0800041c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI4);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI4_IRQHandler+0x1c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI4_IRQHandler+0x1c>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI4]();
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI4_IRQHandler+0x20>)
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	20000088 	.word	0x20000088

08000440 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR.PR & (1 << EXTI5)) {EXTI->PR.PR |= (1<<EXTI5);  GP_IRQCallBack[EXTI5]();}
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	2b00      	cmp	r3, #0
 800044e:	d009      	beq.n	8000464 <EXTI9_5_IRQHandler+0x24>
 8000450:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a24      	ldr	r2, [pc, #144]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <EXTI9_5_IRQHandler+0xac>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4798      	blx	r3
	else if (EXTI->PR.PR & (1 << EXTI7)) {EXTI->PR.PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
	else if (EXTI->PR.PR & (1 << EXTI8)) {EXTI->PR.PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
	else if (EXTI->PR.PR & (1 << EXTI9)) {EXTI->PR.PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
	else{ /* Misra */ }

}
 8000462:	e03e      	b.n	80004e2 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI6)) {EXTI->PR.PR |= (1<<EXTI6);  GP_IRQCallBack[EXTI6]();}
 8000464:	4b20      	ldr	r3, [pc, #128]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000466:	695b      	ldr	r3, [r3, #20]
 8000468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046c:	2b00      	cmp	r3, #0
 800046e:	d009      	beq.n	8000484 <EXTI9_5_IRQHandler+0x44>
 8000470:	4b1d      	ldr	r3, [pc, #116]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047a:	6153      	str	r3, [r2, #20]
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <EXTI9_5_IRQHandler+0xac>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4798      	blx	r3
}
 8000482:	e02e      	b.n	80004e2 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI7)) {EXTI->PR.PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800048c:	2b00      	cmp	r3, #0
 800048e:	d009      	beq.n	80004a4 <EXTI9_5_IRQHandler+0x64>
 8000490:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 8000496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <EXTI9_5_IRQHandler+0xac>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	4798      	blx	r3
}
 80004a2:	e01e      	b.n	80004e2 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI8)) {EXTI->PR.PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d009      	beq.n	80004c4 <EXTI9_5_IRQHandler+0x84>
 80004b0:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 80004b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <EXTI9_5_IRQHandler+0xac>)
 80004be:	6a1b      	ldr	r3, [r3, #32]
 80004c0:	4798      	blx	r3
}
 80004c2:	e00e      	b.n	80004e2 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI9)) {EXTI->PR.PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d008      	beq.n	80004e2 <EXTI9_5_IRQHandler+0xa2>
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <EXTI9_5_IRQHandler+0xa8>)
 80004d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004da:	6153      	str	r3, [r2, #20]
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <EXTI9_5_IRQHandler+0xac>)
 80004de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e0:	4798      	blx	r3
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010400 	.word	0x40010400
 80004ec:	20000088 	.word	0x20000088

080004f0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR.PR & (1 << EXTI10)) {EXTI->PR.PR |= (1<<EXTI10);  GP_IRQCallBack[EXTI10]();}
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d009      	beq.n	8000514 <EXTI15_10_IRQHandler+0x24>
 8000500:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a2c      	ldr	r2, [pc, #176]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6153      	str	r3, [r2, #20]
 800050c:	4b2b      	ldr	r3, [pc, #172]	; (80005bc <EXTI15_10_IRQHandler+0xcc>)
 800050e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000510:	4798      	blx	r3
	else if (EXTI->PR.PR & (1 << EXTI12)) {EXTI->PR.PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
	else if (EXTI->PR.PR & (1 << EXTI13)) {EXTI->PR.PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
	else if (EXTI->PR.PR & (1 << EXTI14)) {EXTI->PR.PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
	else if (EXTI->PR.PR & (1 << EXTI15)) {EXTI->PR.PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
	else{ /* Misra */ }
}
 8000512:	e04e      	b.n	80005b2 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI11)) {EXTI->PR.PR |= (1<<EXTI11);  GP_IRQCallBack[EXTI11]();}
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800051c:	2b00      	cmp	r3, #0
 800051e:	d009      	beq.n	8000534 <EXTI15_10_IRQHandler+0x44>
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800052a:	6153      	str	r3, [r2, #20]
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <EXTI15_10_IRQHandler+0xcc>)
 800052e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000530:	4798      	blx	r3
}
 8000532:	e03e      	b.n	80005b2 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI12)) {EXTI->PR.PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800053c:	2b00      	cmp	r3, #0
 800053e:	d009      	beq.n	8000554 <EXTI15_10_IRQHandler+0x64>
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a1c      	ldr	r2, [pc, #112]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000546:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800054a:	6153      	str	r3, [r2, #20]
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <EXTI15_10_IRQHandler+0xcc>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4798      	blx	r3
}
 8000552:	e02e      	b.n	80005b2 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI13)) {EXTI->PR.PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d009      	beq.n	8000574 <EXTI15_10_IRQHandler+0x84>
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056a:	6153      	str	r3, [r2, #20]
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <EXTI15_10_IRQHandler+0xcc>)
 800056e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000570:	4798      	blx	r3
}
 8000572:	e01e      	b.n	80005b2 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI14)) {EXTI->PR.PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d009      	beq.n	8000594 <EXTI15_10_IRQHandler+0xa4>
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6153      	str	r3, [r2, #20]
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <EXTI15_10_IRQHandler+0xcc>)
 800058e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000590:	4798      	blx	r3
}
 8000592:	e00e      	b.n	80005b2 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI15)) {EXTI->PR.PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <EXTI15_10_IRQHandler+0xc2>
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <EXTI15_10_IRQHandler+0xc8>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005aa:	6153      	str	r3, [r2, #20]
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <EXTI15_10_IRQHandler+0xcc>)
 80005ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005b0:	4798      	blx	r3
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40010400 	.word	0x40010400
 80005bc:	20000088 	.word	0x20000088

080005c0 <ConfigurationPin>:

/*******************************************************************************
                      APIs Supported by "MCAL GPIO DRIVER"
 *******************************************************************************/
void ConfigurationPin(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig , uint8_t Configuration , uint8_t PinModeMask)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4611      	mov	r1, r2
 80005cc:	461a      	mov	r2, r3
 80005ce:	460b      	mov	r3, r1
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	4613      	mov	r3, r2
 80005d4:	71bb      	strb	r3, [r7, #6]
	if(Configuration == LOW)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	f040 80bb 	bne.w	8000754 <ConfigurationPin+0x194>
	{
		switch(PinConfig->GPIO_PinNumber)
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	2b08      	cmp	r3, #8
 80005e4:	d051      	beq.n	800068a <ConfigurationPin+0xca>
 80005e6:	2b08      	cmp	r3, #8
 80005e8:	dc06      	bgt.n	80005f8 <ConfigurationPin+0x38>
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d025      	beq.n	800063a <ConfigurationPin+0x7a>
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d037      	beq.n	8000662 <ConfigurationPin+0xa2>
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d00d      	beq.n	8000612 <ConfigurationPin+0x52>
			GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
			break;
		}
	}

}
 80005f6:	e171      	b.n	80008dc <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d06e      	beq.n	80006da <ConfigurationPin+0x11a>
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	dc02      	bgt.n	8000606 <ConfigurationPin+0x46>
 8000600:	2b10      	cmp	r3, #16
 8000602:	d056      	beq.n	80006b2 <ConfigurationPin+0xf2>
}
 8000604:	e16a      	b.n	80008dc <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000606:	2b40      	cmp	r3, #64	; 0x40
 8000608:	d07b      	beq.n	8000702 <ConfigurationPin+0x142>
 800060a:	2b80      	cmp	r3, #128	; 0x80
 800060c:	f000 808d 	beq.w	800072a <ConfigurationPin+0x16a>
}
 8000610:	e164      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF0 = PinModeMask;
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	f003 0303 	and.w	r3, r3, #3
 8000618:	b2d9      	uxtb	r1, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	f361 0383 	bfi	r3, r1, #2, #2
 8000622:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE0 = PinConfig->GPIO_OUTPUT_SPEED;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	78db      	ldrb	r3, [r3, #3]
 8000628:	f003 0303 	and.w	r3, r3, #3
 800062c:	b2d9      	uxtb	r1, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	6813      	ldr	r3, [r2, #0]
 8000632:	f361 0301 	bfi	r3, r1, #0, #2
 8000636:	6013      	str	r3, [r2, #0]
			break;
 8000638:	e150      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF1 = PinModeMask;
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	b2d9      	uxtb	r1, r3
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	6813      	ldr	r3, [r2, #0]
 8000646:	f361 1387 	bfi	r3, r1, #6, #2
 800064a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE1 = PinConfig->GPIO_OUTPUT_SPEED;
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	f003 0303 	and.w	r3, r3, #3
 8000654:	b2d9      	uxtb	r1, r3
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	6813      	ldr	r3, [r2, #0]
 800065a:	f361 1305 	bfi	r3, r1, #4, #2
 800065e:	6013      	str	r3, [r2, #0]
			break;
 8000660:	e13c      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF2 = PinModeMask;
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	f003 0303 	and.w	r3, r3, #3
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	6813      	ldr	r3, [r2, #0]
 800066e:	f361 238b 	bfi	r3, r1, #10, #2
 8000672:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE2 = PinConfig->GPIO_OUTPUT_SPEED;
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	f003 0303 	and.w	r3, r3, #3
 800067c:	b2d9      	uxtb	r1, r3
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	6813      	ldr	r3, [r2, #0]
 8000682:	f361 2309 	bfi	r3, r1, #8, #2
 8000686:	6013      	str	r3, [r2, #0]
			break;
 8000688:	e128      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF3 = PinModeMask;
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	f003 0303 	and.w	r3, r3, #3
 8000690:	b2d9      	uxtb	r1, r3
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	f361 338f 	bfi	r3, r1, #14, #2
 800069a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE3 = PinConfig->GPIO_OUTPUT_SPEED;
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	b2d9      	uxtb	r1, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	6813      	ldr	r3, [r2, #0]
 80006aa:	f361 330d 	bfi	r3, r1, #12, #2
 80006ae:	6013      	str	r3, [r2, #0]
			break;
 80006b0:	e114      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF4 = PinModeMask;
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	f003 0303 	and.w	r3, r3, #3
 80006b8:	b2d9      	uxtb	r1, r3
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	6813      	ldr	r3, [r2, #0]
 80006be:	f361 4393 	bfi	r3, r1, #18, #2
 80006c2:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE4 = PinConfig->GPIO_OUTPUT_SPEED;
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	f003 0303 	and.w	r3, r3, #3
 80006cc:	b2d9      	uxtb	r1, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	6813      	ldr	r3, [r2, #0]
 80006d2:	f361 4311 	bfi	r3, r1, #16, #2
 80006d6:	6013      	str	r3, [r2, #0]
			break;
 80006d8:	e100      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF5 = PinModeMask;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	f003 0303 	and.w	r3, r3, #3
 80006e0:	b2d9      	uxtb	r1, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	6813      	ldr	r3, [r2, #0]
 80006e6:	f361 5397 	bfi	r3, r1, #22, #2
 80006ea:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE5 = PinConfig->GPIO_OUTPUT_SPEED;
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	78db      	ldrb	r3, [r3, #3]
 80006f0:	f003 0303 	and.w	r3, r3, #3
 80006f4:	b2d9      	uxtb	r1, r3
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	6813      	ldr	r3, [r2, #0]
 80006fa:	f361 5315 	bfi	r3, r1, #20, #2
 80006fe:	6013      	str	r3, [r2, #0]
			break;
 8000700:	e0ec      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF6 = PinModeMask;
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	b2d9      	uxtb	r1, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	6813      	ldr	r3, [r2, #0]
 800070e:	f361 639b 	bfi	r3, r1, #26, #2
 8000712:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE6 = PinConfig->GPIO_OUTPUT_SPEED;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	78db      	ldrb	r3, [r3, #3]
 8000718:	f003 0303 	and.w	r3, r3, #3
 800071c:	b2d9      	uxtb	r1, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	6813      	ldr	r3, [r2, #0]
 8000722:	f361 6319 	bfi	r3, r1, #24, #2
 8000726:	6013      	str	r3, [r2, #0]
			break;
 8000728:	e0d8      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF7 = PinModeMask;
 800072a:	79bb      	ldrb	r3, [r7, #6]
 800072c:	f003 0303 	and.w	r3, r3, #3
 8000730:	b2d9      	uxtb	r1, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	f361 739f 	bfi	r3, r1, #30, #2
 800073a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE7 = PinConfig->GPIO_OUTPUT_SPEED;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	b2d9      	uxtb	r1, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	6813      	ldr	r3, [r2, #0]
 800074a:	f361 731d 	bfi	r3, r1, #28, #2
 800074e:	6013      	str	r3, [r2, #0]
			break;
 8000750:	bf00      	nop
 8000752:	e0c3      	b.n	80008dc <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075c:	d05a      	beq.n	8000814 <ConfigurationPin+0x254>
 800075e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000762:	dc09      	bgt.n	8000778 <ConfigurationPin+0x1b8>
 8000764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000768:	d02c      	beq.n	80007c4 <ConfigurationPin+0x204>
 800076a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800076e:	d03d      	beq.n	80007ec <ConfigurationPin+0x22c>
 8000770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000774:	d012      	beq.n	800079c <ConfigurationPin+0x1dc>
}
 8000776:	e0b1      	b.n	80008dc <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077c:	d072      	beq.n	8000864 <ConfigurationPin+0x2a4>
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	dc03      	bgt.n	800078c <ConfigurationPin+0x1cc>
 8000784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000788:	d058      	beq.n	800083c <ConfigurationPin+0x27c>
}
 800078a:	e0a7      	b.n	80008dc <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 800078c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000790:	d07c      	beq.n	800088c <ConfigurationPin+0x2cc>
 8000792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000796:	f000 808d 	beq.w	80008b4 <ConfigurationPin+0x2f4>
}
 800079a:	e09f      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF8 = PinModeMask;
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	b2d9      	uxtb	r1, r3
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	6853      	ldr	r3, [r2, #4]
 80007a8:	f361 0383 	bfi	r3, r1, #2, #2
 80007ac:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE8 = PinConfig->GPIO_OUTPUT_SPEED;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	78db      	ldrb	r3, [r3, #3]
 80007b2:	f003 0303 	and.w	r3, r3, #3
 80007b6:	b2d9      	uxtb	r1, r3
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	6853      	ldr	r3, [r2, #4]
 80007bc:	f361 0301 	bfi	r3, r1, #0, #2
 80007c0:	6053      	str	r3, [r2, #4]
			break;
 80007c2:	e08b      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF9 = PinModeMask;
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	b2d9      	uxtb	r1, r3
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	6853      	ldr	r3, [r2, #4]
 80007d0:	f361 1387 	bfi	r3, r1, #6, #2
 80007d4:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE9 = PinConfig->GPIO_OUTPUT_SPEED;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	78db      	ldrb	r3, [r3, #3]
 80007da:	f003 0303 	and.w	r3, r3, #3
 80007de:	b2d9      	uxtb	r1, r3
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	6853      	ldr	r3, [r2, #4]
 80007e4:	f361 1305 	bfi	r3, r1, #4, #2
 80007e8:	6053      	str	r3, [r2, #4]
			break;
 80007ea:	e077      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF10 = PinModeMask;
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	f003 0303 	and.w	r3, r3, #3
 80007f2:	b2d9      	uxtb	r1, r3
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	6853      	ldr	r3, [r2, #4]
 80007f8:	f361 238b 	bfi	r3, r1, #10, #2
 80007fc:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE10 = PinConfig->GPIO_OUTPUT_SPEED;
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	78db      	ldrb	r3, [r3, #3]
 8000802:	f003 0303 	and.w	r3, r3, #3
 8000806:	b2d9      	uxtb	r1, r3
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	6853      	ldr	r3, [r2, #4]
 800080c:	f361 2309 	bfi	r3, r1, #8, #2
 8000810:	6053      	str	r3, [r2, #4]
			break;
 8000812:	e063      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF11 = PinModeMask;
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	f003 0303 	and.w	r3, r3, #3
 800081a:	b2d9      	uxtb	r1, r3
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	6853      	ldr	r3, [r2, #4]
 8000820:	f361 338f 	bfi	r3, r1, #14, #2
 8000824:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE11 = PinConfig->GPIO_OUTPUT_SPEED;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	78db      	ldrb	r3, [r3, #3]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	b2d9      	uxtb	r1, r3
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	6853      	ldr	r3, [r2, #4]
 8000834:	f361 330d 	bfi	r3, r1, #12, #2
 8000838:	6053      	str	r3, [r2, #4]
			break;
 800083a:	e04f      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF12 = PinModeMask;
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	f003 0303 	and.w	r3, r3, #3
 8000842:	b2d9      	uxtb	r1, r3
 8000844:	68fa      	ldr	r2, [r7, #12]
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f361 4393 	bfi	r3, r1, #18, #2
 800084c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE12 = PinConfig->GPIO_OUTPUT_SPEED;
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	f003 0303 	and.w	r3, r3, #3
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	6853      	ldr	r3, [r2, #4]
 800085c:	f361 4311 	bfi	r3, r1, #16, #2
 8000860:	6053      	str	r3, [r2, #4]
			break;
 8000862:	e03b      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF13 = PinModeMask;
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	b2d9      	uxtb	r1, r3
 800086c:	68fa      	ldr	r2, [r7, #12]
 800086e:	6853      	ldr	r3, [r2, #4]
 8000870:	f361 5397 	bfi	r3, r1, #22, #2
 8000874:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE13 = PinConfig->GPIO_OUTPUT_SPEED;
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	78db      	ldrb	r3, [r3, #3]
 800087a:	f003 0303 	and.w	r3, r3, #3
 800087e:	b2d9      	uxtb	r1, r3
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	6853      	ldr	r3, [r2, #4]
 8000884:	f361 5315 	bfi	r3, r1, #20, #2
 8000888:	6053      	str	r3, [r2, #4]
			break;
 800088a:	e027      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF14 = PinModeMask;
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	6853      	ldr	r3, [r2, #4]
 8000898:	f361 639b 	bfi	r3, r1, #26, #2
 800089c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE14 = PinConfig->GPIO_OUTPUT_SPEED;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	78db      	ldrb	r3, [r3, #3]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	b2d9      	uxtb	r1, r3
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	6853      	ldr	r3, [r2, #4]
 80008ac:	f361 6319 	bfi	r3, r1, #24, #2
 80008b0:	6053      	str	r3, [r2, #4]
			break;
 80008b2:	e013      	b.n	80008dc <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF15 = PinModeMask;
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	b2d9      	uxtb	r1, r3
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	6853      	ldr	r3, [r2, #4]
 80008c0:	f361 739f 	bfi	r3, r1, #30, #2
 80008c4:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	78db      	ldrb	r3, [r3, #3]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	b2d9      	uxtb	r1, r3
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	6853      	ldr	r3, [r2, #4]
 80008d4:	f361 731d 	bfi	r3, r1, #28, #2
 80008d8:	6053      	str	r3, [r2, #4]
			break;
 80008da:	bf00      	nop
}
 80008dc:	bf00      	nop
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <MCAL_GPIO_Init>:
 * Note              -STM32F103C6 MCU has GPIO A,B,C,D and E Modules but LQFP4
 *                    package has only GPIO A,B and part of C AND D exported as
 *                    external PINs from the MCU.
 */
void MCAL_GPIO_Init(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) (x=A..G) configure pin 0..7
	// Port configuration register high (GPIOx_CRH) (x=A..G) configure pin 8..15
	volatile uint8_t Configuration = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? LOW : HIGH;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2bff      	cmp	r3, #255	; 0xff
 80008f8:	bf8c      	ite	hi
 80008fa:	2301      	movhi	r3, #1
 80008fc:	2300      	movls	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	73fb      	strb	r3, [r7, #15]

	switch(PinConfig->GPIO_MODE)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	2b08      	cmp	r3, #8
 8000908:	d863      	bhi.n	80009d2 <MCAL_GPIO_Init+0xea>
 800090a:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <MCAL_GPIO_Init+0x28>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	08000935 	.word	0x08000935
 8000914:	08000945 	.word	0x08000945
 8000918:	08000955 	.word	0x08000955
 800091c:	08000973 	.word	0x08000973
 8000920:	08000983 	.word	0x08000983
 8000924:	08000993 	.word	0x08000993
 8000928:	080009a3 	.word	0x080009a3
 800092c:	080009b3 	.word	0x080009b3
 8000930:	080009c3 	.word	0x080009c3
	{
	case GPIO_MODE_ANALOG :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_ANALOG_MASK );
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	2300      	movs	r3, #0
 800093a:	6839      	ldr	r1, [r7, #0]
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fe3f 	bl	80005c0 <ConfigurationPin>
		break;
 8000942:	e046      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_FLO :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_FLO_MASK );
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	2301      	movs	r3, #1
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fe37 	bl	80005c0 <ConfigurationPin>
		break;
 8000952:	e03e      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_PU :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_PU_MASK );
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	2302      	movs	r3, #2
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe2f 	bl	80005c0 <ConfigurationPin>
		//Input pull-up Table 20. Port bit configuration table
		GPIOx->ODR.ODR |= PinConfig->GPIO_PinNumber;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	8812      	ldrh	r2, [r2, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	60da      	str	r2, [r3, #12]
		break;
 8000970:	e02f      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_PD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_PD_MASK );
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	2302      	movs	r3, #2
 8000978:	6839      	ldr	r1, [r7, #0]
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fe20 	bl	80005c0 <ConfigurationPin>
		break;
 8000980:	e027      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_pp :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_pp_MASK );
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	2300      	movs	r3, #0
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fe18 	bl	80005c0 <ConfigurationPin>
		break;
 8000990:	e01f      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_OD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_OD_MASK );
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	2301      	movs	r3, #1
 8000998:	6839      	ldr	r1, [r7, #0]
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fe10 	bl	80005c0 <ConfigurationPin>
		break;
 80009a0:	e017      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_AF_PP :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_AF_PP_MASK );
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	2302      	movs	r3, #2
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fe08 	bl	80005c0 <ConfigurationPin>
		break;
 80009b0:	e00f      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_AF_OD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_AF_OD_MASK );
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	2303      	movs	r3, #3
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fe00 	bl	80005c0 <ConfigurationPin>
		break;
 80009c0:	e007      	b.n	80009d2 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Iuput_AF :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Iuput_AF_MASK );
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	2301      	movs	r3, #1
 80009c8:	6839      	ldr	r1, [r7, #0]
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fdf8 	bl	80005c0 <ConfigurationPin>
		break;
 80009d0:	bf00      	nop
	}

}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop

080009dc <I2C_Get_EventFlag>:

/*******************************************************************************
                                  Generic APIs
*******************************************************************************/
uint8_t I2C_Get_EventFlag(I2C_t* I2Cx, Status_t Flag)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	switch(Flag){
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	2b08      	cmp	r3, #8
 80009ec:	f200 808f 	bhi.w	8000b0e <I2C_Get_EventFlag+0x132>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <I2C_Get_EventFlag+0x1c>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a1d 	.word	0x08000a1d
 80009fc:	08000a29 	.word	0x08000a29
 8000a00:	08000a35 	.word	0x08000a35
 8000a04:	08000a4d 	.word	0x08000a4d
 8000a08:	08000a59 	.word	0x08000a59
 8000a0c:	08000a9b 	.word	0x08000a9b
 8000a10:	08000a41 	.word	0x08000a41
 8000a14:	08000acf 	.word	0x08000acf
 8000a18:	08000adb 	.word	0x08000adb
	case BUS_BUSY: return  I2Cx->SR2.BUSY ;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	e073      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV5  :    return  I2Cx->SR1.SB   ;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	e06d      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV6  :    return  I2Cx->SR1.ADDR ;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	695b      	ldr	r3, [r3, #20]
 8000a38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	e067      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV9  :    return  I2Cx->SR1.ADD10;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	e061      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV8  :    return  I2Cx->SR1.TxE  ;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	e05b      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV8_1:    return (I2Cx->SR1.TxE  && I2Cx->SR2.MSL   &&
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a60:	b2db      	uxtb	r3, r3
						   I2Cx->SR2.BUSY && I2Cx->SR2.TRA   );
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d016      	beq.n	8000a94 <I2C_Get_EventFlag+0xb8>
	case EV8_1:    return (I2Cx->SR1.TxE  && I2Cx->SR2.MSL   &&
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00f      	beq.n	8000a94 <I2C_Get_EventFlag+0xb8>
						   I2Cx->SR2.BUSY && I2Cx->SR2.TRA   );
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a7c:	b2db      	uxtb	r3, r3
	case EV8_1:    return (I2Cx->SR1.TxE  && I2Cx->SR2.MSL   &&
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <I2C_Get_EventFlag+0xb8>
						   I2Cx->SR2.BUSY && I2Cx->SR2.TRA   );
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <I2C_Get_EventFlag+0xb8>
 8000a90:	2301      	movs	r3, #1
 8000a92:	e000      	b.n	8000a96 <I2C_Get_EventFlag+0xba>
 8000a94:	2300      	movs	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	e03a      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV8_2:	   return (I2Cx->SR1.TxE  && I2Cx->SR1.STOPF &&
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d00f      	beq.n	8000ac8 <I2C_Get_EventFlag+0xec>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <I2C_Get_EventFlag+0xec>
			               I2Cx->SR1.BTF  );
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000abe:	b2db      	uxtb	r3, r3
	case EV8_2:	   return (I2Cx->SR1.TxE  && I2Cx->SR1.STOPF &&
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <I2C_Get_EventFlag+0xec>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <I2C_Get_EventFlag+0xee>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	e020      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV7  :    return  I2Cx->SR1.RxNE  ;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	e01a      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	case EV7_1:    return (I2Cx->SR1.RxNE && I2Cx->SR1.STOPF &&
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00f      	beq.n	8000b08 <I2C_Get_EventFlag+0x12c>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d008      	beq.n	8000b08 <I2C_Get_EventFlag+0x12c>
			               I2Cx->CR1.ACK  );
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8000afe:	b2db      	uxtb	r3, r3
	case EV7_1:    return (I2Cx->SR1.RxNE && I2Cx->SR1.STOPF &&
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <I2C_Get_EventFlag+0x12c>
 8000b04:	2301      	movs	r3, #1
 8000b06:	e000      	b.n	8000b0a <I2C_Get_EventFlag+0x12e>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	e000      	b.n	8000b10 <I2C_Get_EventFlag+0x134>
	}
	return DONE;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <I2C_Generate_StartCondition>:

void I2C_Generate_StartCondition(I2C_t* I2Cx, START_Condition_t Start)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	70fb      	strb	r3, [r7, #3]
	// Check the type of start (Start enable or disable or Repeated Start)
	if (Start == START_DISABLE) { I2Cx->CR1.START = FALSE; }
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <I2C_Generate_StartCondition+0x1c>
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6813      	ldr	r3, [r2, #0]
 8000b32:	f36f 2308 	bfc	r3, #8, #1
 8000b36:	6013      	str	r3, [r2, #0]
	if (Start == START_ENABLE ) { while (I2C_Get_EventFlag(I2Cx, BUS_BUSY)); }
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d107      	bne.n	8000b4e <I2C_Generate_StartCondition+0x32>
 8000b3e:	bf00      	nop
 8000b40:	2100      	movs	r1, #0
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff4a 	bl	80009dc <I2C_Get_EventFlag>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f8      	bne.n	8000b40 <I2C_Generate_StartCondition+0x24>
	if (Start != START_DISABLE) { I2Cx->CR1.START = TRUE; }
 8000b4e:	78fb      	ldrb	r3, [r7, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <I2C_Generate_StartCondition+0x42>
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6813      	ldr	r3, [r2, #0]
 8000b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5c:	6013      	str	r3, [r2, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <I2C_Send_Address>:

void I2C_Send_Address(I2C_t* I2Cx, uint16_t Device_Address,I2C_Direction_t Direction)
{
 8000b68:	b4b0      	push	{r4, r5, r7}
 8000b6a:	b08f      	sub	sp, #60	; 0x3c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
	I2C_Config_t* I2CxConfig = NULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
	*I2CxConfig = (I2C_Config_t)((I2Cx == I2C1)? Global_I2C_Config[I2C1_Index] : Global_I2C_Config[I2C2_Index]);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <I2C_Send_Address+0xb4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d10c      	bne.n	8000b9e <I2C_Send_Address+0x36>
 8000b84:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <I2C_Send_Address+0xb8>)
 8000b86:	f107 0408 	add.w	r4, r7, #8
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000b9c:	e00c      	b.n	8000bb8 <I2C_Send_Address+0x50>
 8000b9e:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <I2C_Send_Address+0xb8>)
 8000ba0:	f107 0408 	add.w	r4, r7, #8
 8000ba4:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8000ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	461d      	mov	r5, r3
 8000bbc:	f107 0408 	add.w	r4, r7, #8
 8000bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000bcc:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	if (I2CxConfig->Slave_Address.Slave_Address_Mode == I2C_SLAVE_ADDRESS_MODE_7_BIT)
 8000bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d11b      	bne.n	8000c10 <I2C_Send_Address+0xa8>
	{
		if      (Direction == READ ) { I2Cx->DR.DR = ((Device_Address << 1) | 0X1); }
 8000bd8:	787b      	ldrb	r3, [r7, #1]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d10c      	bne.n	8000bf8 <I2C_Send_Address+0x90>
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	b2d9      	uxtb	r1, r3
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6913      	ldr	r3, [r2, #16]
 8000bf0:	f361 0307 	bfi	r3, r1, #0, #8
 8000bf4:	6113      	str	r3, [r2, #16]
		else if (Direction == WRITE) { I2Cx->DR.DR =  (Device_Address << 1); }
		else                         { /*  Misra  */ }
	}
	else { /* Fast Mode not supported */ }
}
 8000bf6:	e00b      	b.n	8000c10 <I2C_Send_Address+0xa8>
		else if (Direction == WRITE) { I2Cx->DR.DR =  (Device_Address << 1); }
 8000bf8:	787b      	ldrb	r3, [r7, #1]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d108      	bne.n	8000c10 <I2C_Send_Address+0xa8>
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b2d9      	uxtb	r1, r3
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	6913      	ldr	r3, [r2, #16]
 8000c0a:	f361 0307 	bfi	r3, r1, #0, #8
 8000c0e:	6113      	str	r3, [r2, #16]
}
 8000c10:	bf00      	nop
 8000c12:	373c      	adds	r7, #60	; 0x3c
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bcb0      	pop	{r4, r5, r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	2000001c 	.word	0x2000001c

08000c24 <I2C_Generate_StopCondition>:

void I2C_Generate_StopCondition(I2C_t* I2Cx, STOP_Condition_t Stop)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	if      (Stop == STOP_DISABLE) { I2Cx->CR1.STOP = FALSE; }
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d105      	bne.n	8000c42 <I2C_Generate_StopCondition+0x1e>
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	6813      	ldr	r3, [r2, #0]
 8000c3a:	f36f 2349 	bfc	r3, #9, #1
 8000c3e:	6013      	str	r3, [r2, #0]
	else if (Stop == STOP_ENABLE)  { I2Cx->CR1.STOP = TRUE ; }
	else                           { /*  Misra  */ }
}
 8000c40:	e007      	b.n	8000c52 <I2C_Generate_StopCondition+0x2e>
	else if (Stop == STOP_ENABLE)  { I2Cx->CR1.STOP = TRUE ; }
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d104      	bne.n	8000c52 <I2C_Generate_StopCondition+0x2e>
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6813      	ldr	r3, [r2, #0]
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <I2C_Generate_ACK>:

void I2C_Generate_ACK(I2C_t* I2Cx, ACK_t ACK)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	if      (ACK == ACK_DISABLE) { I2Cx->CR1.ACK = FALSE; }
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d105      	bne.n	8000c7a <I2C_Generate_ACK+0x1e>
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	6813      	ldr	r3, [r2, #0]
 8000c72:	f36f 238a 	bfc	r3, #10, #1
 8000c76:	6013      	str	r3, [r2, #0]
	else if (ACK == ACK_ENABLE)  { I2Cx->CR1.ACK = TRUE ; }
	else                         { /*  Misra  */ }
}
 8000c78:	e007      	b.n	8000c8a <I2C_Generate_ACK+0x2e>
	else if (ACK == ACK_ENABLE)  { I2Cx->CR1.ACK = TRUE ; }
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d104      	bne.n	8000c8a <I2C_Generate_ACK+0x2e>
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	6813      	ldr	r3, [r2, #0]
 8000c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <MCAL_I2C_Init>:
*
* Note              -Supported for I2C SM mode only.
* 					-Support only 7-bit address mode.
*/
void MCAL_I2C_Init  (I2C_t *I2Cx, I2C_Config_t *I2C_Config)
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	uint32_t PCLK = MCAL_RCC_GetPCLK1Freq();
 8000c9e:	f000 fb67 	bl	8001370 <MCAL_RCC_GetPCLK1Freq>
 8000ca2:	60f8      	str	r0, [r7, #12]

	// 1. Enable the RCC Clock
	if      (I2Cx == I2C1){ RCC->APB1ENR.I2C1EN = TRUE; Global_I2C_Config[I2C1_Index] = *I2C_Config; }
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a81      	ldr	r2, [pc, #516]	; (8000eac <MCAL_I2C_Init+0x218>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d111      	bne.n	8000cd0 <MCAL_I2C_Init+0x3c>
 8000cac:	4a80      	ldr	r2, [pc, #512]	; (8000eb0 <MCAL_I2C_Init+0x21c>)
 8000cae:	69d3      	ldr	r3, [r2, #28]
 8000cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4a7f      	ldr	r2, [pc, #508]	; (8000eb4 <MCAL_I2C_Init+0x220>)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	4614      	mov	r4, r2
 8000cbc:	461d      	mov	r5, r3
 8000cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000cce:	e015      	b.n	8000cfc <MCAL_I2C_Init+0x68>
	else if (I2Cx == I2C2){ RCC->APB1ENR.I2C2EN = TRUE; Global_I2C_Config[I2C2_Index] = *I2C_Config; }
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a79      	ldr	r2, [pc, #484]	; (8000eb8 <MCAL_I2C_Init+0x224>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d111      	bne.n	8000cfc <MCAL_I2C_Init+0x68>
 8000cd8:	4a75      	ldr	r2, [pc, #468]	; (8000eb0 <MCAL_I2C_Init+0x21c>)
 8000cda:	69d3      	ldr	r3, [r2, #28]
 8000cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b74      	ldr	r3, [pc, #464]	; (8000eb4 <MCAL_I2C_Init+0x220>)
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000cea:	4615      	mov	r5, r2
 8000cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	else                  { /*  Misra  */ }

	// 2. Set I2C Mode
	if (I2C_Config->Mode == I2C_MODE_I2C_MODE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f040 8094 	bne.w	8000e2e <MCAL_I2C_Init+0x19a>
	{
		/****************** 1. Initialize Timing ******************/
		// 1. Set Peripheral clock frequency
		I2Cx->CR2.FREQ = 0b00000;  //Clear frequencys' bits
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	6853      	ldr	r3, [r2, #4]
 8000d0a:	f36f 0305 	bfc	r3, #0, #6
 8000d0e:	6053      	str	r3, [r2, #4]
		I2Cx->CR2.FREQ = GET_I2CFrequancy(PCLK);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a6a      	ldr	r2, [pc, #424]	; (8000ebc <MCAL_I2C_Init+0x228>)
 8000d14:	fba2 2303 	umull	r2, r3, r2, r3
 8000d18:	0c9b      	lsrs	r3, r3, #18
 8000d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d1e:	b2d9      	uxtb	r1, r3
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6853      	ldr	r3, [r2, #4]
 8000d24:	f361 0305 	bfi	r3, r1, #0, #6
 8000d28:	6053      	str	r3, [r2, #4]

		/*********** Configure Clock control register *************/
		// 2. Disable I2C peripheral to configure time
		I2Cx->CR1.PE = FALSE;
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6813      	ldr	r3, [r2, #0]
 8000d2e:	f36f 0300 	bfc	r3, #0, #1
 8000d32:	6013      	str	r3, [r2, #0]

		// 3. Configure the speed in the standard mode / Fast Mode
		if ((I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_50KHZ)  ||
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d004      	beq.n	8000d4a <MCAL_I2C_Init+0xb6>
			(I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_100KHZ))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
		if ((I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_50KHZ)  ||
 8000d44:	4a5e      	ldr	r2, [pc, #376]	; (8000ec0 <MCAL_I2C_Init+0x22c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d122      	bne.n	8000d90 <MCAL_I2C_Init+0xfc>
		{
			// 4. Enable standard mode
			I2Cx->CR1.SMBUS = FALSE;
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6813      	ldr	r3, [r2, #0]
 8000d4e:	f36f 0341 	bfc	r3, #1, #1
 8000d52:	6013      	str	r3, [r2, #0]

			// 5. Put the standard mode calculation
			I2Cx->CCR.CCR = GET_CCR(PCLK, I2C_Config->Clock_Speed);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d64:	b299      	uxth	r1, r3
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	69d3      	ldr	r3, [r2, #28]
 8000d6a:	f361 030b 	bfi	r3, r1, #0, #12
 8000d6e:	61d3      	str	r3, [r2, #28]

			/*********** Configure Rise time register *************/
			I2Cx->TRISE.TRISE = GET_I2CFrequancy(PCLK) + 1;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <MCAL_I2C_Init+0x228>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	0c9b      	lsrs	r3, r3, #18
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6a13      	ldr	r3, [r2, #32]
 8000d8a:	f361 0305 	bfi	r3, r1, #0, #6
 8000d8e:	6213      	str	r3, [r2, #32]
		}
		else { /* Fast Mode not supported */ }

		/************* 2. Configure Control register 1 ************/
		// 1. Enable Acknowledge
		I2Cx->CR1.ACK = I2C_Config->ACK_Control;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2d9      	uxtb	r1, r3
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f361 238a 	bfi	r3, r1, #10, #1
 8000da2:	6013      	str	r3, [r2, #0]

		// 2. Enable Clock stretching
		I2Cx->CR1.NOSTRETCH = I2C_Config->Stretch_Mode;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	b2d9      	uxtb	r1, r3
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6813      	ldr	r3, [r2, #0]
 8000db2:	f361 13c7 	bfi	r3, r1, #7, #1
 8000db6:	6013      	str	r3, [r2, #0]

		// 3. Enable General call
		I2Cx->CR1.ENGC = I2C_Config->General_Call;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	b2d9      	uxtb	r1, r3
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6813      	ldr	r3, [r2, #0]
 8000dc6:	f361 1386 	bfi	r3, r1, #6, #1
 8000dca:	6013      	str	r3, [r2, #0]

		// 4. Set I2C Mode
		I2Cx->CR1.SMBUS = I2C_Config->Mode;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	b2d9      	uxtb	r1, r3
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6813      	ldr	r3, [r2, #0]
 8000dda:	f361 0341 	bfi	r3, r1, #1, #1
 8000dde:	6013      	str	r3, [r2, #0]

		/************* 3. Configure Own address register ***********/
		if (I2C_Config->Slave_Address.Dual_Address_Mode == Dual_Address_Mode_Enable)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10e      	bne.n	8000e06 <MCAL_I2C_Init+0x172>
		{
			// 1. Enable the Dual addressing mode
			I2Cx->OAR2.ENDUAL = TRUE;
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68d3      	ldr	r3, [r2, #12]
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	60d3      	str	r3, [r2, #12]

			// 2. Put the input Second address from the user to the register
			I2Cx->OAR2.ADD2 = I2C_Config->Slave_Address.Slave_Second_Address;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	7f5b      	ldrb	r3, [r3, #29]
 8000df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dfa:	b2d9      	uxtb	r1, r3
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68d3      	ldr	r3, [r2, #12]
 8000e00:	f361 0347 	bfi	r3, r1, #1, #7
 8000e04:	60d3      	str	r3, [r2, #12]
		}
		// 3. Put the input First address form the user to the register
		I2Cx->OAR1.ADD1_7 = I2C_Config->Slave_Address.Slave_First_Address;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	7f1b      	ldrb	r3, [r3, #28]
 8000e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e0e:	b2d9      	uxtb	r1, r3
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6893      	ldr	r3, [r2, #8]
 8000e14:	f361 0347 	bfi	r3, r1, #1, #7
 8000e18:	6093      	str	r3, [r2, #8]

		// 4. Configure Addressing mode (slave mode)
		I2Cx->OAR1.ADDMODE = I2C_Config->Slave_Address.Slave_Address_Mode;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	6a1b      	ldr	r3, [r3, #32]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	b2d9      	uxtb	r1, r3
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6893      	ldr	r3, [r2, #8]
 8000e28:	f361 33cf 	bfi	r3, r1, #15, #1
 8000e2c:	6093      	str	r3, [r2, #8]
	}
	else { /* Fast Mode not supported */}

	// 3. Set Interrupt
	if (I2C_Config->IRQ_Enable != I2C_IRQ_DISABLE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d02f      	beq.n	8000e98 <MCAL_I2C_Init+0x204>
	{
		/********************** 1. Enable IRQ **********************/
		I2Cx->CR2.ITBUFEN = TRUE;
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6853      	ldr	r3, [r2, #4]
 8000e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e40:	6053      	str	r3, [r2, #4]
		I2Cx->CR2.ITERREN = TRUE;
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	6853      	ldr	r3, [r2, #4]
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6053      	str	r3, [r2, #4]
		I2Cx->CR2.ITEVTEN = TRUE;
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	6853      	ldr	r3, [r2, #4]
 8000e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e54:	6053      	str	r3, [r2, #4]

		/**** 2. Open the global Interrupt for each peripheral *****/
		if      (I2Cx == I2C1){ NVIC_ISER->NVIC_ISER0 |= (1 <<  I2C1_EV_IRQ);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <MCAL_I2C_Init+0x218>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10c      	bne.n	8000e78 <MCAL_I2C_Init+0x1e4>
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	6013      	str	r3, [r2, #0]
		                        NVIC_ISER->NVIC_ISER1 |= (1 << (I2C1_ER_IRQ - 32));}
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
 8000e76:	e00f      	b.n	8000e98 <MCAL_I2C_Init+0x204>
		else if (I2Cx == I2C2){ NVIC_ISER->NVIC_ISER1 |= (1 << (I2C2_EV_IRQ - 32));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <MCAL_I2C_Init+0x224>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d10b      	bne.n	8000e98 <MCAL_I2C_Init+0x204>
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	6053      	str	r3, [r2, #4]
		                        NVIC_ISER->NVIC_ISER1 |= (1 << (I2C2_ER_IRQ - 32));}
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <MCAL_I2C_Init+0x230>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6053      	str	r3, [r2, #4]
		else                  { /*  Misra  */ }

	}

	// 4. Enable The I2C peripheral
	I2Cx->CR1.PE = TRUE;
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6813      	ldr	r3, [r2, #0]
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6013      	str	r3, [r2, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40005400 	.word	0x40005400
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	2000001c 	.word	0x2000001c
 8000eb8:	40005800 	.word	0x40005800
 8000ebc:	431bde83 	.word	0x431bde83
 8000ec0:	000186a0 	.word	0x000186a0
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <MCAL_I2C_GPIO_Set_Pins>:
*
* Note              -Must open clock for AFIO & GPIO After GPIO Initialization.
*                   -Supported for I2C SM MODE only.
*/
void MCAL_I2C_GPIO_Set_Pins(I2C_t *I2Cx)
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b090      	sub	sp, #64	; 0x40
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t I2C_GPIO_Config;
	uint16_t* GPIOPins = NULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
	I2C_Config_t* I2CxConfig = NULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38

	*I2CxConfig = (I2C_Config_t)((I2Cx == I2C1)? Global_I2C_Config[I2C1_Index] : Global_I2C_Config[I2C2_Index]);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <MCAL_I2C_GPIO_Set_Pins+0xbc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d10c      	bne.n	8000efa <MCAL_I2C_GPIO_Set_Pins+0x32>
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <MCAL_I2C_GPIO_Set_Pins+0xc0>)
 8000ee2:	f107 040c 	add.w	r4, r7, #12
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ef8:	e00c      	b.n	8000f14 <MCAL_I2C_GPIO_Set_Pins+0x4c>
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MCAL_I2C_GPIO_Set_Pins+0xc0>)
 8000efc:	f107 040c 	add.w	r4, r7, #12
 8000f00:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f16:	461d      	mov	r5, r3
 8000f18:	f107 040c 	add.w	r4, r7, #12
 8000f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	GPIOPins   =     (uint16_t*)((I2Cx == I2C1)? (I2C_GPIO_Pins) : (I2C_GPIO_Pins + I2Cx_SDA_Index));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <MCAL_I2C_GPIO_Set_Pins+0xbc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d101      	bne.n	8000f38 <MCAL_I2C_GPIO_Set_Pins+0x70>
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MCAL_I2C_GPIO_Set_Pins+0xc4>)
 8000f36:	e000      	b.n	8000f3a <MCAL_I2C_GPIO_Set_Pins+0x72>
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MCAL_I2C_GPIO_Set_Pins+0xc8>)
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c

	MCAL_RCC_AFIO_EN();
 8000f3c:	f000 f9dc 	bl	80012f8 <MCAL_RCC_AFIO_EN>
	MCAL_RCC_GPIO_EN(GPIOB);
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <MCAL_I2C_GPIO_Set_Pins+0xcc>)
 8000f42:	f000 f99f 	bl	8001284 <MCAL_RCC_GPIO_EN>

	//I2C_GPIO_Pins[x][0] >> I2Cx_SCL
	I2C_GPIO_Config.GPIO_PinNumber    = GPIOPins[I2Cx_SCL_Index];
 8000f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	813b      	strh	r3, [r7, #8]
	I2C_GPIO_Config.GPIO_MODE         = GPIO_MODE_Output_AF_OD;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	72bb      	strb	r3, [r7, #10]
	I2C_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000f50:	2301      	movs	r3, #1
 8000f52:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <MCAL_I2C_GPIO_Set_Pins+0xcc>)
 8000f5c:	f7ff fcc4 	bl	80008e8 <MCAL_GPIO_Init>

	//I2C_GPIO_Pins[x][1] >> I2Cx_SDA
	I2C_GPIO_Config.GPIO_PinNumber    = GPIOPins[I2Cx_SDA_Index];
 8000f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f62:	885b      	ldrh	r3, [r3, #2]
 8000f64:	813b      	strh	r3, [r7, #8]
	I2C_GPIO_Config.GPIO_MODE         = GPIO_MODE_Output_AF_OD;
 8000f66:	2307      	movs	r3, #7
 8000f68:	72bb      	strb	r3, [r7, #10]
	I2C_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	72fb      	strb	r3, [r7, #11]
	MCAL_GPIO_Init(GPIOB, &I2C_GPIO_Config);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MCAL_I2C_GPIO_Set_Pins+0xcc>)
 8000f76:	f7ff fcb7 	bl	80008e8 <MCAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3740      	adds	r7, #64	; 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bdb0      	pop	{r4, r5, r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40005400 	.word	0x40005400
 8000f88:	2000001c 	.word	0x2000001c
 8000f8c:	0800145c 	.word	0x0800145c
 8000f90:	08001460 	.word	0x08001460
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <MCAL_I2C_MASTER_TX>:
* Retval            -None.
*
* Note              -None.
*/
void MCAL_I2C_MASTER_TX(I2C_t* I2Cx, uint16_t Device_Address, uint8_t *pTxData, uint8_t Data_Length, STOP_Condition_t Stop, START_Condition_t Start)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	817b      	strh	r3, [r7, #10]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	727b      	strb	r3, [r7, #9]
	// 1. Generate Start Condition
	I2C_Generate_StartCondition(I2Cx, Start);
 8000fac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff fdb2 	bl	8000b1c <I2C_Generate_StartCondition>

	// 2. Wait for EV5 then writing DR register with Address
	while (!I2C_Get_EventFlag(I2Cx, EV5));
 8000fb8:	bf00      	nop
 8000fba:	2101      	movs	r1, #1
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fd0d 	bl	80009dc <I2C_Get_EventFlag>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f8      	beq.n	8000fba <MCAL_I2C_MASTER_TX+0x22>
	I2C_Send_Address(I2Cx, Device_Address, WRITE);
 8000fc8:	897b      	ldrh	r3, [r7, #10]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fdca 	bl	8000b68 <I2C_Send_Address>

	// 3. Wait for EV6 and EV_1 then writting Data1 in DR
	while (!I2C_Get_EventFlag(I2Cx, EV6));
 8000fd4:	bf00      	nop
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff fcff 	bl	80009dc <I2C_Get_EventFlag>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f8      	beq.n	8000fd6 <MCAL_I2C_MASTER_TX+0x3e>
	while (!I2C_Get_EventFlag(I2Cx, EV8_1));
 8000fe4:	bf00      	nop
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f7ff fcf7 	bl	80009dc <I2C_Get_EventFlag>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f8      	beq.n	8000fe6 <MCAL_I2C_MASTER_TX+0x4e>
		pTxData++;

		// 4. Wait for EV8
		while (!I2C_Get_EventFlag(I2Cx, EV8));
	}*/
	for (uint8_t i = 0 ; i < Data_Length ; ++i)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
 8000ff8:	e014      	b.n	8001024 <MCAL_I2C_MASTER_TX+0x8c>
	{
		I2Cx->DR.DR = *pTxData;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7819      	ldrb	r1, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	6913      	ldr	r3, [r2, #16]
 8001002:	f361 0307 	bfi	r3, r1, #0, #8
 8001006:	6113      	str	r3, [r2, #16]
		pTxData++;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]

		// 4. Wait for EV8
		while (!I2C_Get_EventFlag(I2Cx, EV8));
 800100e:	bf00      	nop
 8001010:	2103      	movs	r1, #3
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f7ff fce2 	bl	80009dc <I2C_Get_EventFlag>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f8      	beq.n	8001010 <MCAL_I2C_MASTER_TX+0x78>
	for (uint8_t i = 0 ; i < Data_Length ; ++i)
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	3301      	adds	r3, #1
 8001022:	75fb      	strb	r3, [r7, #23]
 8001024:	7dfa      	ldrb	r2, [r7, #23]
 8001026:	7a7b      	ldrb	r3, [r7, #9]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3e6      	bcc.n	8000ffa <MCAL_I2C_MASTER_TX+0x62>
	}

	// 5. Generate Stop Condition
	I2C_Generate_StopCondition(I2Cx, Stop);
 800102c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001030:	4619      	mov	r1, r3
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f7ff fdf6 	bl	8000c24 <I2C_Generate_StopCondition>
}
 8001038:	bf00      	nop
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <MCAL_I2C_MASTER_RX>:
* Retval            -None.
*
* Note              -None.
*/
void MCAL_I2C_MASTER_RX(I2C_t* I2Cx, uint16_t Device_Address, uint8_t *pRxData, uint8_t Data_Length, STOP_Condition_t Stop, START_Condition_t Start)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b092      	sub	sp, #72	; 0x48
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	461a      	mov	r2, r3
 800104c:	460b      	mov	r3, r1
 800104e:	817b      	strh	r3, [r7, #10]
 8001050:	4613      	mov	r3, r2
 8001052:	727b      	strb	r3, [r7, #9]
	// 1. Generate Start Condition
	I2C_Generate_StartCondition(I2Cx, Start);
 8001054:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001058:	4619      	mov	r1, r3
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f7ff fd5e 	bl	8000b1c <I2C_Generate_StartCondition>

	// 2. Wait for EV5 then writing DR register with Address
	while (!I2C_Get_EventFlag(I2Cx, EV5));
 8001060:	bf00      	nop
 8001062:	2101      	movs	r1, #1
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff fcb9 	bl	80009dc <I2C_Get_EventFlag>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f8      	beq.n	8001062 <MCAL_I2C_MASTER_RX+0x22>
	I2C_Send_Address(I2Cx, Device_Address, READ);
 8001070:	897b      	ldrh	r3, [r7, #10]
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f7ff fd76 	bl	8000b68 <I2C_Send_Address>

	// 3. Wait for EV6 and EV_1 then writing Data1 in DR
	while (!I2C_Get_EventFlag(I2Cx, EV6));
 800107c:	bf00      	nop
 800107e:	2102      	movs	r1, #2
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff fcab 	bl	80009dc <I2C_Get_EventFlag>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f8      	beq.n	800107e <MCAL_I2C_MASTER_RX+0x3e>

	// 4. Enable Automatic ACK
	I2C_Generate_ACK(I2Cx, ACK_ENABLE);
 800108c:	2101      	movs	r1, #1
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f7ff fde4 	bl	8000c5c <I2C_Generate_ACK>

		*pRxData = I2Cx->DR.DR;
		pRxData++;
	}*/
	// Loop inside the data to read it till length become zero
	for (uint8_t i=Data_Length; i>1 ; i--)
 8001094:	7a7b      	ldrb	r3, [r7, #9]
 8001096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800109a:	e014      	b.n	80010c6 <MCAL_I2C_MASTER_RX+0x86>
	{
		// 5. Wait for EV8
		while (!I2C_Get_EventFlag(I2Cx, EV7));
 800109c:	bf00      	nop
 800109e:	2107      	movs	r1, #7
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff fc9b 	bl	80009dc <I2C_Get_EventFlag>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f8      	beq.n	800109e <MCAL_I2C_MASTER_RX+0x5e>

		*pRxData = I2Cx->DR.DR;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	701a      	strb	r2, [r3, #0]
		pRxData++;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3301      	adds	r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
	for (uint8_t i=Data_Length; i>1 ; i--)
 80010bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010c0:	3b01      	subs	r3, #1
 80010c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80010c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d8e6      	bhi.n	800109c <MCAL_I2C_MASTER_RX+0x5c>
	}

	// 6. Generate NACK
	I2C_Generate_ACK(I2Cx, ACK_DISABLE);
 80010ce:	2100      	movs	r1, #0
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff fdc3 	bl	8000c5c <I2C_Generate_ACK>

	// 5. Generate Stop Condition
	I2C_Generate_StopCondition(I2Cx, Stop);
 80010d6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80010da:	4619      	mov	r1, r3
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fda1 	bl	8000c24 <I2C_Generate_StopCondition>

	// 6. Re-Enable the automatic ACK
	I2C_Config_t* I2CxConfig = NULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	643b      	str	r3, [r7, #64]	; 0x40
	*I2CxConfig = (I2C_Config_t)((I2Cx == I2C1)? Global_I2C_Config[I2C1_Index] : Global_I2C_Config[I2C2_Index]);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <MCAL_I2C_MASTER_RX+0x110>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10c      	bne.n	8001108 <MCAL_I2C_MASTER_RX+0xc8>
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MCAL_I2C_MASTER_RX+0x114>)
 80010f0:	f107 0414 	add.w	r4, r7, #20
 80010f4:	461d      	mov	r5, r3
 80010f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001106:	e00c      	b.n	8001122 <MCAL_I2C_MASTER_RX+0xe2>
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MCAL_I2C_MASTER_RX+0x114>)
 800110a:	f107 0414 	add.w	r4, r7, #20
 800110e:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 8001112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001124:	461d      	mov	r5, r3
 8001126:	f107 0414 	add.w	r4, r7, #20
 800112a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001132:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001136:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	I2C_Generate_ACK(I2Cx, I2CxConfig->ACK_Control);
 800113a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff fd8a 	bl	8000c5c <I2C_Generate_ACK>
}
 8001148:	bf00      	nop
 800114a:	3748      	adds	r7, #72	; 0x48
 800114c:	46bd      	mov	sp, r7
 800114e:	bdb0      	pop	{r4, r5, r7, pc}
 8001150:	40005400 	.word	0x40005400
 8001154:	2000001c 	.word	0x2000001c

08001158 <I2C1_EV_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = I2C1->CR2.ITEVTEN;	    // Event interrupt enable
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f3c3 2340 	ubfx	r3, r3, #9, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	60fb      	str	r3, [r7, #12]
	Temp_2 = I2C1->CR2.ITBUFEN;	    // Buffer interrupt enable
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	60bb      	str	r3, [r7, #8]
	Temp_3 = I2C1->SR1.STOPF;		// Stop detection (slave mode)
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <I2C1_EV_IRQHandler+0x44>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <I2C1_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C1->CR1.CR1 = 0x0000;
 800118e:	4b32      	ldr	r3, [pc, #200]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
		Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <I2C1_EV_IRQHandler+0x104>)
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	2000      	movs	r0, #0
 800119a:	4798      	blx	r3
	}

	/********************************************************************/
	Temp_3 = I2C1->SR1.ADDR;		//ADDR
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	607b      	str	r3, [r7, #4]

	if(Temp_1 && Temp_3)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00d      	beq.n	80011ca <I2C1_EV_IRQHandler+0x72>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00a      	beq.n	80011ca <I2C1_EV_IRQHandler+0x72>
		/* clear ADDR flag
		 * In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set.
		 */

		/* Check master mode or slave mode */
		if(I2C1->SR2.MSL)
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d103      	bne.n	80011ca <I2C1_EV_IRQHandler+0x72>
		{ /* Master mode (Using polling mechanism not interrupt) */ }
		else
		{
			/* Slave mode */
			Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_ADD_MATCHED);
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <I2C1_EV_IRQHandler+0x104>)
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	2001      	movs	r0, #1
 80011c8:	4798      	blx	r3
		}
	}

	/********************************************************************/
	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = I2C1->SR1.TxE;		// TXE
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	607b      	str	r3, [r7, #4]

	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d017      	beq.n	800120c <I2C1_EV_IRQHandler+0xb4>
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d014      	beq.n	800120c <I2C1_EV_IRQHandler+0xb4>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d011      	beq.n	800120c <I2C1_EV_IRQHandler+0xb4>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2.MSL)
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10a      	bne.n	800120c <I2C1_EV_IRQHandler+0xb4>
		{ /* Master mode (Using polling mechanism not interrupt) */ }
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C1->SR2.TRA)		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <I2C1_EV_IRQHandler+0xb4>
			{
				Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_REQ);
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <I2C1_EV_IRQHandler+0x104>)
 8001206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001208:	2002      	movs	r0, #2
 800120a:	4798      	blx	r3
		}
	}

	/********************************************************************/
	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = I2C1->SR1.RxNE;		// RXNE
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	607b      	str	r3, [r7, #4]

	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d017      	beq.n	800124e <I2C1_EV_IRQHandler+0xf6>
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d014      	beq.n	800124e <I2C1_EV_IRQHandler+0xf6>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d011      	beq.n	800124e <I2C1_EV_IRQHandler+0xf6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2.MSL)
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10a      	bne.n	800124e <I2C1_EV_IRQHandler+0xf6>
		{ /* Master mode (Using polling mechanism not interrupt) */ }
		else
		{
			/* Slave mode */
			if(!(I2C1->SR2.TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <I2C1_EV_IRQHandler+0x100>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d103      	bne.n	800124e <I2C1_EV_IRQHandler+0xf6>
			{
				Global_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <I2C1_EV_IRQHandler+0x104>)
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124a:	2003      	movs	r0, #3
 800124c:	4798      	blx	r3
			}
		}
	}
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400
 800125c:	2000001c 	.word	0x2000001c

08001260 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <MCAL_RCC_GPIO_EN>:

/*******************************************************************************
                     APIs Supported by "MCAL RCC DRIVER"
*******************************************************************************/
void MCAL_RCC_GPIO_EN(GPIO_t* GPIOx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if (GPIOx == GPIOA)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <MCAL_RCC_GPIO_EN+0x60>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d105      	bne.n	80012a0 <MCAL_RCC_GPIO_EN+0x1c>
		RCC->APB2ENR.IOPAEN = TRUE;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <MCAL_RCC_GPIO_EN+0x64>)
 8001296:	6993      	ldr	r3, [r2, #24]
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6193      	str	r3, [r2, #24]
	else if (GPIOx == GPIOC)
		RCC->APB2ENR.IOPCEN = TRUE;
	else if (GPIOx == GPIOD)
		RCC->APB2ENR.IOPDEN = TRUE;
	else  { /* Misra */ }
}
 800129e:	e01c      	b.n	80012da <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOB)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MCAL_RCC_GPIO_EN+0x68>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d105      	bne.n	80012b4 <MCAL_RCC_GPIO_EN+0x30>
		RCC->APB2ENR.IOPBEN = TRUE;
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <MCAL_RCC_GPIO_EN+0x64>)
 80012aa:	6993      	ldr	r3, [r2, #24]
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6193      	str	r3, [r2, #24]
}
 80012b2:	e012      	b.n	80012da <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOC)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <MCAL_RCC_GPIO_EN+0x6c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d105      	bne.n	80012c8 <MCAL_RCC_GPIO_EN+0x44>
		RCC->APB2ENR.IOPCEN = TRUE;
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <MCAL_RCC_GPIO_EN+0x64>)
 80012be:	6993      	ldr	r3, [r2, #24]
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6193      	str	r3, [r2, #24]
}
 80012c6:	e008      	b.n	80012da <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOD)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <MCAL_RCC_GPIO_EN+0x70>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d104      	bne.n	80012da <MCAL_RCC_GPIO_EN+0x56>
		RCC->APB2ENR.IOPDEN = TRUE;
 80012d0:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <MCAL_RCC_GPIO_EN+0x64>)
 80012d2:	6993      	ldr	r3, [r2, #24]
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	6193      	str	r3, [r2, #24]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40010800 	.word	0x40010800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000
 80012f4:	40011400 	.word	0x40011400

080012f8 <MCAL_RCC_AFIO_EN>:

void MCAL_RCC_AFIO_EN()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	RCC->APB2ENR.AFIOEN = TRUE;
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <MCAL_RCC_AFIO_EN+0x18>)
 80012fe:	6993      	ldr	r3, [r2, #24]
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6193      	str	r3, [r2, #24]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <MCAL_RCC_GetSYS_CLKFreq>:

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	// Get System clock switch status (SWS)
	switch(RCC->CFGR.SWS){
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <MCAL_RCC_GetSYS_CLKFreq+0x1e>
 8001326:	2b02      	cmp	r3, #2
 8001328:	d005      	beq.n	8001336 <MCAL_RCC_GetSYS_CLKFreq+0x22>
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <MCAL_RCC_GetSYS_CLKFreq+0x26>
		case 0:return HSI_RC_CLK;   //HSI oscillator used as system clock
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8001330:	e004      	b.n	800133c <MCAL_RCC_GetSYS_CLKFreq+0x28>
		case 1:return HSE_CLK;      //HSE oscillator used as system clock
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8001334:	e002      	b.n	800133c <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //HSE user should specify it
		case 2:return 16000000;     //PLL used as system clock
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8001338:	e000      	b.n	800133c <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //PLLCLK and PLLMULL and PLL Source MUX
	}
	return ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40021000 	.word	0x40021000
 8001348:	007a1200 	.word	0x007a1200
 800134c:	00f42400 	.word	0x00f42400

08001350 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	// Get AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> RCC->CFGR.HPRE);
 8001354:	f7ff ffde 	bl	8001314 <MCAL_RCC_GetSYS_CLKFreq>
 8001358:	4602      	mov	r2, r0
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <MCAL_RCC_GetHCLKFreq+0x1c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001362:	b2db      	uxtb	r3, r3
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000

08001370 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	// Get APB1 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE1);
 8001374:	f7ff ffec 	bl	8001350 <MCAL_RCC_GetHCLKFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <MCAL_RCC_GetPCLK1Freq+0x1c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <SPI1_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack();
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <SPI1_IRQHandler+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	4798      	blx	r3
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000074 	.word	0x20000074

080013a4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack();
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <SPI2_IRQHandler+0x10>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4798      	blx	r3
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000074 	.word	0x20000074

080013b8 <USART2_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void USART2_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <USART2_IRQHandler+0x10>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4798      	blx	r3
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000007c 	.word	0x2000007c

080013cc <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <USART1_IRQHandler+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	4798      	blx	r3
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000007c 	.word	0x2000007c

080013e0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <USART3_IRQHandler+0x10>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	4798      	blx	r3
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000007c 	.word	0x2000007c

080013f4 <__libc_init_array>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2500      	movs	r5, #0
 80013f8:	4e0c      	ldr	r6, [pc, #48]	; (800142c <__libc_init_array+0x38>)
 80013fa:	4c0d      	ldr	r4, [pc, #52]	; (8001430 <__libc_init_array+0x3c>)
 80013fc:	1ba4      	subs	r4, r4, r6
 80013fe:	10a4      	asrs	r4, r4, #2
 8001400:	42a5      	cmp	r5, r4
 8001402:	d109      	bne.n	8001418 <__libc_init_array+0x24>
 8001404:	f000 f81a 	bl	800143c <_init>
 8001408:	2500      	movs	r5, #0
 800140a:	4e0a      	ldr	r6, [pc, #40]	; (8001434 <__libc_init_array+0x40>)
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <__libc_init_array+0x44>)
 800140e:	1ba4      	subs	r4, r4, r6
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	42a5      	cmp	r5, r4
 8001414:	d105      	bne.n	8001422 <__libc_init_array+0x2e>
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800141c:	4798      	blx	r3
 800141e:	3501      	adds	r5, #1
 8001420:	e7ee      	b.n	8001400 <__libc_init_array+0xc>
 8001422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001426:	4798      	blx	r3
 8001428:	3501      	adds	r5, #1
 800142a:	e7f2      	b.n	8001412 <__libc_init_array+0x1e>
 800142c:	08001464 	.word	0x08001464
 8001430:	08001464 	.word	0x08001464
 8001434:	08001464 	.word	0x08001464
 8001438:	08001468 	.word	0x08001468

0800143c <_init>:
 800143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143e:	bf00      	nop
 8001440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001442:	bc08      	pop	{r3}
 8001444:	469e      	mov	lr, r3
 8001446:	4770      	bx	lr

08001448 <_fini>:
 8001448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144a:	bf00      	nop
 800144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144e:	bc08      	pop	{r3}
 8001450:	469e      	mov	lr, r3
 8001452:	4770      	bx	lr
