
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ea  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b3  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049b  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000307  00000000  00000000  00001da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 12 01 	call	0x224	; 0x224 <main>
  8a:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:

#include "lcd.h"

void LCD_KICK()
{
	LCD_CTRL &= ~(1<<E_PIN);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_KICK+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_KICK+0x10>
  a2:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |=(1<<E_PIN);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_ISBUSY>:
}

void LCD_ISBUSY()
{
	DataDir_LCD_PORT &= ~(0xFF<<DATA_SHIFT);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL		 |=  (1 << RW_PIN);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 60       	ori	r24, 0x04	; 4
	LCD_CTRL		 &= ~(1 << RS_PIN);
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  ba:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	
	#ifdef FOUR_BIT_MODE
	DataDir_LCD_PORT |=  (0xF0<<DATA_SHIFT);
	#endif
	
	LCD_CTRL		 &= ~(1 << RW_PIN);
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	08 95       	ret

000000c6 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
}

void LCD_WRITE_COMMAND(unsigned char command)
{
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
		LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
		//LCD_ISBUSY();
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	9c 2f       	mov	r25, r28
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	89 2b       	or	r24, r25
  d4:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	89 7f       	andi	r24, 0xF9	; 249
  da:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
  dc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  e0:	87 ea       	ldi	r24, 0xA7	; 167
  e2:	91 e6       	ldi	r25, 0x61	; 97
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_WRITE_COMMAND+0x1e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_WRITE_COMMAND+0x24>
  ea:	00 00       	nop
		
		_delay_ms(100);
		LCD_PORT = (LCD_PORT & 0x0F) | (command << DATA_SHIFT);
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	30 e1       	ldi	r19, 0x10	; 16
  f0:	c3 9f       	mul	r28, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	92 2f       	mov	r25, r18
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	89 2b       	or	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	89 7f       	andi	r24, 0xF9	; 249
 102:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 104:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#endif
		
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
		LCD_CTRL &= ~ (1<<RW_PIN);
		LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	9c 2f       	mov	r25, r28
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	89 2b       	or	r24, r25
 11a:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	82 60       	ori	r24, 0x02	; 2
		LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 124:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
 128:	2b b3       	in	r18, 0x1b	; 27
 12a:	30 e1       	ldi	r19, 0x10	; 16
 12c:	c3 9f       	mul	r28, r19
 12e:	c0 01       	movw	r24, r0
 130:	11 24       	eor	r1, r1
 132:	92 2f       	mov	r25, r18
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 2b       	or	r24, r25
 138:	8b bb       	out	0x1b, r24	; 27
		LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	82 60       	ori	r24, 0x02	; 2
		LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
 13e:	8b 7f       	andi	r24, 0xFB	; 251
 140:	88 bb       	out	0x18, r24	; 24
		LCD_KICK();
 142:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	#endif
}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <LCD_CLEAR_SCREEN>:
	}
}

void LCD_CLEAR_SCREEN()
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
 150:	08 95       	ret

00000152 <LCD_INIT>:
 152:	87 e8       	ldi	r24, 0x87	; 135
 154:	93 e1       	ldi	r25, 0x13	; 19
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_INIT+0x4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_INIT+0xa>
 15c:	00 00       	nop
}

void LCD_INIT()
{
	_delay_ms(20);
	LCD_ISBUSY();
 15e:	0e 94 56 00 	call	0xac	; 0xac <LCD_ISBUSY>
	DataDir_LCD_CTRL |=  ((1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN)); 
 162:	87 b3       	in	r24, 0x17	; 23
 164:	8e 60       	ori	r24, 0x0E	; 14
 166:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL		 &= ~((1 << RW_PIN) | (1 << RS_PIN) | (1 << E_PIN));
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	81 7f       	andi	r24, 0xF1	; 241
 16c:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 16e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
 172:	85 ea       	ldi	r24, 0xA5	; 165
 174:	9e e0       	ldi	r25, 0x0E	; 14
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <LCD_INIT+0x24>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_INIT+0x2a>
 17c:	00 00       	nop
	_delay_ms(15);
	LCD_CLEAR_SCREEN();
 17e:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_CLEAR_SCREEN>
		LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	#endif

	#ifdef FOUR_BIT_MODE
		DataDir_LCD_PORT |=  (0xF0<<DATA_SHIFT);
		LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES_1st_CMD);
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
	#endif
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
 1a0:	08 95       	ret

000001a2 <LCD_GOTO_XY>:
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if (line == 0)
 1a2:	81 11       	cpse	r24, r1
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <LCD_GOTO_XY+0x12>
	{
		if (position < 16 && position >= 0)
 1a6:	60 31       	cpi	r22, 0x10	; 16
 1a8:	68 f4       	brcc	.+26     	; 0x1c4 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	86 0f       	add	r24, r22
 1ae:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
 1b2:	08 95       	ret
		}
	}
	else if (line == 1)
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
 1b8:	60 31       	cpi	r22, 0x10	; 16
 1ba:	20 f4       	brcc	.+8      	; 0x1c4 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 1bc:	80 ec       	ldi	r24, 0xC0	; 192
 1be:	86 0f       	add	r24, r22
 1c0:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
 1c4:	08 95       	ret

000001c6 <LCD_WRITE_STRING>:
		LCD_KICK();
	#endif
}

void LCD_WRITE_STRING(char* string)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
	volatile static char counter = 0;
	while(*string != 0)
 1d0:	21 c0       	rjmp	.+66     	; 0x214 <LCD_WRITE_STRING+0x4e>
	{		
		if(counter == 16)
 1d2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1d6:	80 31       	cpi	r24, 0x10	; 16
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <LCD_WRITE_STRING+0x1c>
		{
			LCD_GOTO_XY(LCD_SECOND_LINE, LCD_FIRST_COLUMN);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_GOTO_XY>
		}
		
		LCD_WRITE_CHAR(*string ++);
 1e2:	8e 01       	movw	r16, r28
 1e4:	0f 5f       	subi	r16, 0xFF	; 255
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	88 81       	ld	r24, Y
 1ea:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_WRITE_CHAR>
		counter++;
 1ee:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
		
		if(counter > 31)
 1f8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1fc:	80 32       	cpi	r24, 0x20	; 32
 1fe:	48 f0       	brcs	.+18     	; 0x212 <LCD_WRITE_STRING+0x4c>
		{
			LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_WRITE_COMMAND>
			LCD_GOTO_XY(LCD_FIRST_LINE, LCD_FIRST_COLUMN);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_GOTO_XY>
			counter = 0 ;
 20e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
		LCD_KICK();
	#endif
}

void LCD_WRITE_STRING(char* string)
{
 212:	e8 01       	movw	r28, r16
	volatile static char counter = 0;
	while(*string != 0)
 214:	88 81       	ld	r24, Y
 216:	81 11       	cpse	r24, r1
 218:	dc cf       	rjmp	.-72     	; 0x1d2 <LCD_WRITE_STRING+0xc>
			LCD_GOTO_XY(LCD_FIRST_LINE, LCD_FIRST_COLUMN);
			counter = 0 ;
		}
		
	}
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <main>:
	for(j = 0 ; j < 255 ; j++);
}

int main(void)
{
	LCD_INIT();
 224:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_INIT>
	LCD_WRITE_STRING("Learn in depth");
 228:	80 e6       	ldi	r24, 0x60	; 96
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_WRITE_STRING>
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0xc>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
