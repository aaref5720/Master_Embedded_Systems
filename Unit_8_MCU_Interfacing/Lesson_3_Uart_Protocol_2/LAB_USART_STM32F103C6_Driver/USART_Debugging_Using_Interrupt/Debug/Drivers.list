
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f18  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001048  08001050  00011050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001048  08001048  00011050  2**0
                  CONTENTS
  4 .ARM          00000000  08001048  08001048  00011050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001048  08001050  00011050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001048  08001048  00011048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08001050  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001050  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac15  00000000  00000000  00011079  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000db1  00000000  00000000  0001bc8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b0c  00000000  00000000  0001ca3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001f8  00000000  00000000  0001d550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000190  00000000  00000000  0001d748  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000024d7  00000000  00000000  0001d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000270f  00000000  00000000  0001fdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a297  00000000  00000000  000224be  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c755  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f0  00000000  00000000  0002c7d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001030 	.word	0x08001030

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001030 	.word	0x08001030

08000170 <USART_Debugging_Using_Polling>:

/*******************************************************************************
                                  APP Function
*******************************************************************************/
void USART_Debugging_Using_Polling(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	// Configuration of USART1
	USART_Config_t UART1_Config;
	UART1_Config.BaudRate       = UART_BaudRate_115200;
 8000176:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800017a:	60bb      	str	r3, [r7, #8]
	UART1_Config.HW_FlowControl = UART_HW_FlowControl_NONE;
 800017c:	2300      	movs	r3, #0
 800017e:	73fb      	strb	r3, [r7, #15]
	UART1_Config.IRQ_Enable     = UART_IRQ_Enable_NONE;
 8000180:	2300      	movs	r3, #0
 8000182:	743b      	strb	r3, [r7, #16]
	UART1_Config.P_IRQ_CallBack = NULL;
 8000184:	2300      	movs	r3, #0
 8000186:	617b      	str	r3, [r7, #20]
	UART1_Config.Parity         = UART_Parity_Disable;
 8000188:	2300      	movs	r3, #0
 800018a:	737b      	strb	r3, [r7, #13]
	UART1_Config.Payload_Length = UART_Payload_Length_8B;
 800018c:	2300      	movs	r3, #0
 800018e:	733b      	strb	r3, [r7, #12]
	UART1_Config.StopBits       = UART_StopBits_1;
 8000190:	2300      	movs	r3, #0
 8000192:	73bb      	strb	r3, [r7, #14]
	UART1_Config.USART_Mode     = UART_Mode_TX_RX;
 8000194:	2302      	movs	r3, #2
 8000196:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &UART1_Config);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	4808      	ldr	r0, [pc, #32]	; (80001c0 <USART_Debugging_Using_Polling+0x50>)
 800019e:	f000 fc03 	bl	80009a8 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001a2:	4807      	ldr	r0, [pc, #28]	; (80001c0 <USART_Debugging_Using_Polling+0x50>)
 80001a4:	f000 fd42 	bl	8000c2c <MCAL_UART_GPIO_Set_Pins>


	while(1)
	{
		MCAL_UART_ReceiveData(USART1, &data, Polling_Mechanism);
 80001a8:	2201      	movs	r2, #1
 80001aa:	4906      	ldr	r1, [pc, #24]	; (80001c4 <USART_Debugging_Using_Polling+0x54>)
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <USART_Debugging_Using_Polling+0x50>)
 80001ae:	f000 fe95 	bl	8000edc <MCAL_UART_ReceiveData>
		MCAL_UART_SendData   (USART1, &data, Polling_Mechanism);
 80001b2:	2201      	movs	r2, #1
 80001b4:	4903      	ldr	r1, [pc, #12]	; (80001c4 <USART_Debugging_Using_Polling+0x54>)
 80001b6:	4802      	ldr	r0, [pc, #8]	; (80001c0 <USART_Debugging_Using_Polling+0x50>)
 80001b8:	f000 fe3e 	bl	8000e38 <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &data, Polling_Mechanism);
 80001bc:	e7f4      	b.n	80001a8 <USART_Debugging_Using_Polling+0x38>
 80001be:	bf00      	nop
 80001c0:	40013800 	.word	0x40013800
 80001c4:	20000028 	.word	0x20000028

080001c8 <main>:
                                     Includes
*******************************************************************************/
#include "USART_Debugging_Using_Polling.h"

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	  USART_Debugging_Using_Polling();
 80001cc:	f7ff ffd0 	bl	8000170 <USART_Debugging_Using_Polling>
 80001d0:	2300      	movs	r3, #0
}
 80001d2:	4618      	mov	r0, r3
 80001d4:	bd80      	pop	{r7, pc}
	...

080001d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d8:	480d      	ldr	r0, [pc, #52]	; (8000210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480c      	ldr	r0, [pc, #48]	; (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e2:	490d      	ldr	r1, [pc, #52]	; (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f8:	4c0a      	ldr	r4, [pc, #40]	; (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000206:	f000 feef 	bl	8000fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020a:	f7ff ffdd 	bl	80001c8 <main>

0800020e <LoopForever>:

LoopForever:
    b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   r0, =_estack
 8000210:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800021c:	08001050 	.word	0x08001050
  ldr r2, =_sbss
 8000220:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000224:	20000068 	.word	0x20000068

08000228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <EXTI0_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void EXTI0_IRQHandler()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI0);
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <EXTI0_IRQHandler+0x1c>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <EXTI0_IRQHandler+0x1c>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI0]();
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <EXTI0_IRQHandler+0x20>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4798      	blx	r3
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010400 	.word	0x40010400
 800024c:	2000002c 	.word	0x2000002c

08000250 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI1);
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <EXTI1_IRQHandler+0x1c>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <EXTI1_IRQHandler+0x1c>)
 800025a:	f043 0302 	orr.w	r3, r3, #2
 800025e:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 8000260:	4b03      	ldr	r3, [pc, #12]	; (8000270 <EXTI1_IRQHandler+0x20>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	4798      	blx	r3
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40010400 	.word	0x40010400
 8000270:	2000002c 	.word	0x2000002c

08000274 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI2);
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <EXTI2_IRQHandler+0x1c>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <EXTI2_IRQHandler+0x1c>)
 800027e:	f043 0304 	orr.w	r3, r3, #4
 8000282:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <EXTI2_IRQHandler+0x20>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4798      	blx	r3
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40010400 	.word	0x40010400
 8000294:	2000002c 	.word	0x2000002c

08000298 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI3);
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <EXTI3_IRQHandler+0x1c>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <EXTI3_IRQHandler+0x1c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI3]();
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <EXTI3_IRQHandler+0x20>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4798      	blx	r3
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40010400 	.word	0x40010400
 80002b8:	2000002c 	.word	0x2000002c

080002bc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR.PR |= (1<<EXTI4);
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI4_IRQHandler+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI4_IRQHandler+0x1c>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI4]();
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI4_IRQHandler+0x20>)
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	4798      	blx	r3
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000002c 	.word	0x2000002c

080002e0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR.PR & (1 << EXTI5)) {EXTI->PR.PR |= (1<<EXTI5);  GP_IRQCallBack[EXTI5]();}
 80002e4:	4b28      	ldr	r3, [pc, #160]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d009      	beq.n	8000304 <EXTI9_5_IRQHandler+0x24>
 80002f0:	4b25      	ldr	r3, [pc, #148]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a24      	ldr	r2, [pc, #144]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]
 80002fc:	4b23      	ldr	r3, [pc, #140]	; (800038c <EXTI9_5_IRQHandler+0xac>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4798      	blx	r3
	else if (EXTI->PR.PR & (1 << EXTI7)) {EXTI->PR.PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
	else if (EXTI->PR.PR & (1 << EXTI8)) {EXTI->PR.PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
	else if (EXTI->PR.PR & (1 << EXTI9)) {EXTI->PR.PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
	else{ /* Misra */ }

}
 8000302:	e03e      	b.n	8000382 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI6)) {EXTI->PR.PR |= (1<<EXTI6);  GP_IRQCallBack[EXTI6]();}
 8000304:	4b20      	ldr	r3, [pc, #128]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800030c:	2b00      	cmp	r3, #0
 800030e:	d009      	beq.n	8000324 <EXTI9_5_IRQHandler+0x44>
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a1c      	ldr	r2, [pc, #112]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031a:	6153      	str	r3, [r2, #20]
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <EXTI9_5_IRQHandler+0xac>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4798      	blx	r3
}
 8000322:	e02e      	b.n	8000382 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI7)) {EXTI->PR.PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d009      	beq.n	8000344 <EXTI9_5_IRQHandler+0x64>
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a14      	ldr	r2, [pc, #80]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800033a:	6153      	str	r3, [r2, #20]
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <EXTI9_5_IRQHandler+0xac>)
 800033e:	69db      	ldr	r3, [r3, #28]
 8000340:	4798      	blx	r3
}
 8000342:	e01e      	b.n	8000382 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI8)) {EXTI->PR.PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800034c:	2b00      	cmp	r3, #0
 800034e:	d009      	beq.n	8000364 <EXTI9_5_IRQHandler+0x84>
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	4a0c      	ldr	r2, [pc, #48]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035a:	6153      	str	r3, [r2, #20]
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <EXTI9_5_IRQHandler+0xac>)
 800035e:	6a1b      	ldr	r3, [r3, #32]
 8000360:	4798      	blx	r3
}
 8000362:	e00e      	b.n	8000382 <EXTI9_5_IRQHandler+0xa2>
	else if (EXTI->PR.PR & (1 << EXTI9)) {EXTI->PR.PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0xa2>
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI9_5_IRQHandler+0xa8>)
 8000376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800037a:	6153      	str	r3, [r2, #20]
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI9_5_IRQHandler+0xac>)
 800037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	2000002c 	.word	0x2000002c

08000390 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR.PR & (1 << EXTI10)) {EXTI->PR.PR |= (1<<EXTI10);  GP_IRQCallBack[EXTI10]();}
 8000394:	4b30      	ldr	r3, [pc, #192]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800039c:	2b00      	cmp	r3, #0
 800039e:	d009      	beq.n	80003b4 <EXTI15_10_IRQHandler+0x24>
 80003a0:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b2b      	ldr	r3, [pc, #172]	; (800045c <EXTI15_10_IRQHandler+0xcc>)
 80003ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b0:	4798      	blx	r3
	else if (EXTI->PR.PR & (1 << EXTI12)) {EXTI->PR.PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
	else if (EXTI->PR.PR & (1 << EXTI13)) {EXTI->PR.PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
	else if (EXTI->PR.PR & (1 << EXTI14)) {EXTI->PR.PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
	else if (EXTI->PR.PR & (1 << EXTI15)) {EXTI->PR.PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
	else{ /* Misra */ }
}
 80003b2:	e04e      	b.n	8000452 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI11)) {EXTI->PR.PR |= (1<<EXTI11);  GP_IRQCallBack[EXTI11]();}
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d009      	beq.n	80003d4 <EXTI15_10_IRQHandler+0x44>
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a24      	ldr	r2, [pc, #144]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b23      	ldr	r3, [pc, #140]	; (800045c <EXTI15_10_IRQHandler+0xcc>)
 80003ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d0:	4798      	blx	r3
}
 80003d2:	e03e      	b.n	8000452 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI12)) {EXTI->PR.PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d009      	beq.n	80003f4 <EXTI15_10_IRQHandler+0x64>
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003e2:	695b      	ldr	r3, [r3, #20]
 80003e4:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ea:	6153      	str	r3, [r2, #20]
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <EXTI15_10_IRQHandler+0xcc>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4798      	blx	r3
}
 80003f2:	e02e      	b.n	8000452 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI13)) {EXTI->PR.PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d009      	beq.n	8000414 <EXTI15_10_IRQHandler+0x84>
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <EXTI15_10_IRQHandler+0xcc>)
 800040e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000410:	4798      	blx	r3
}
 8000412:	e01e      	b.n	8000452 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI14)) {EXTI->PR.PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d009      	beq.n	8000434 <EXTI15_10_IRQHandler+0xa4>
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042a:	6153      	str	r3, [r2, #20]
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <EXTI15_10_IRQHandler+0xcc>)
 800042e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000430:	4798      	blx	r3
}
 8000432:	e00e      	b.n	8000452 <EXTI15_10_IRQHandler+0xc2>
	else if (EXTI->PR.PR & (1 << EXTI15)) {EXTI->PR.PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d008      	beq.n	8000452 <EXTI15_10_IRQHandler+0xc2>
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <EXTI15_10_IRQHandler+0xc8>)
 8000446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800044a:	6153      	str	r3, [r2, #20]
 800044c:	4b03      	ldr	r3, [pc, #12]	; (800045c <EXTI15_10_IRQHandler+0xcc>)
 800044e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000450:	4798      	blx	r3
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010400 	.word	0x40010400
 800045c:	2000002c 	.word	0x2000002c

08000460 <ConfigurationPin>:

/*******************************************************************************
                      APIs Supported by "MCAL GPIO DRIVER"
 *******************************************************************************/
void ConfigurationPin(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig , uint8_t Configuration , uint8_t PinModeMask)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	4611      	mov	r1, r2
 800046c:	461a      	mov	r2, r3
 800046e:	460b      	mov	r3, r1
 8000470:	71fb      	strb	r3, [r7, #7]
 8000472:	4613      	mov	r3, r2
 8000474:	71bb      	strb	r3, [r7, #6]
	if(Configuration == LOW)
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	2b00      	cmp	r3, #0
 800047a:	f040 80bb 	bne.w	80005f4 <ConfigurationPin+0x194>
	{
		switch(PinConfig->GPIO_PinNumber)
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	2b08      	cmp	r3, #8
 8000484:	d051      	beq.n	800052a <ConfigurationPin+0xca>
 8000486:	2b08      	cmp	r3, #8
 8000488:	dc06      	bgt.n	8000498 <ConfigurationPin+0x38>
 800048a:	2b02      	cmp	r3, #2
 800048c:	d025      	beq.n	80004da <ConfigurationPin+0x7a>
 800048e:	2b04      	cmp	r3, #4
 8000490:	d037      	beq.n	8000502 <ConfigurationPin+0xa2>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d00d      	beq.n	80004b2 <ConfigurationPin+0x52>
			GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
			break;
		}
	}

}
 8000496:	e171      	b.n	800077c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000498:	2b20      	cmp	r3, #32
 800049a:	d06e      	beq.n	800057a <ConfigurationPin+0x11a>
 800049c:	2b20      	cmp	r3, #32
 800049e:	dc02      	bgt.n	80004a6 <ConfigurationPin+0x46>
 80004a0:	2b10      	cmp	r3, #16
 80004a2:	d056      	beq.n	8000552 <ConfigurationPin+0xf2>
}
 80004a4:	e16a      	b.n	800077c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 80004a6:	2b40      	cmp	r3, #64	; 0x40
 80004a8:	d07b      	beq.n	80005a2 <ConfigurationPin+0x142>
 80004aa:	2b80      	cmp	r3, #128	; 0x80
 80004ac:	f000 808d 	beq.w	80005ca <ConfigurationPin+0x16a>
}
 80004b0:	e164      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF0 = PinModeMask;
 80004b2:	79bb      	ldrb	r3, [r7, #6]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	b2d9      	uxtb	r1, r3
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	6813      	ldr	r3, [r2, #0]
 80004be:	f361 0383 	bfi	r3, r1, #2, #2
 80004c2:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE0 = PinConfig->GPIO_OUTPUT_SPEED;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	78db      	ldrb	r3, [r3, #3]
 80004c8:	f003 0303 	and.w	r3, r3, #3
 80004cc:	b2d9      	uxtb	r1, r3
 80004ce:	68fa      	ldr	r2, [r7, #12]
 80004d0:	6813      	ldr	r3, [r2, #0]
 80004d2:	f361 0301 	bfi	r3, r1, #0, #2
 80004d6:	6013      	str	r3, [r2, #0]
			break;
 80004d8:	e150      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF1 = PinModeMask;
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	f003 0303 	and.w	r3, r3, #3
 80004e0:	b2d9      	uxtb	r1, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	6813      	ldr	r3, [r2, #0]
 80004e6:	f361 1387 	bfi	r3, r1, #6, #2
 80004ea:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE1 = PinConfig->GPIO_OUTPUT_SPEED;
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	78db      	ldrb	r3, [r3, #3]
 80004f0:	f003 0303 	and.w	r3, r3, #3
 80004f4:	b2d9      	uxtb	r1, r3
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	6813      	ldr	r3, [r2, #0]
 80004fa:	f361 1305 	bfi	r3, r1, #4, #2
 80004fe:	6013      	str	r3, [r2, #0]
			break;
 8000500:	e13c      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF2 = PinModeMask;
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	f003 0303 	and.w	r3, r3, #3
 8000508:	b2d9      	uxtb	r1, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	6813      	ldr	r3, [r2, #0]
 800050e:	f361 238b 	bfi	r3, r1, #10, #2
 8000512:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE2 = PinConfig->GPIO_OUTPUT_SPEED;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	78db      	ldrb	r3, [r3, #3]
 8000518:	f003 0303 	and.w	r3, r3, #3
 800051c:	b2d9      	uxtb	r1, r3
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	6813      	ldr	r3, [r2, #0]
 8000522:	f361 2309 	bfi	r3, r1, #8, #2
 8000526:	6013      	str	r3, [r2, #0]
			break;
 8000528:	e128      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF3 = PinModeMask;
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	f003 0303 	and.w	r3, r3, #3
 8000530:	b2d9      	uxtb	r1, r3
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	6813      	ldr	r3, [r2, #0]
 8000536:	f361 338f 	bfi	r3, r1, #14, #2
 800053a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE3 = PinConfig->GPIO_OUTPUT_SPEED;
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	78db      	ldrb	r3, [r3, #3]
 8000540:	f003 0303 	and.w	r3, r3, #3
 8000544:	b2d9      	uxtb	r1, r3
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	6813      	ldr	r3, [r2, #0]
 800054a:	f361 330d 	bfi	r3, r1, #12, #2
 800054e:	6013      	str	r3, [r2, #0]
			break;
 8000550:	e114      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF4 = PinModeMask;
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	f003 0303 	and.w	r3, r3, #3
 8000558:	b2d9      	uxtb	r1, r3
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	6813      	ldr	r3, [r2, #0]
 800055e:	f361 4393 	bfi	r3, r1, #18, #2
 8000562:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE4 = PinConfig->GPIO_OUTPUT_SPEED;
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	78db      	ldrb	r3, [r3, #3]
 8000568:	f003 0303 	and.w	r3, r3, #3
 800056c:	b2d9      	uxtb	r1, r3
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	6813      	ldr	r3, [r2, #0]
 8000572:	f361 4311 	bfi	r3, r1, #16, #2
 8000576:	6013      	str	r3, [r2, #0]
			break;
 8000578:	e100      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF5 = PinModeMask;
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	f003 0303 	and.w	r3, r3, #3
 8000580:	b2d9      	uxtb	r1, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	6813      	ldr	r3, [r2, #0]
 8000586:	f361 5397 	bfi	r3, r1, #22, #2
 800058a:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE5 = PinConfig->GPIO_OUTPUT_SPEED;
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	78db      	ldrb	r3, [r3, #3]
 8000590:	f003 0303 	and.w	r3, r3, #3
 8000594:	b2d9      	uxtb	r1, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	6813      	ldr	r3, [r2, #0]
 800059a:	f361 5315 	bfi	r3, r1, #20, #2
 800059e:	6013      	str	r3, [r2, #0]
			break;
 80005a0:	e0ec      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF6 = PinModeMask;
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	f003 0303 	and.w	r3, r3, #3
 80005a8:	b2d9      	uxtb	r1, r3
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	6813      	ldr	r3, [r2, #0]
 80005ae:	f361 639b 	bfi	r3, r1, #26, #2
 80005b2:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE6 = PinConfig->GPIO_OUTPUT_SPEED;
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	78db      	ldrb	r3, [r3, #3]
 80005b8:	f003 0303 	and.w	r3, r3, #3
 80005bc:	b2d9      	uxtb	r1, r3
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	6813      	ldr	r3, [r2, #0]
 80005c2:	f361 6319 	bfi	r3, r1, #24, #2
 80005c6:	6013      	str	r3, [r2, #0]
			break;
 80005c8:	e0d8      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRL.CNF7 = PinModeMask;
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	f003 0303 	and.w	r3, r3, #3
 80005d0:	b2d9      	uxtb	r1, r3
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	6813      	ldr	r3, [r2, #0]
 80005d6:	f361 739f 	bfi	r3, r1, #30, #2
 80005da:	6013      	str	r3, [r2, #0]
			GPIOx->CRL.MODE7 = PinConfig->GPIO_OUTPUT_SPEED;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	78db      	ldrb	r3, [r3, #3]
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	b2d9      	uxtb	r1, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	6813      	ldr	r3, [r2, #0]
 80005ea:	f361 731d 	bfi	r3, r1, #28, #2
 80005ee:	6013      	str	r3, [r2, #0]
			break;
 80005f0:	bf00      	nop
 80005f2:	e0c3      	b.n	800077c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005fc:	d05a      	beq.n	80006b4 <ConfigurationPin+0x254>
 80005fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000602:	dc09      	bgt.n	8000618 <ConfigurationPin+0x1b8>
 8000604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000608:	d02c      	beq.n	8000664 <ConfigurationPin+0x204>
 800060a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800060e:	d03d      	beq.n	800068c <ConfigurationPin+0x22c>
 8000610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000614:	d012      	beq.n	800063c <ConfigurationPin+0x1dc>
}
 8000616:	e0b1      	b.n	800077c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 8000618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061c:	d072      	beq.n	8000704 <ConfigurationPin+0x2a4>
 800061e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000622:	dc03      	bgt.n	800062c <ConfigurationPin+0x1cc>
 8000624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000628:	d058      	beq.n	80006dc <ConfigurationPin+0x27c>
}
 800062a:	e0a7      	b.n	800077c <ConfigurationPin+0x31c>
		switch(PinConfig->GPIO_PinNumber)
 800062c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000630:	d07c      	beq.n	800072c <ConfigurationPin+0x2cc>
 8000632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000636:	f000 808d 	beq.w	8000754 <ConfigurationPin+0x2f4>
}
 800063a:	e09f      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF8 = PinModeMask;
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	f003 0303 	and.w	r3, r3, #3
 8000642:	b2d9      	uxtb	r1, r3
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	6853      	ldr	r3, [r2, #4]
 8000648:	f361 0383 	bfi	r3, r1, #2, #2
 800064c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE8 = PinConfig->GPIO_OUTPUT_SPEED;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	f003 0303 	and.w	r3, r3, #3
 8000656:	b2d9      	uxtb	r1, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	6853      	ldr	r3, [r2, #4]
 800065c:	f361 0301 	bfi	r3, r1, #0, #2
 8000660:	6053      	str	r3, [r2, #4]
			break;
 8000662:	e08b      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF9 = PinModeMask;
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	b2d9      	uxtb	r1, r3
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	6853      	ldr	r3, [r2, #4]
 8000670:	f361 1387 	bfi	r3, r1, #6, #2
 8000674:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE9 = PinConfig->GPIO_OUTPUT_SPEED;
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	78db      	ldrb	r3, [r3, #3]
 800067a:	f003 0303 	and.w	r3, r3, #3
 800067e:	b2d9      	uxtb	r1, r3
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	6853      	ldr	r3, [r2, #4]
 8000684:	f361 1305 	bfi	r3, r1, #4, #2
 8000688:	6053      	str	r3, [r2, #4]
			break;
 800068a:	e077      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF10 = PinModeMask;
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	b2d9      	uxtb	r1, r3
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	6853      	ldr	r3, [r2, #4]
 8000698:	f361 238b 	bfi	r3, r1, #10, #2
 800069c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE10 = PinConfig->GPIO_OUTPUT_SPEED;
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	78db      	ldrb	r3, [r3, #3]
 80006a2:	f003 0303 	and.w	r3, r3, #3
 80006a6:	b2d9      	uxtb	r1, r3
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	6853      	ldr	r3, [r2, #4]
 80006ac:	f361 2309 	bfi	r3, r1, #8, #2
 80006b0:	6053      	str	r3, [r2, #4]
			break;
 80006b2:	e063      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF11 = PinModeMask;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	b2d9      	uxtb	r1, r3
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	6853      	ldr	r3, [r2, #4]
 80006c0:	f361 338f 	bfi	r3, r1, #14, #2
 80006c4:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE11 = PinConfig->GPIO_OUTPUT_SPEED;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	78db      	ldrb	r3, [r3, #3]
 80006ca:	f003 0303 	and.w	r3, r3, #3
 80006ce:	b2d9      	uxtb	r1, r3
 80006d0:	68fa      	ldr	r2, [r7, #12]
 80006d2:	6853      	ldr	r3, [r2, #4]
 80006d4:	f361 330d 	bfi	r3, r1, #12, #2
 80006d8:	6053      	str	r3, [r2, #4]
			break;
 80006da:	e04f      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF12 = PinModeMask;
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	b2d9      	uxtb	r1, r3
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	6853      	ldr	r3, [r2, #4]
 80006e8:	f361 4393 	bfi	r3, r1, #18, #2
 80006ec:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE12 = PinConfig->GPIO_OUTPUT_SPEED;
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	78db      	ldrb	r3, [r3, #3]
 80006f2:	f003 0303 	and.w	r3, r3, #3
 80006f6:	b2d9      	uxtb	r1, r3
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	6853      	ldr	r3, [r2, #4]
 80006fc:	f361 4311 	bfi	r3, r1, #16, #2
 8000700:	6053      	str	r3, [r2, #4]
			break;
 8000702:	e03b      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF13 = PinModeMask;
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	b2d9      	uxtb	r1, r3
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	6853      	ldr	r3, [r2, #4]
 8000710:	f361 5397 	bfi	r3, r1, #22, #2
 8000714:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE13 = PinConfig->GPIO_OUTPUT_SPEED;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	78db      	ldrb	r3, [r3, #3]
 800071a:	f003 0303 	and.w	r3, r3, #3
 800071e:	b2d9      	uxtb	r1, r3
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	6853      	ldr	r3, [r2, #4]
 8000724:	f361 5315 	bfi	r3, r1, #20, #2
 8000728:	6053      	str	r3, [r2, #4]
			break;
 800072a:	e027      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF14 = PinModeMask;
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	f003 0303 	and.w	r3, r3, #3
 8000732:	b2d9      	uxtb	r1, r3
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	6853      	ldr	r3, [r2, #4]
 8000738:	f361 639b 	bfi	r3, r1, #26, #2
 800073c:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE14 = PinConfig->GPIO_OUTPUT_SPEED;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	78db      	ldrb	r3, [r3, #3]
 8000742:	f003 0303 	and.w	r3, r3, #3
 8000746:	b2d9      	uxtb	r1, r3
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	6853      	ldr	r3, [r2, #4]
 800074c:	f361 6319 	bfi	r3, r1, #24, #2
 8000750:	6053      	str	r3, [r2, #4]
			break;
 8000752:	e013      	b.n	800077c <ConfigurationPin+0x31c>
			GPIOx->CRH.CNF15 = PinModeMask;
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	f003 0303 	and.w	r3, r3, #3
 800075a:	b2d9      	uxtb	r1, r3
 800075c:	68fa      	ldr	r2, [r7, #12]
 800075e:	6853      	ldr	r3, [r2, #4]
 8000760:	f361 739f 	bfi	r3, r1, #30, #2
 8000764:	6053      	str	r3, [r2, #4]
			GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	78db      	ldrb	r3, [r3, #3]
 800076a:	f003 0303 	and.w	r3, r3, #3
 800076e:	b2d9      	uxtb	r1, r3
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	6853      	ldr	r3, [r2, #4]
 8000774:	f361 731d 	bfi	r3, r1, #28, #2
 8000778:	6053      	str	r3, [r2, #4]
			break;
 800077a:	bf00      	nop
}
 800077c:	bf00      	nop
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
	...

08000788 <MCAL_GPIO_Init>:
 * Note              -STM32F103C6 MCU has GPIO A,B,C,D and E Modules but LQFP4
 *                    package has only GPIO A,B and part of C AND D exported as
 *                    external PINs from the MCU.
 */
void MCAL_GPIO_Init(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) (x=A..G) configure pin 0..7
	// Port configuration register high (GPIOx_CRH) (x=A..G) configure pin 8..15
	volatile uint8_t Configuration = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? LOW : HIGH;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2bff      	cmp	r3, #255	; 0xff
 8000798:	bf8c      	ite	hi
 800079a:	2301      	movhi	r3, #1
 800079c:	2300      	movls	r3, #0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]

	switch(PinConfig->GPIO_MODE)
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	789b      	ldrb	r3, [r3, #2]
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d863      	bhi.n	8000872 <MCAL_GPIO_Init+0xea>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <MCAL_GPIO_Init+0x28>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007d5 	.word	0x080007d5
 80007b4:	080007e5 	.word	0x080007e5
 80007b8:	080007f5 	.word	0x080007f5
 80007bc:	08000813 	.word	0x08000813
 80007c0:	08000823 	.word	0x08000823
 80007c4:	08000833 	.word	0x08000833
 80007c8:	08000843 	.word	0x08000843
 80007cc:	08000853 	.word	0x08000853
 80007d0:	08000863 	.word	0x08000863
	{
	case GPIO_MODE_ANALOG :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_ANALOG_MASK );
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	2300      	movs	r3, #0
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fe3f 	bl	8000460 <ConfigurationPin>
		break;
 80007e2:	e046      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_FLO :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_FLO_MASK );
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	2301      	movs	r3, #1
 80007ea:	6839      	ldr	r1, [r7, #0]
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff fe37 	bl	8000460 <ConfigurationPin>
		break;
 80007f2:	e03e      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_PU :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_PU_MASK );
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	2302      	movs	r3, #2
 80007fa:	6839      	ldr	r1, [r7, #0]
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe2f 	bl	8000460 <ConfigurationPin>
		//Input pull-up Table 20. Port bit configuration table
		GPIOx->ODR.ODR |= PinConfig->GPIO_PinNumber;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	8812      	ldrh	r2, [r2, #0]
 800080a:	431a      	orrs	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60da      	str	r2, [r3, #12]
		break;
 8000810:	e02f      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Input_PD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Input_PD_MASK );
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	2302      	movs	r3, #2
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fe20 	bl	8000460 <ConfigurationPin>
		break;
 8000820:	e027      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_pp :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_pp_MASK );
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	2300      	movs	r3, #0
 8000828:	6839      	ldr	r1, [r7, #0]
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fe18 	bl	8000460 <ConfigurationPin>
		break;
 8000830:	e01f      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_OD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_OD_MASK );
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	2301      	movs	r3, #1
 8000838:	6839      	ldr	r1, [r7, #0]
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff fe10 	bl	8000460 <ConfigurationPin>
		break;
 8000840:	e017      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_AF_PP :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_AF_PP_MASK );
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	2302      	movs	r3, #2
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fe08 	bl	8000460 <ConfigurationPin>
		break;
 8000850:	e00f      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Output_AF_OD :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Output_AF_OD_MASK );
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	2303      	movs	r3, #3
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fe00 	bl	8000460 <ConfigurationPin>
		break;
 8000860:	e007      	b.n	8000872 <MCAL_GPIO_Init+0xea>

	case GPIO_MODE_Iuput_AF :
		ConfigurationPin(GPIOx , PinConfig , Configuration , GPIO_MODE_Iuput_AF_MASK );
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	2301      	movs	r3, #1
 8000868:	6839      	ldr	r1, [r7, #0]
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fdf8 	bl	8000460 <ConfigurationPin>
		break;
 8000870:	bf00      	nop
	}

}
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop

0800087c <MCAL_RCC_GPIO_EN>:

/*******************************************************************************
                     APIs Supported by "MCAL RCC DRIVER"
*******************************************************************************/
void MCAL_RCC_GPIO_EN(GPIO_t* GPIOx)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if (GPIOx == GPIOA)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MCAL_RCC_GPIO_EN+0x60>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d105      	bne.n	8000898 <MCAL_RCC_GPIO_EN+0x1c>
		RCC->APB2ENR.IOPAEN = TRUE;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <MCAL_RCC_GPIO_EN+0x64>)
 800088e:	6993      	ldr	r3, [r2, #24]
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6193      	str	r3, [r2, #24]
	else if (GPIOx == GPIOC)
		RCC->APB2ENR.IOPCEN = TRUE;
	else if (GPIOx == GPIOD)
		RCC->APB2ENR.IOPDEN = TRUE;
	else  { /* Misra */ }
}
 8000896:	e01c      	b.n	80008d2 <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOB)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a12      	ldr	r2, [pc, #72]	; (80008e4 <MCAL_RCC_GPIO_EN+0x68>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d105      	bne.n	80008ac <MCAL_RCC_GPIO_EN+0x30>
		RCC->APB2ENR.IOPBEN = TRUE;
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <MCAL_RCC_GPIO_EN+0x64>)
 80008a2:	6993      	ldr	r3, [r2, #24]
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6193      	str	r3, [r2, #24]
}
 80008aa:	e012      	b.n	80008d2 <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOC)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <MCAL_RCC_GPIO_EN+0x6c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d105      	bne.n	80008c0 <MCAL_RCC_GPIO_EN+0x44>
		RCC->APB2ENR.IOPCEN = TRUE;
 80008b4:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <MCAL_RCC_GPIO_EN+0x64>)
 80008b6:	6993      	ldr	r3, [r2, #24]
 80008b8:	f043 0310 	orr.w	r3, r3, #16
 80008bc:	6193      	str	r3, [r2, #24]
}
 80008be:	e008      	b.n	80008d2 <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOD)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <MCAL_RCC_GPIO_EN+0x70>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d104      	bne.n	80008d2 <MCAL_RCC_GPIO_EN+0x56>
		RCC->APB2ENR.IOPDEN = TRUE;
 80008c8:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <MCAL_RCC_GPIO_EN+0x64>)
 80008ca:	6993      	ldr	r3, [r2, #24]
 80008cc:	f043 0320 	orr.w	r3, r3, #32
 80008d0:	6193      	str	r3, [r2, #24]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40010800 	.word	0x40010800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40011000 	.word	0x40011000
 80008ec:	40011400 	.word	0x40011400

080008f0 <MCAL_RCC_AFIO_EN>:

void MCAL_RCC_AFIO_EN()
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	RCC->APB2ENR.AFIOEN = TRUE;
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <MCAL_RCC_AFIO_EN+0x18>)
 80008f6:	6993      	ldr	r3, [r2, #24]
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6193      	str	r3, [r2, #24]
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <MCAL_RCC_GetSYS_CLKFreq>:

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	// Get System clock switch status (SWS)
	switch(RCC->CFGR.SWS){
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b01      	cmp	r3, #1
 800091c:	d005      	beq.n	800092a <MCAL_RCC_GetSYS_CLKFreq+0x1e>
 800091e:	2b02      	cmp	r3, #2
 8000920:	d005      	beq.n	800092e <MCAL_RCC_GetSYS_CLKFreq+0x22>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d105      	bne.n	8000932 <MCAL_RCC_GetSYS_CLKFreq+0x26>
		case 0:return HSI_RC_CLK;   //HSI oscillator used as system clock
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000928:	e004      	b.n	8000934 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		case 1:return HSE_CLK;      //HSE oscillator used as system clock
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800092c:	e002      	b.n	8000934 <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //HSE user should specify it
		case 2:return 16000000;     //PLL used as system clock
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000930:	e000      	b.n	8000934 <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //PLLCLK and PLLMULL and PLL Source MUX
	}
	return ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000
 8000940:	007a1200 	.word	0x007a1200
 8000944:	00f42400 	.word	0x00f42400

08000948 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	// Get AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> RCC->CFGR.HPRE);
 800094c:	f7ff ffde 	bl	800090c <MCAL_RCC_GetSYS_CLKFreq>
 8000950:	4602      	mov	r2, r0
 8000952:	4b04      	ldr	r3, [pc, #16]	; (8000964 <MCAL_RCC_GetHCLKFreq+0x1c>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800095a:	b2db      	uxtb	r3, r3
 800095c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000960:	4618      	mov	r0, r3
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	// Get APB1 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE1);
 800096c:	f7ff ffec 	bl	8000948 <MCAL_RCC_GetHCLKFreq>
 8000970:	4602      	mov	r2, r0
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <MCAL_RCC_GetPCLK1Freq+0x1c>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000980:	4618      	mov	r0, r3
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000

08000988 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	// Get APB2 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE2);
 800098c:	f7ff ffdc 	bl	8000948 <MCAL_RCC_GetHCLKFreq>
 8000990:	4602      	mov	r2, r0
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <MCAL_RCC_GetPCLK2Freq+0x1c>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000

080009a8 <MCAL_UART_Init>:
* Retval            -None.
*
* Note              -support for now Asynchronous mode & clock 8 MHz.
*/
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	// 1. Enable the clock for given USART peripheral
	if      (USARTx == USART1){ RCC->APB2ENR.USART1EN = TRUE; Global_USART_Config[0] = UART_Config; }
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <MCAL_UART_Init+0x268>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d108      	bne.n	80009cc <MCAL_UART_Init+0x24>
 80009ba:	4a96      	ldr	r2, [pc, #600]	; (8000c14 <MCAL_UART_Init+0x26c>)
 80009bc:	6993      	ldr	r3, [r2, #24]
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4a94      	ldr	r2, [pc, #592]	; (8000c18 <MCAL_UART_Init+0x270>)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	6013      	str	r3, [r2, #0]
 80009ca:	e018      	b.n	80009fe <MCAL_UART_Init+0x56>
	else if (USARTx == USART2){ RCC->APB1ENR.USART2EN = TRUE; Global_USART_Config[1] = UART_Config; }
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a93      	ldr	r2, [pc, #588]	; (8000c1c <MCAL_UART_Init+0x274>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d108      	bne.n	80009e6 <MCAL_UART_Init+0x3e>
 80009d4:	4a8f      	ldr	r2, [pc, #572]	; (8000c14 <MCAL_UART_Init+0x26c>)
 80009d6:	69d3      	ldr	r3, [r2, #28]
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4a8e      	ldr	r2, [pc, #568]	; (8000c18 <MCAL_UART_Init+0x270>)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	6053      	str	r3, [r2, #4]
 80009e4:	e00b      	b.n	80009fe <MCAL_UART_Init+0x56>
	else if (USARTx == USART3){ RCC->APB1ENR.USART3EN = TRUE; Global_USART_Config[2] = UART_Config; }
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a8d      	ldr	r2, [pc, #564]	; (8000c20 <MCAL_UART_Init+0x278>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d107      	bne.n	80009fe <MCAL_UART_Init+0x56>
 80009ee:	4a89      	ldr	r2, [pc, #548]	; (8000c14 <MCAL_UART_Init+0x26c>)
 80009f0:	69d3      	ldr	r3, [r2, #28]
 80009f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f6:	61d3      	str	r3, [r2, #28]
 80009f8:	4a87      	ldr	r2, [pc, #540]	; (8000c18 <MCAL_UART_Init+0x270>)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	6093      	str	r3, [r2, #8]
	else                      { /*  Misra  */ }

	// 2. Enable USART Module
	USARTx->CR1.UE = TRUE;
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68d3      	ldr	r3, [r2, #12]
 8000a02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a06:	60d3      	str	r3, [r2, #12]

	// 3. Enable USART TX/RX engines according to the USART_Mode configuration item
	switch(UART_Config->USART_Mode){
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d009      	beq.n	8000a24 <MCAL_UART_Init+0x7c>
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d00d      	beq.n	8000a30 <MCAL_UART_Init+0x88>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d116      	bne.n	8000a46 <MCAL_UART_Init+0x9e>
		case UART_Mode_RX:USARTx->CR1.RE = TRUE;break;
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	68d3      	ldr	r3, [r2, #12]
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	60d3      	str	r3, [r2, #12]
 8000a22:	e010      	b.n	8000a46 <MCAL_UART_Init+0x9e>
		case UART_Mode_TX:USARTx->CR1.TE = TRUE;break;
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	68d3      	ldr	r3, [r2, #12]
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	60d3      	str	r3, [r2, #12]
 8000a2e:	e00a      	b.n	8000a46 <MCAL_UART_Init+0x9e>
		case UART_Mode_TX_RX:
			USARTx->CR1.RE = TRUE;
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	68d3      	ldr	r3, [r2, #12]
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	60d3      	str	r3, [r2, #12]
			USARTx->CR1.TE = TRUE;
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68d3      	ldr	r3, [r2, #12]
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	60d3      	str	r3, [r2, #12]
			break;
 8000a44:	bf00      	nop
		}

	//  4. Pay-load width
	USARTx->CR1.M = UART_Config->Payload_Length;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	7a1b      	ldrb	r3, [r3, #8]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	b2d9      	uxtb	r1, r3
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	68d3      	ldr	r3, [r2, #12]
 8000a54:	f361 330c 	bfi	r3, r1, #12, #1
 8000a58:	60d3      	str	r3, [r2, #12]

	// 5. configuration of parity control bit field
	if (!UART_Config->Parity)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	7a5b      	ldrb	r3, [r3, #9]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d11c      	bne.n	8000a9c <MCAL_UART_Init+0xf4>
	{
		switch(UART_Config->Parity){
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	7a5b      	ldrb	r3, [r3, #9]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d00c      	beq.n	8000a84 <MCAL_UART_Init+0xdc>
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d11b      	bne.n	8000aa6 <MCAL_UART_Init+0xfe>
			case UART_Parity_ODD : USARTx->CR1.PCE = TRUE; USARTx->CR1.PS = TRUE; break;
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68d3      	ldr	r3, [r2, #12]
 8000a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a76:	60d3      	str	r3, [r2, #12]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	68d3      	ldr	r3, [r2, #12]
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a80:	60d3      	str	r3, [r2, #12]
 8000a82:	e010      	b.n	8000aa6 <MCAL_UART_Init+0xfe>
			case UART_Parity_EVEN: USARTx->CR1.PCE = TRUE; USARTx->CR1.PS = FALSE;break;
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	68d3      	ldr	r3, [r2, #12]
 8000a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8c:	60d3      	str	r3, [r2, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68d3      	ldr	r3, [r2, #12]
 8000a92:	f36f 2349 	bfc	r3, #9, #1
 8000a96:	60d3      	str	r3, [r2, #12]
 8000a98:	bf00      	nop
 8000a9a:	e004      	b.n	8000aa6 <MCAL_UART_Init+0xfe>
			}
	}else
	{
		USARTx->CR1.PCE = FALSE;
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	68d3      	ldr	r3, [r2, #12]
 8000aa0:	f36f 238a 	bfc	r3, #10, #1
 8000aa4:	60d3      	str	r3, [r2, #12]
	}

	// 6. configuration the no. of stop bits
	USARTx->CR2.STOP = UART_Config->StopBits;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	7a9b      	ldrb	r3, [r3, #10]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	b2d9      	uxtb	r1, r3
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	6913      	ldr	r3, [r2, #16]
 8000ab4:	f361 330d 	bfi	r3, r1, #12, #2
 8000ab8:	6113      	str	r3, [r2, #16]

	// 7. USART HW Flow Control
	switch(UART_Config->HW_FlowControl){
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	7adb      	ldrb	r3, [r3, #11]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d004      	beq.n	8000acc <MCAL_UART_Init+0x124>
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d00e      	beq.n	8000ae4 <MCAL_UART_Init+0x13c>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d006      	beq.n	8000ad8 <MCAL_UART_Init+0x130>
 8000aca:	e016      	b.n	8000afa <MCAL_UART_Init+0x152>
		case UART_HW_FlowControl_CTS: USARTx->CR3.CTSE = TRUE;break;
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	6953      	ldr	r3, [r2, #20]
 8000ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad4:	6153      	str	r3, [r2, #20]
 8000ad6:	e010      	b.n	8000afa <MCAL_UART_Init+0x152>
		case UART_HW_FlowControl_RTS: USARTx->CR3.RTSE = TRUE;break;
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	6953      	ldr	r3, [r2, #20]
 8000adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	e00a      	b.n	8000afa <MCAL_UART_Init+0x152>
		case UART_HW_FlowControl_RTS_CTS:
			USARTx->CR3.CTSE = TRUE;
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	6953      	ldr	r3, [r2, #20]
 8000ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aec:	6153      	str	r3, [r2, #20]
			USARTx->CR3.RTSE = TRUE;break;
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	6953      	ldr	r3, [r2, #20]
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6153      	str	r3, [r2, #20]
 8000af8:	bf00      	nop
		}

	// 8. configuration baud-rate
	uint32_t pclk = (USARTx == USART1)? MCAL_RCC_GetPCLK2Freq() : MCAL_RCC_GetPCLK1Freq();
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a44      	ldr	r2, [pc, #272]	; (8000c10 <MCAL_UART_Init+0x268>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d103      	bne.n	8000b0a <MCAL_UART_Init+0x162>
 8000b02:	f7ff ff41 	bl	8000988 <MCAL_RCC_GetPCLK2Freq>
 8000b06:	4603      	mov	r3, r0
 8000b08:	e002      	b.n	8000b10 <MCAL_UART_Init+0x168>
 8000b0a:	f7ff ff2d 	bl	8000968 <MCAL_RCC_GetPCLK1Freq>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	60fb      	str	r3, [r7, #12]
	USARTx->BRR.DIV_Fraction = DIV_Fraction(pclk, UART_Config->BaudRate);
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009a      	lsls	r2, r3, #2
 8000b1c:	441a      	add	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	011b      	lsls	r3, r3, #4
 8000b2e:	68f9      	ldr	r1, [r7, #12]
 8000b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b34:	2164      	movs	r1, #100	; 0x64
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	4a39      	ldr	r2, [pc, #228]	; (8000c24 <MCAL_UART_Init+0x27c>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	095b      	lsrs	r3, r3, #5
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	b2d9      	uxtb	r1, r3
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	6893      	ldr	r3, [r2, #8]
 8000b50:	f361 0303 	bfi	r3, r1, #0, #4
 8000b54:	6093      	str	r3, [r2, #8]
	USARTx->BRR.DIV_Mantissa = DIV_Mantissa(pclk, UART_Config->BaudRate);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	68fa      	ldr	r2, [r7, #12]
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b66:	b299      	uxth	r1, r3
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6893      	ldr	r3, [r2, #8]
 8000b6c:	f361 130f 	bfi	r3, r1, #4, #12
 8000b70:	6093      	str	r3, [r2, #8]

	// 9. Enable or Disable Interrupt
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	7b1b      	ldrb	r3, [r3, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d046      	beq.n	8000c08 <MCAL_UART_Init+0x260>
	{
		if      (USARTx == USART1){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART1_IRQ - 32)); }
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a24      	ldr	r2, [pc, #144]	; (8000c10 <MCAL_UART_Init+0x268>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d106      	bne.n	8000b90 <MCAL_UART_Init+0x1e8>
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <MCAL_UART_Init+0x280>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <MCAL_UART_Init+0x280>)
 8000b88:	f043 0320 	orr.w	r3, r3, #32
 8000b8c:	6053      	str	r3, [r2, #4]
 8000b8e:	e014      	b.n	8000bba <MCAL_UART_Init+0x212>
	    else if (USARTx == USART2){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART2_IRQ - 32)); }
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <MCAL_UART_Init+0x274>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d106      	bne.n	8000ba6 <MCAL_UART_Init+0x1fe>
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <MCAL_UART_Init+0x280>)
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MCAL_UART_Init+0x280>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba2:	6053      	str	r3, [r2, #4]
 8000ba4:	e009      	b.n	8000bba <MCAL_UART_Init+0x212>
	    else if (USARTx == USART3){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART3_IRQ - 32)); }
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <MCAL_UART_Init+0x278>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d105      	bne.n	8000bba <MCAL_UART_Init+0x212>
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MCAL_UART_Init+0x280>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <MCAL_UART_Init+0x280>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	6053      	str	r3, [r2, #4]
	    else                      { /*  Misra  */ }

		if      (UART_Config->IRQ_Enable == UART_IRQ_Enable_TXE)    { USARTx->CR1.TXEIE  = TRUE; }
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	7b1b      	ldrb	r3, [r3, #12]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d105      	bne.n	8000bce <MCAL_UART_Init+0x226>
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68d3      	ldr	r3, [r2, #12]
 8000bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bca:	60d3      	str	r3, [r2, #12]
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_TC)     { USARTx->CR1.TCIE   = TRUE; }
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_RXNEIE) { USARTx->CR1.RXNEIE = TRUE; }
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_PE)     { USARTx->CR1.PEIE   = TRUE; }
		else                                                        { /*  Misra  */ }
	}
}
 8000bcc:	e01c      	b.n	8000c08 <MCAL_UART_Init+0x260>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_TC)     { USARTx->CR1.TCIE   = TRUE; }
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	7b1b      	ldrb	r3, [r3, #12]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d105      	bne.n	8000be2 <MCAL_UART_Init+0x23a>
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68d3      	ldr	r3, [r2, #12]
 8000bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bde:	60d3      	str	r3, [r2, #12]
}
 8000be0:	e012      	b.n	8000c08 <MCAL_UART_Init+0x260>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_RXNEIE) { USARTx->CR1.RXNEIE = TRUE; }
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	7b1b      	ldrb	r3, [r3, #12]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d105      	bne.n	8000bf6 <MCAL_UART_Init+0x24e>
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68d3      	ldr	r3, [r2, #12]
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	e008      	b.n	8000c08 <MCAL_UART_Init+0x260>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_PE)     { USARTx->CR1.PEIE   = TRUE; }
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	7b1b      	ldrb	r3, [r3, #12]
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d104      	bne.n	8000c08 <MCAL_UART_Init+0x260>
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68d3      	ldr	r3, [r2, #12]
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40021000 	.word	0x40021000
 8000c18:	2000001c 	.word	0x2000001c
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40004800 	.word	0x40004800
 8000c24:	51eb851f 	.word	0x51eb851f
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <MCAL_UART_GPIO_Set_Pins>:
*
* Note              -Should enable the corresponding ALT & GPIO in RCC clock.
* 					-Also called after MCAL_UART_Init().
*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;

    if (USARTx == USART1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a7a      	ldr	r2, [pc, #488]	; (8000e20 <MCAL_UART_GPIO_Set_Pins+0x1f4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d14e      	bne.n	8000cda <MCAL_UART_GPIO_Set_Pins+0xae>
	{
    	//Enable GPIOA and AFIO
    	MCAL_RCC_AFIO_EN();
 8000c3c:	f7ff fe58 	bl	80008f0 <MCAL_RCC_AFIO_EN>
    	MCAL_RCC_GPIO_EN(GPIOA);
 8000c40:	4878      	ldr	r0, [pc, #480]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000c42:	f7ff fe1b 	bl	800087c <MCAL_RCC_GPIO_EN>

    	// PA9 TX and PA10 RX
    	if (Global_USART_Config[0]->USART_Mode != UART_Mode_TX)
 8000c46:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d00c      	beq.n	8000c6a <MCAL_UART_GPIO_Set_Pins+0x3e>
    	{
			// Initialize GPIOA Pin 10 as a AFIO UART RX
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c54:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000c56:	2308      	movs	r3, #8
 8000c58:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4619      	mov	r1, r3
 8000c64:	486f      	ldr	r0, [pc, #444]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000c66:	f7ff fd8f 	bl	8000788 <MCAL_GPIO_Init>
    	}
    	if (Global_USART_Config[0]->USART_Mode != UART_Mode_RX)
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00c      	beq.n	8000c8e <MCAL_UART_GPIO_Set_Pins+0x62>
    	{
			// Initialize GPIOA Pin 9 as a AFIO UART TX
			PinConfig.GPIO_PinNumber = GPIO_PIN_9;
 8000c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c78:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	4619      	mov	r1, r3
 8000c88:	4866      	ldr	r0, [pc, #408]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000c8a:	f7ff fd7d 	bl	8000788 <MCAL_GPIO_Init>
    	}
    	else { /*  Misra  */ }

    	// PA11 CTS and PA12 RTS
		if (Global_USART_Config[0]->HW_FlowControl != UART_HW_FlowControl_RTS)
 8000c8e:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	7adb      	ldrb	r3, [r3, #11]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d00c      	beq.n	8000cb2 <MCAL_UART_GPIO_Set_Pins+0x86>
		{
			// Initialize GPIOA Pin 10 as a AFIO UART CTS
			PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000c98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c9c:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	485d      	ldr	r0, [pc, #372]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000cae:	f7ff fd6b 	bl	8000788 <MCAL_GPIO_Init>
		}
		if (Global_USART_Config[0]->HW_FlowControl != UART_HW_FlowControl_CTS)
 8000cb2:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	7adb      	ldrb	r3, [r3, #11]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	f000 80ad 	beq.w	8000e18 <MCAL_UART_GPIO_Set_Pins+0x1ec>
		{
			// Initialize GPIOA Pin 9 as a AFIO UART RTS
			PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000cc4:	2306      	movs	r3, #6
 8000cc6:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4854      	ldr	r0, [pc, #336]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000cd4:	f7ff fd58 	bl	8000788 <MCAL_GPIO_Init>
		}
		else { /*  Misra  */ }
	}
    else { /*  Misra  */ }

}
 8000cd8:	e09e      	b.n	8000e18 <MCAL_UART_GPIO_Set_Pins+0x1ec>
    else if (USARTx == USART2)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a53      	ldr	r2, [pc, #332]	; (8000e2c <MCAL_UART_GPIO_Set_Pins+0x200>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d149      	bne.n	8000d76 <MCAL_UART_GPIO_Set_Pins+0x14a>
		MCAL_RCC_AFIO_EN();
 8000ce2:	f7ff fe05 	bl	80008f0 <MCAL_RCC_AFIO_EN>
		MCAL_RCC_GPIO_EN(GPIOA);
 8000ce6:	484f      	ldr	r0, [pc, #316]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000ce8:	f7ff fdc8 	bl	800087c <MCAL_RCC_GPIO_EN>
		if (Global_USART_Config[1]->USART_Mode != UART_Mode_TX)
 8000cec:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d00b      	beq.n	8000d0e <MCAL_UART_GPIO_Set_Pins+0xe2>
			PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000cfa:	2308      	movs	r3, #8
 8000cfc:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	4846      	ldr	r0, [pc, #280]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000d0a:	f7ff fd3d 	bl	8000788 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->USART_Mode != UART_Mode_RX)
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00b      	beq.n	8000d30 <MCAL_UART_GPIO_Set_Pins+0x104>
			PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4619      	mov	r1, r3
 8000d2a:	483e      	ldr	r0, [pc, #248]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000d2c:	f7ff fd2c 	bl	8000788 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HW_FlowControl != UART_HW_FlowControl_RTS)
 8000d30:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	7adb      	ldrb	r3, [r3, #11]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d00b      	beq.n	8000d52 <MCAL_UART_GPIO_Set_Pins+0x126>
			PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4835      	ldr	r0, [pc, #212]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000d4e:	f7ff fd1b 	bl	8000788 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HW_FlowControl != UART_HW_FlowControl_CTS)
 8000d52:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	7adb      	ldrb	r3, [r3, #11]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d05d      	beq.n	8000e18 <MCAL_UART_GPIO_Set_Pins+0x1ec>
			PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000d60:	2306      	movs	r3, #6
 8000d62:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	482d      	ldr	r0, [pc, #180]	; (8000e24 <MCAL_UART_GPIO_Set_Pins+0x1f8>)
 8000d70:	f7ff fd0a 	bl	8000788 <MCAL_GPIO_Init>
}
 8000d74:	e050      	b.n	8000e18 <MCAL_UART_GPIO_Set_Pins+0x1ec>
    else if (USARTx == USART3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MCAL_UART_GPIO_Set_Pins+0x204>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d14c      	bne.n	8000e18 <MCAL_UART_GPIO_Set_Pins+0x1ec>
		MCAL_RCC_AFIO_EN();
 8000d7e:	f7ff fdb7 	bl	80008f0 <MCAL_RCC_AFIO_EN>
		MCAL_RCC_GPIO_EN(GPIOB);
 8000d82:	482c      	ldr	r0, [pc, #176]	; (8000e34 <MCAL_UART_GPIO_Set_Pins+0x208>)
 8000d84:	f7ff fd7a 	bl	800087c <MCAL_RCC_GPIO_EN>
		if (Global_USART_Config[2]->USART_Mode != UART_Mode_TX)
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d00c      	beq.n	8000dac <MCAL_UART_GPIO_Set_Pins+0x180>
			PinConfig.GPIO_PinNumber = GPIO_PIN_11;
 8000d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d96:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MCAL_UART_GPIO_Set_Pins+0x208>)
 8000da8:	f7ff fcee 	bl	8000788 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->USART_Mode != UART_Mode_RX)
 8000dac:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00c      	beq.n	8000dd0 <MCAL_UART_GPIO_Set_Pins+0x1a4>
			PinConfig.GPIO_PinNumber = GPIO_PIN_10;
 8000db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dba:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000dbc:	2306      	movs	r3, #6
 8000dbe:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <MCAL_UART_GPIO_Set_Pins+0x208>)
 8000dcc:	f7ff fcdc 	bl	8000788 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HW_FlowControl != UART_HW_FlowControl_RTS)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	7adb      	ldrb	r3, [r3, #11]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d00c      	beq.n	8000df4 <MCAL_UART_GPIO_Set_Pins+0x1c8>
			PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000de0:	2308      	movs	r3, #8
 8000de2:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MCAL_UART_GPIO_Set_Pins+0x208>)
 8000df0:	f7ff fcca 	bl	8000788 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HW_FlowControl != UART_HW_FlowControl_CTS)
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MCAL_UART_GPIO_Set_Pins+0x1fc>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	7adb      	ldrb	r3, [r3, #11]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d00c      	beq.n	8000e18 <MCAL_UART_GPIO_Set_Pins+0x1ec>
			PinConfig.GPIO_PinNumber = GPIO_PIN_14;
 8000dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e02:	81bb      	strh	r3, [r7, #12]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000e04:	2306      	movs	r3, #6
 8000e06:	73bb      	strb	r3, [r7, #14]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &PinConfig);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MCAL_UART_GPIO_Set_Pins+0x208>)
 8000e14:	f7ff fcb8 	bl	8000788 <MCAL_GPIO_Init>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40010800 	.word	0x40010800
 8000e28:	2000001c 	.word	0x2000001c
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40004800 	.word	0x40004800
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <MCAL_UART_SendData>:
*                   -Because it is replaced by the parity.
*                   -When receiving with the parity enabled the value read in
*                    the MSB bit is the received parity bit.
*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* P_TxBuffer, uint8_t Mechanism)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until TXE (Transmit data register empty)
	if (Mechanism == Polling_Mechanism) { while(!(USARTx->SR.TXE)); }
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d107      	bne.n	8000e5c <MCAL_UART_SendData+0x24>
 8000e4c:	bf00      	nop
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f8      	beq.n	8000e4e <MCAL_UART_SendData+0x16>
	else                                { /*  Misra  */ }

	// 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame
	USART_Config_t* USARTxConfig = NULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
	USARTxConfig = (USART_Config_t*)((USARTx == USART1)?  Global_USART_Config       :
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <MCAL_UART_SendData+0x90>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d007      	beq.n	8000e78 <MCAL_UART_SendData+0x40>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <MCAL_UART_SendData+0x94>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d101      	bne.n	8000e74 <MCAL_UART_SendData+0x3c>
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MCAL_UART_SendData+0x98>)
 8000e72:	e002      	b.n	8000e7a <MCAL_UART_SendData+0x42>
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MCAL_UART_SendData+0x9c>)
 8000e76:	e000      	b.n	8000e7a <MCAL_UART_SendData+0x42>
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MCAL_UART_SendData+0xa0>)
 8000e7a:	617b      	str	r3, [r7, #20]
			                            ((USARTx == USART2)? (Global_USART_Config + 1)  :
			                		                             (Global_USART_Config + 2)));

	switch(USARTxConfig->Payload_Length){
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	7a1b      	ldrb	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <MCAL_UART_SendData+0x52>
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d00d      	beq.n	8000ea4 <MCAL_UART_SendData+0x6c>
	case UART_Payload_Length_8B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0xFF); break;
	case UART_Payload_Length_9B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0x1FF);break;
	}
}
 8000e88:	e019      	b.n	8000ebe <MCAL_UART_SendData+0x86>
	case UART_Payload_Length_8B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0xFF); break;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	b299      	uxth	r1, r3
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	6853      	ldr	r3, [r2, #4]
 8000e9c:	f361 0308 	bfi	r3, r1, #0, #9
 8000ea0:	6053      	str	r3, [r2, #4]
 8000ea2:	e00c      	b.n	8000ebe <MCAL_UART_SendData+0x86>
	case UART_Payload_Length_9B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0x1FF);break;
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b299      	uxth	r1, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	6853      	ldr	r3, [r2, #4]
 8000eb6:	f361 0308 	bfi	r3, r1, #0, #9
 8000eba:	6053      	str	r3, [r2, #4]
 8000ebc:	bf00      	nop
}
 8000ebe:	bf00      	nop
 8000ec0:	371c      	adds	r7, #28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	20000024 	.word	0x20000024
 8000ed8:	2000001c 	.word	0x2000001c

08000edc <MCAL_UART_ReceiveData>:
*                   -Because it is replaced by the parity.
*                   -When receiving with the parity enabled the value read in
*                    the MSB bit is the received parity bit.
*/
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* P_RxBuffer, uint8_t Mechanism)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until RXNE (Read data register not empty)
	if (Mechanism == Polling_Mechanism) { while(!(USARTx->SR.RXNE)); }
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d107      	bne.n	8000f00 <MCAL_UART_ReceiveData+0x24>
 8000ef0:	bf00      	nop
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f8      	beq.n	8000ef2 <MCAL_UART_ReceiveData+0x16>
	else                                { /*  Misra  */ }

	// 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame
	USART_Config_t* USARTxConfig = NULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
	USARTxConfig = (USART_Config_t*)((USARTx == USART1)?  Global_USART_Config       :
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <MCAL_UART_ReceiveData+0xbc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d007      	beq.n	8000f1c <MCAL_UART_ReceiveData+0x40>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <MCAL_UART_ReceiveData+0xc0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d101      	bne.n	8000f18 <MCAL_UART_ReceiveData+0x3c>
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MCAL_UART_ReceiveData+0xc4>)
 8000f16:	e002      	b.n	8000f1e <MCAL_UART_ReceiveData+0x42>
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MCAL_UART_ReceiveData+0xc8>)
 8000f1a:	e000      	b.n	8000f1e <MCAL_UART_ReceiveData+0x42>
 8000f1c:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MCAL_UART_ReceiveData+0xcc>)
 8000f1e:	617b      	str	r3, [r7, #20]
			                        ((USARTx == USART2)? (Global_USART_Config + 1)  :
			                		                     (Global_USART_Config + 2)));

	switch(USARTxConfig->Payload_Length){
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	7a1b      	ldrb	r3, [r3, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <MCAL_UART_ReceiveData+0x52>
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d019      	beq.n	8000f60 <MCAL_UART_ReceiveData+0x84>
			*P_RxBuffer =  USARTx->DR.DR;
		else
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
		break;
	}
}
 8000f2c:	e02f      	b.n	8000f8e <MCAL_UART_ReceiveData+0xb2>
		if (USARTxConfig->Parity == UART_Parity_Disable)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	7a5b      	ldrb	r3, [r3, #9]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <MCAL_UART_ReceiveData+0x6e>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	801a      	strh	r2, [r3, #0]
		break;
 8000f48:	e021      	b.n	8000f8e <MCAL_UART_ReceiveData+0xb2>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0x7F);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	801a      	strh	r2, [r3, #0]
		break;
 8000f5e:	e016      	b.n	8000f8e <MCAL_UART_ReceiveData+0xb2>
		if (USARTxConfig->Parity == UART_Parity_Disable)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	7a5b      	ldrb	r3, [r3, #9]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d108      	bne.n	8000f7a <MCAL_UART_ReceiveData+0x9e>
			*P_RxBuffer =  USARTx->DR.DR;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	461a      	mov	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	801a      	strh	r2, [r3, #0]
		break;
 8000f78:	e008      	b.n	8000f8c <MCAL_UART_ReceiveData+0xb0>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	801a      	strh	r2, [r3, #0]
		break;
 8000f8c:	bf00      	nop
}
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	20000020 	.word	0x20000020
 8000fa4:	20000024 	.word	0x20000024
 8000fa8:	2000001c 	.word	0x2000001c

08000fac <USART2_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <USART2_IRQHandler+0x10>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4798      	blx	r3
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000001c 	.word	0x2000001c

08000fc0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <USART1_IRQHandler+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4798      	blx	r3
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000001c 	.word	0x2000001c

08000fd4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000fd8:	4b02      	ldr	r3, [pc, #8]	; (8000fe4 <USART3_IRQHandler+0x10>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	4798      	blx	r3
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000001c 	.word	0x2000001c

08000fe8 <__libc_init_array>:
 8000fe8:	b570      	push	{r4, r5, r6, lr}
 8000fea:	2500      	movs	r5, #0
 8000fec:	4e0c      	ldr	r6, [pc, #48]	; (8001020 <__libc_init_array+0x38>)
 8000fee:	4c0d      	ldr	r4, [pc, #52]	; (8001024 <__libc_init_array+0x3c>)
 8000ff0:	1ba4      	subs	r4, r4, r6
 8000ff2:	10a4      	asrs	r4, r4, #2
 8000ff4:	42a5      	cmp	r5, r4
 8000ff6:	d109      	bne.n	800100c <__libc_init_array+0x24>
 8000ff8:	f000 f81a 	bl	8001030 <_init>
 8000ffc:	2500      	movs	r5, #0
 8000ffe:	4e0a      	ldr	r6, [pc, #40]	; (8001028 <__libc_init_array+0x40>)
 8001000:	4c0a      	ldr	r4, [pc, #40]	; (800102c <__libc_init_array+0x44>)
 8001002:	1ba4      	subs	r4, r4, r6
 8001004:	10a4      	asrs	r4, r4, #2
 8001006:	42a5      	cmp	r5, r4
 8001008:	d105      	bne.n	8001016 <__libc_init_array+0x2e>
 800100a:	bd70      	pop	{r4, r5, r6, pc}
 800100c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001010:	4798      	blx	r3
 8001012:	3501      	adds	r5, #1
 8001014:	e7ee      	b.n	8000ff4 <__libc_init_array+0xc>
 8001016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101a:	4798      	blx	r3
 800101c:	3501      	adds	r5, #1
 800101e:	e7f2      	b.n	8001006 <__libc_init_array+0x1e>
 8001020:	08001048 	.word	0x08001048
 8001024:	08001048 	.word	0x08001048
 8001028:	08001048 	.word	0x08001048
 800102c:	0800104c 	.word	0x0800104c

08001030 <_init>:
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001032:	bf00      	nop
 8001034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001036:	bc08      	pop	{r3}
 8001038:	469e      	mov	lr, r3
 800103a:	4770      	bx	lr

0800103c <_fini>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr
