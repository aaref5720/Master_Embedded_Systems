
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c4  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006df  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041a  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_10>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "Timer_test.h"
#include "PWM.h"

int main(void)
{
	PWM_Test();
  7c:	0e 94 43 00 	call	0x86	; 0x86 <PWM_Test>
}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <PWM_Test>:
  
/*******************************************************************************
                                  Application APIs                                 
 *******************************************************************************/
void PWM_Test(void)
{
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	00 d0       	rcall	.+0      	; 0x8c <PWM_Test+0x6>
  8c:	00 d0       	rcall	.+0      	; 0x8e <PWM_Test+0x8>
  8e:	1f 92       	push	r1
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	/* Configure PIND0 as Output */
	Set_Bit(DDRB, 3);
  94:	87 b3       	in	r24, 0x17	; 23
  96:	88 60       	ori	r24, 0x08	; 8
  98:	87 bb       	out	0x17, r24	; 23
	
	/* Set timer configuration */
	TIMER0Config_t TIMER0_Config;
	TIMER0_Config.Timer_Mode = TIMER0_MODE_Fast_PWM_Inverting;
  9a:	88 e7       	ldi	r24, 0x78	; 120
  9c:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Config.Clock_Source = TIMER0_CLOCK_SOURCE_INTERNAL_PRESCALER_8;
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_Config.IRQ_Enable = TIMER0_IRQ_ENABLE_NONE;
  a2:	1b 82       	std	Y+3, r1	; 0x03
	TIMER0_Config.P_IRQ_CallBack = NULL;
  a4:	1d 82       	std	Y+5, r1	; 0x05
  a6:	1c 82       	std	Y+4, r1	; 0x04
	
	MCAL_TIMER0_Init(&TIMER0_Config);
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <MCAL_TIMER0_Init>
	
	while (1)
	{
		MCAL_PWM_DutyCycle(100);
  b0:	84 e6       	ldi	r24, 0x64	; 100
  b2:	0e 94 88 00 	call	0x110	; 0x110 <MCAL_PWM_DutyCycle>
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <PWM_Test+0x2a>

000000b8 <MCAL_TIMER0_Init>:
*
* Note              -None.
*/
void MCAL_TIMER0_GetCounterValue(uint8_t* TicksNumber)
{
	*TicksNumber = TCNT0;
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ec 01       	movw	r28, r24
  be:	85 e0       	ldi	r24, 0x05	; 5
  c0:	fe 01       	movw	r30, r28
  c2:	a2 e6       	ldi	r26, 0x62	; 98
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <MCAL_TIMER0_Init+0xe>
  ce:	93 b7       	in	r25, 0x33	; 51
  d0:	88 81       	ld	r24, Y
  d2:	89 2b       	or	r24, r25
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	88 81       	ld	r24, Y
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	29 f0       	breq	.+10     	; 0xe6 <MCAL_TIMER0_Init+0x2e>
  dc:	88 23       	and	r24, r24
  de:	19 f0       	breq	.+6      	; 0xe6 <MCAL_TIMER0_Init+0x2e>
  e0:	8c b7       	in	r24, 0x3c	; 60
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8c bf       	out	0x3c, r24	; 60
  e6:	93 b7       	in	r25, 0x33	; 51
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	89 2b       	or	r24, r25
  ec:	83 bf       	out	0x33, r24	; 51
  ee:	99 b7       	in	r25, 0x39	; 57
  f0:	8a 81       	ldd	r24, Y+2	; 0x02
  f2:	89 2b       	or	r24, r25
  f4:	89 bf       	out	0x39, r24	; 57
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	88 23       	and	r24, r24
  fa:	09 f0       	breq	.+2      	; 0xfe <MCAL_TIMER0_Init+0x46>
  fc:	78 94       	sei
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <MCAL_PWM_DutyCycle>:
* Note              -Supported for Fast PWM Mode only & count value must not
*					 exceed 255.
*/
void MCAL_PWM_DutyCycle(uint8_t Duty_Cycle)
{
	if(Global_TIMER0_Config.Timer_Mode == TIMER0_MODE_Fast_PWM_Noninverting)
 110:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Global_TIMER0_Config>
 114:	98 36       	cpi	r25, 0x68	; 104
 116:	11 f4       	brne	.+4      	; 0x11c <MCAL_PWM_DutyCycle+0xc>
	{
		OCR0 = Duty_Cycle;
 118:	8c bf       	out	0x3c, r24	; 60
 11a:	08 95       	ret
	}
	else if(Global_TIMER0_Config.Timer_Mode == TIMER0_MODE_Fast_PWM_Inverting)
 11c:	98 37       	cpi	r25, 0x78	; 120
 11e:	11 f4       	brne	.+4      	; 0x124 <MCAL_PWM_DutyCycle+0x14>
	{
		OCR0 = (uint8_t)(255 - Duty_Cycle);
 120:	80 95       	com	r24
 122:	8c bf       	out	0x3c, r24	; 60
 124:	08 95       	ret

00000126 <__vector_11>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
ISR(TIMER0_OVF_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	GP_IRQ_CallBack();
 148:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 150:	09 95       	icall
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	GP_IRQ_CallBack();
 196:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 19a:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 19e:	09 95       	icall
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
